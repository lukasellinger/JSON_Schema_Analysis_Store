{
  "$schema": "http://json-schema.org/draft-04/schema",
  "title": "Node",
  "type": "object",
  "description": "A node in the node hierarchy.  When the node contains `skin`, all `mesh.primitives` must contain `JOINTS_0` and `WEIGHTS_0` attributes.  A node can have either a `matrix` or any combination of `translation`/`rotation`/`scale` (TRS) properties. TRS properties are converted to matrices and postmultiplied in the `T * R * S` order to compose the transformation matrix; first the scale is applied to the vertices, then the rotation, and then the translation. If none are provided, the transform is the identity. When a node is targeted for animation (referenced by an animation.channel.target), only TRS properties may be present; `matrix` will not be present.",
  "allOf": [
    {
      "$ref": "#/definitions/glTFChildOfRootProperty.schema.json"
    }
  ],
  "properties": {
    "camera": {
      "allOf": [
        {
          "$ref": "#/definitions/glTFid.schema.json"
        }
      ],
      "description": "The index of the camera referenced by this node."
    },
    "children": {
      "type": "array",
      "description": "The indices of this node\u0027s children.",
      "items": {
        "$ref": "#/definitions/glTFid.schema.json"
      },
      "uniqueItems": true,
      "minItems": 1
    },
    "skin": {
      "allOf": [
        {
          "$ref": "#/definitions/glTFid.schema.json"
        }
      ],
      "description": "The index of the skin referenced by this node."
    },
    "matrix": {
      "type": "array",
      "description": "A floating-point 4x4 transformation matrix stored in column-major order.",
      "items": {
        "type": "number"
      },
      "minItems": 16,
      "maxItems": 16,
      "default": [
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0
      ],
      "gltf_detailedDescription": "A floating-point 4x4 transformation matrix stored in column-major order.",
      "gltf_webgl": "`uniformMatrix4fv()` with the transpose parameter equal to false"
    },
    "mesh": {
      "allOf": [
        {
          "$ref": "#/definitions/glTFid.schema.json"
        }
      ],
      "description": "The index of the mesh in this node."
    },
    "rotation": {
      "type": "array",
      "description": "The node\u0027s unit quaternion rotation in the order (x, y, z, w), where w is the scalar.",
      "items": {
        "type": "number",
        "minimum": -1.0,
        "maximum": 1.0
      },
      "minItems": 4,
      "maxItems": 4,
      "default": [
        0.0,
        0.0,
        0.0,
        1.0
      ]
    },
    "scale": {
      "type": "array",
      "description": "The node\u0027s non-uniform scale, given as the scaling factors along the x, y, and z axes.",
      "items": {
        "type": "number"
      },
      "minItems": 3,
      "maxItems": 3,
      "default": [
        1.0,
        1.0,
        1.0
      ]
    },
    "translation": {
      "type": "array",
      "description": "The node\u0027s translation along the x, y, and z axes.",
      "items": {
        "type": "number"
      },
      "minItems": 3,
      "maxItems": 3,
      "default": [
        0.0,
        0.0,
        0.0
      ]
    },
    "weights": {
      "type": "array",
      "description": "The weights of the instantiated Morph Target. Number of elements must match number of Morph Targets of used mesh.",
      "minItems": 1,
      "items": {
        "type": "number"
      }
    },
    "name": {},
    "extensions": {},
    "extras": {}
  },
  "dependencies": {
    "weights": [
      "mesh"
    ],
    "skin": [
      "mesh"
    ]
  },
  "not": {
    "anyOf": [
      {
        "required": [
          "matrix",
          "translation"
        ]
      },
      {
        "required": [
          "matrix",
          "rotation"
        ]
      },
      {
        "required": [
          "matrix",
          "scale"
        ]
      }
    ]
  },
  "definitions": {
    "glTFChildOfRootProperty.schema.json": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "glTF Child of Root Property",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/glTFProperty.schema.json"
        }
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The user-defined name of this object.",
          "gltf_detailedDescription": "The user-defined name of this object.  This is not necessarily unique, e.g., an accessor and a buffer could have the same name, or two accessors could even have the same name."
        }
      }
    },
    "glTFProperty.schema.json": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "glTF Property",
      "type": "object",
      "properties": {
        "extensions": {
          "$ref": "#/definitions/extension.schema.json"
        },
        "extras": {
          "$ref": "#/definitions/extras.schema.json"
        }
      }
    },
    "extension.schema.json": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "Extension",
      "type": "object",
      "description": "Dictionary object with extension-specific objects.",
      "properties": {},
      "additionalProperties": {
        "type": "object"
      }
    },
    "extras.schema.json": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "Extras",
      "description": "Application-specific data."
    },
    "glTFid.schema.json": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "glTF Id",
      "type": "integer",
      "minimum": 0
    }
  }
}