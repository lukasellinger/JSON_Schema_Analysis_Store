{
  "type": "object",
  "anyOf": [
    {
      "$ref": "#/definitions/SkaffoldConfig"
    }
  ],
  "$schema": "http://json-schema-org/draft-07/schema#",
  "definitions": {
    "Activation": {
      "properties": {
        "command": {
          "type": "string",
          "description": "a Skaffold command for which the profile is auto-activated.",
          "x-intellij-html-description": "a Skaffold command for which the profile is auto-activated.",
          "examples": [
            "dev"
          ]
        },
        "env": {
          "type": "string",
          "description": "a `key\u003dvalue` pair. The profile is auto-activated if an Environment Variable `key` has value `value`.",
          "x-intellij-html-description": "a \u003ccode\u003ekey\u003dvalue\u003c/code\u003e pair. The profile is auto-activated if an Environment Variable \u003ccode\u003ekey\u003c/code\u003e has value \u003ccode\u003evalue\u003c/code\u003e.",
          "examples": [
            "ENV\u003dproduction"
          ]
        },
        "kubeContext": {
          "type": "string",
          "description": "a Kubernetes context for which the profile is auto-activated.",
          "x-intellij-html-description": "a Kubernetes context for which the profile is auto-activated.",
          "examples": [
            "minikube"
          ]
        }
      },
      "preferredOrder": [
        "env",
        "kubeContext",
        "command"
      ],
      "additionalProperties": false,
      "description": "criteria by which a profile is auto-activated.",
      "x-intellij-html-description": "criteria by which a profile is auto-activated."
    },
    "Artifact": {
      "required": [
        "image"
      ],
      "anyOf": [
        {
          "properties": {
            "context": {
              "type": "string",
              "description": "directory containing the artifact\u0027s sources.",
              "x-intellij-html-description": "directory containing the artifact\u0027s sources.",
              "default": "."
            },
            "image": {
              "type": "string",
              "description": "name of the image to be built.",
              "x-intellij-html-description": "name of the image to be built.",
              "examples": [
                "gcr.io/k8s-skaffold/example"
              ]
            },
            "plugin": {
              "$ref": "#/definitions/BuilderPlugin",
              "description": "plugin used to build this artifact.",
              "x-intellij-html-description": "plugin used to build this artifact."
            },
            "sync": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "description": "*alpha* local files synced to pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.",
              "x-intellij-html-description": "\u003cem\u003ealpha\u003c/em\u003e local files synced to pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.",
              "default": "{}",
              "examples": [
                "{\"*.py\": \".\", \"css/**/*.css\": \"app/css\"}"
              ]
            }
          },
          "preferredOrder": [
            "image",
            "context",
            "sync",
            "plugin"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "context": {
              "type": "string",
              "description": "directory containing the artifact\u0027s sources.",
              "x-intellij-html-description": "directory containing the artifact\u0027s sources.",
              "default": "."
            },
            "docker": {
              "$ref": "#/definitions/DockerArtifact",
              "description": "*beta* describes an artifact built from a Dockerfile.",
              "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e describes an artifact built from a Dockerfile."
            },
            "image": {
              "type": "string",
              "description": "name of the image to be built.",
              "x-intellij-html-description": "name of the image to be built.",
              "examples": [
                "gcr.io/k8s-skaffold/example"
              ]
            },
            "plugin": {
              "$ref": "#/definitions/BuilderPlugin",
              "description": "plugin used to build this artifact.",
              "x-intellij-html-description": "plugin used to build this artifact."
            },
            "sync": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "description": "*alpha* local files synced to pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.",
              "x-intellij-html-description": "\u003cem\u003ealpha\u003c/em\u003e local files synced to pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.",
              "default": "{}",
              "examples": [
                "{\"*.py\": \".\", \"css/**/*.css\": \"app/css\"}"
              ]
            }
          },
          "preferredOrder": [
            "image",
            "context",
            "sync",
            "plugin",
            "docker"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "bazel": {
              "$ref": "#/definitions/BazelArtifact",
              "description": "*beta* requires bazel CLI to be installed and the sources to contain [Bazel](https://bazel.build/) configuration files.",
              "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e requires bazel CLI to be installed and the sources to contain \u003ca href\u003d\"https://bazel.build/\"\u003eBazel\u003c/a\u003e configuration files."
            },
            "context": {
              "type": "string",
              "description": "directory containing the artifact\u0027s sources.",
              "x-intellij-html-description": "directory containing the artifact\u0027s sources.",
              "default": "."
            },
            "image": {
              "type": "string",
              "description": "name of the image to be built.",
              "x-intellij-html-description": "name of the image to be built.",
              "examples": [
                "gcr.io/k8s-skaffold/example"
              ]
            },
            "plugin": {
              "$ref": "#/definitions/BuilderPlugin",
              "description": "plugin used to build this artifact.",
              "x-intellij-html-description": "plugin used to build this artifact."
            },
            "sync": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "description": "*alpha* local files synced to pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.",
              "x-intellij-html-description": "\u003cem\u003ealpha\u003c/em\u003e local files synced to pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.",
              "default": "{}",
              "examples": [
                "{\"*.py\": \".\", \"css/**/*.css\": \"app/css\"}"
              ]
            }
          },
          "preferredOrder": [
            "image",
            "context",
            "sync",
            "plugin",
            "bazel"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "context": {
              "type": "string",
              "description": "directory containing the artifact\u0027s sources.",
              "x-intellij-html-description": "directory containing the artifact\u0027s sources.",
              "default": "."
            },
            "image": {
              "type": "string",
              "description": "name of the image to be built.",
              "x-intellij-html-description": "name of the image to be built.",
              "examples": [
                "gcr.io/k8s-skaffold/example"
              ]
            },
            "jibMaven": {
              "$ref": "#/definitions/JibMavenArtifact",
              "description": "*alpha* builds images using the [Jib plugin for Maven](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin).",
              "x-intellij-html-description": "\u003cem\u003ealpha\u003c/em\u003e builds images using the \u003ca href\u003d\"https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin\"\u003eJib plugin for Maven\u003c/a\u003e."
            },
            "plugin": {
              "$ref": "#/definitions/BuilderPlugin",
              "description": "plugin used to build this artifact.",
              "x-intellij-html-description": "plugin used to build this artifact."
            },
            "sync": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "description": "*alpha* local files synced to pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.",
              "x-intellij-html-description": "\u003cem\u003ealpha\u003c/em\u003e local files synced to pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.",
              "default": "{}",
              "examples": [
                "{\"*.py\": \".\", \"css/**/*.css\": \"app/css\"}"
              ]
            }
          },
          "preferredOrder": [
            "image",
            "context",
            "sync",
            "plugin",
            "jibMaven"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "context": {
              "type": "string",
              "description": "directory containing the artifact\u0027s sources.",
              "x-intellij-html-description": "directory containing the artifact\u0027s sources.",
              "default": "."
            },
            "image": {
              "type": "string",
              "description": "name of the image to be built.",
              "x-intellij-html-description": "name of the image to be built.",
              "examples": [
                "gcr.io/k8s-skaffold/example"
              ]
            },
            "jibGradle": {
              "$ref": "#/definitions/JibGradleArtifact",
              "description": "*alpha* builds images using the [Jib plugin for Gradle](https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin).",
              "x-intellij-html-description": "\u003cem\u003ealpha\u003c/em\u003e builds images using the \u003ca href\u003d\"https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin\"\u003eJib plugin for Gradle\u003c/a\u003e."
            },
            "plugin": {
              "$ref": "#/definitions/BuilderPlugin",
              "description": "plugin used to build this artifact.",
              "x-intellij-html-description": "plugin used to build this artifact."
            },
            "sync": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "description": "*alpha* local files synced to pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.",
              "x-intellij-html-description": "\u003cem\u003ealpha\u003c/em\u003e local files synced to pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.",
              "default": "{}",
              "examples": [
                "{\"*.py\": \".\", \"css/**/*.css\": \"app/css\"}"
              ]
            }
          },
          "preferredOrder": [
            "image",
            "context",
            "sync",
            "plugin",
            "jibGradle"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "context": {
              "type": "string",
              "description": "directory containing the artifact\u0027s sources.",
              "x-intellij-html-description": "directory containing the artifact\u0027s sources.",
              "default": "."
            },
            "image": {
              "type": "string",
              "description": "name of the image to be built.",
              "x-intellij-html-description": "name of the image to be built.",
              "examples": [
                "gcr.io/k8s-skaffold/example"
              ]
            },
            "kaniko": {
              "$ref": "#/definitions/KanikoArtifact",
              "description": "*alpha* builds images using [kaniko](https://github.com/GoogleContainerTools/kaniko).",
              "x-intellij-html-description": "\u003cem\u003ealpha\u003c/em\u003e builds images using \u003ca href\u003d\"https://github.com/GoogleContainerTools/kaniko\"\u003ekaniko\u003c/a\u003e."
            },
            "plugin": {
              "$ref": "#/definitions/BuilderPlugin",
              "description": "plugin used to build this artifact.",
              "x-intellij-html-description": "plugin used to build this artifact."
            },
            "sync": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "description": "*alpha* local files synced to pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.",
              "x-intellij-html-description": "\u003cem\u003ealpha\u003c/em\u003e local files synced to pods instead of triggering an image build when modified. This is a mapping of local files to sync to remote folders.",
              "default": "{}",
              "examples": [
                "{\"*.py\": \".\", \"css/**/*.css\": \"app/css\"}"
              ]
            }
          },
          "preferredOrder": [
            "image",
            "context",
            "sync",
            "plugin",
            "kaniko"
          ],
          "additionalProperties": false
        }
      ],
      "description": "items that need to be built, along with the context in which they should be built.",
      "x-intellij-html-description": "items that need to be built, along with the context in which they should be built."
    },
    "BazelArtifact": {
      "required": [
        "target"
      ],
      "properties": {
        "args": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "additional args to pass to `bazel build`.",
          "x-intellij-html-description": "additional args to pass to \u003ccode\u003ebazel build\u003c/code\u003e.",
          "default": "[]",
          "examples": [
            "[\"-flag\", \"--otherflag\"]"
          ]
        },
        "target": {
          "type": "string",
          "description": "`bazel build` target to run.",
          "x-intellij-html-description": "\u003ccode\u003ebazel build\u003c/code\u003e target to run.",
          "examples": [
            "//:skaffold_example.tar"
          ]
        }
      },
      "preferredOrder": [
        "target",
        "args"
      ],
      "additionalProperties": false,
      "description": "*beta* describes an artifact built with [Bazel](https://bazel.build/).",
      "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e describes an artifact built with \u003ca href\u003d\"https://bazel.build/\"\u003eBazel\u003c/a\u003e."
    },
    "BuildConfig": {
      "anyOf": [
        {
          "properties": {
            "artifacts": {
              "items": {
                "$ref": "#/definitions/Artifact"
              },
              "type": "array",
              "description": "the images you\u0027re going to be building.",
              "x-intellij-html-description": "the images you\u0027re going to be building."
            },
            "executionEnvironment": {
              "$ref": "#/definitions/ExecutionEnvironment",
              "description": "environment in which the build should run. Possible values: googleCloudBuild.",
              "x-intellij-html-description": "environment in which the build should run. Possible values: googleCloudBuild."
            },
            "tagPolicy": {
              "$ref": "#/definitions/TagPolicy",
              "description": "*beta* determines how images are tagged. A few strategies are provided here, although you most likely won\u0027t need to care! If not specified, it defaults to `gitCommit: {}`.",
              "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e determines how images are tagged. A few strategies are provided here, although you most likely won\u0027t need to care! If not specified, it defaults to \u003ccode\u003egitCommit: {}\u003c/code\u003e."
            }
          },
          "preferredOrder": [
            "artifacts",
            "tagPolicy",
            "executionEnvironment"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "artifacts": {
              "items": {
                "$ref": "#/definitions/Artifact"
              },
              "type": "array",
              "description": "the images you\u0027re going to be building.",
              "x-intellij-html-description": "the images you\u0027re going to be building."
            },
            "executionEnvironment": {
              "$ref": "#/definitions/ExecutionEnvironment",
              "description": "environment in which the build should run. Possible values: googleCloudBuild.",
              "x-intellij-html-description": "environment in which the build should run. Possible values: googleCloudBuild."
            },
            "local": {
              "$ref": "#/definitions/LocalBuild",
              "description": "*beta* describes how to do a build on the local docker daemon and optionally push to a repository.",
              "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e describes how to do a build on the local docker daemon and optionally push to a repository."
            },
            "tagPolicy": {
              "$ref": "#/definitions/TagPolicy",
              "description": "*beta* determines how images are tagged. A few strategies are provided here, although you most likely won\u0027t need to care! If not specified, it defaults to `gitCommit: {}`.",
              "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e determines how images are tagged. A few strategies are provided here, although you most likely won\u0027t need to care! If not specified, it defaults to \u003ccode\u003egitCommit: {}\u003c/code\u003e."
            }
          },
          "preferredOrder": [
            "artifacts",
            "tagPolicy",
            "executionEnvironment",
            "local"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "artifacts": {
              "items": {
                "$ref": "#/definitions/Artifact"
              },
              "type": "array",
              "description": "the images you\u0027re going to be building.",
              "x-intellij-html-description": "the images you\u0027re going to be building."
            },
            "executionEnvironment": {
              "$ref": "#/definitions/ExecutionEnvironment",
              "description": "environment in which the build should run. Possible values: googleCloudBuild.",
              "x-intellij-html-description": "environment in which the build should run. Possible values: googleCloudBuild."
            },
            "googleCloudBuild": {
              "$ref": "#/definitions/GoogleCloudBuild",
              "description": "*beta* describes how to do a remote build on [Google Cloud Build](https://cloud.google.com/cloud-build/).",
              "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e describes how to do a remote build on \u003ca href\u003d\"https://cloud.google.com/cloud-build/\"\u003eGoogle Cloud Build\u003c/a\u003e."
            },
            "tagPolicy": {
              "$ref": "#/definitions/TagPolicy",
              "description": "*beta* determines how images are tagged. A few strategies are provided here, although you most likely won\u0027t need to care! If not specified, it defaults to `gitCommit: {}`.",
              "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e determines how images are tagged. A few strategies are provided here, although you most likely won\u0027t need to care! If not specified, it defaults to \u003ccode\u003egitCommit: {}\u003c/code\u003e."
            }
          },
          "preferredOrder": [
            "artifacts",
            "tagPolicy",
            "executionEnvironment",
            "googleCloudBuild"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "artifacts": {
              "items": {
                "$ref": "#/definitions/Artifact"
              },
              "type": "array",
              "description": "the images you\u0027re going to be building.",
              "x-intellij-html-description": "the images you\u0027re going to be building."
            },
            "cluster": {
              "$ref": "#/definitions/ClusterDetails",
              "description": "*beta* describes how to do an on-cluster build.",
              "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e describes how to do an on-cluster build."
            },
            "executionEnvironment": {
              "$ref": "#/definitions/ExecutionEnvironment",
              "description": "environment in which the build should run. Possible values: googleCloudBuild.",
              "x-intellij-html-description": "environment in which the build should run. Possible values: googleCloudBuild."
            },
            "tagPolicy": {
              "$ref": "#/definitions/TagPolicy",
              "description": "*beta* determines how images are tagged. A few strategies are provided here, although you most likely won\u0027t need to care! If not specified, it defaults to `gitCommit: {}`.",
              "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e determines how images are tagged. A few strategies are provided here, although you most likely won\u0027t need to care! If not specified, it defaults to \u003ccode\u003egitCommit: {}\u003c/code\u003e."
            }
          },
          "preferredOrder": [
            "artifacts",
            "tagPolicy",
            "executionEnvironment",
            "cluster"
          ],
          "additionalProperties": false
        }
      ],
      "description": "contains all the configuration for the build steps.",
      "x-intellij-html-description": "contains all the configuration for the build steps."
    },
    "BuilderPlugin": {
      "properties": {
        "name": {
          "type": "string",
          "description": "name of the build plugin.",
          "x-intellij-html-description": "name of the build plugin."
        },
        "properties": {
          "additionalProperties": {},
          "type": "object",
          "description": "key-value pairs passed to the plugin.",
          "x-intellij-html-description": "key-value pairs passed to the plugin.",
          "default": "{}"
        }
      },
      "preferredOrder": [
        "name",
        "properties"
      ],
      "additionalProperties": false,
      "description": "contains all fields necessary for specifying a build plugin.",
      "x-intellij-html-description": "contains all fields necessary for specifying a build plugin."
    },
    "ClusterDetails": {
      "properties": {
        "dockerConfig": {
          "$ref": "#/definitions/DockerConfig",
          "description": "describes how to mount the local Docker configuration into a pod.",
          "x-intellij-html-description": "describes how to mount the local Docker configuration into a pod."
        },
        "namespace": {
          "type": "string",
          "description": "Kubernetes namespace. Defaults to current namespace in Kubernetes configuration.",
          "x-intellij-html-description": "Kubernetes namespace. Defaults to current namespace in Kubernetes configuration."
        },
        "pullSecret": {
          "type": "string",
          "description": "path to the secret key file.",
          "x-intellij-html-description": "path to the secret key file."
        },
        "pullSecretName": {
          "type": "string",
          "description": "name of the Kubernetes secret for pulling the files from the build context and pushing the final image.",
          "x-intellij-html-description": "name of the Kubernetes secret for pulling the files from the build context and pushing the final image.",
          "default": "kaniko-secret"
        },
        "timeout": {
          "type": "string",
          "description": "amount of time (in seconds) that this build is allowed to run. Defaults to 20 minutes (`20m`).",
          "x-intellij-html-description": "amount of time (in seconds) that this build is allowed to run. Defaults to 20 minutes (\u003ccode\u003e20m\u003c/code\u003e)."
        }
      },
      "preferredOrder": [
        "pullSecret",
        "pullSecretName",
        "namespace",
        "timeout",
        "dockerConfig"
      ],
      "additionalProperties": false,
      "description": "*beta* describes how to do an on-cluster build.",
      "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e describes how to do an on-cluster build."
    },
    "DateTimeTagger": {
      "properties": {
        "format": {
          "type": "string",
          "description": "formats the date and time. See [#Time.Format](https://golang.org/pkg/time/#Time.Format).",
          "x-intellij-html-description": "formats the date and time. See \u003ca href\u003d\"https://golang.org/pkg/time/#Time.Format\"\u003e#Time.Format\u003c/a\u003e.",
          "default": "2006-01-02_15-04-05.999_MST"
        },
        "timezone": {
          "type": "string",
          "description": "sets the timezone for the date and time. See [Time.LoadLocation](https://golang.org/pkg/time/#Time.LoadLocation). Defaults to the local timezone.",
          "x-intellij-html-description": "sets the timezone for the date and time. See \u003ca href\u003d\"https://golang.org/pkg/time/#Time.LoadLocation\"\u003eTime.LoadLocation\u003c/a\u003e. Defaults to the local timezone."
        }
      },
      "preferredOrder": [
        "format",
        "timezone"
      ],
      "additionalProperties": false,
      "description": "*beta* tags images with the build timestamp.",
      "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e tags images with the build timestamp."
    },
    "DeployConfig": {
      "anyOf": [
        {
          "additionalProperties": false
        },
        {
          "properties": {
            "helm": {
              "$ref": "#/definitions/HelmDeploy",
              "description": "*beta* uses the `helm` CLI to apply the charts to the cluster.",
              "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e uses the \u003ccode\u003ehelm\u003c/code\u003e CLI to apply the charts to the cluster."
            }
          },
          "preferredOrder": [
            "helm"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "kubectl": {
              "$ref": "#/definitions/KubectlDeploy",
              "description": "*beta* uses a client side `kubectl apply` to deploy manifests. You\u0027ll need a `kubectl` CLI version installed that\u0027s compatible with your cluster.",
              "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e uses a client side \u003ccode\u003ekubectl apply\u003c/code\u003e to deploy manifests. You\u0027ll need a \u003ccode\u003ekubectl\u003c/code\u003e CLI version installed that\u0027s compatible with your cluster."
            }
          },
          "preferredOrder": [
            "kubectl"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "kustomize": {
              "$ref": "#/definitions/KustomizeDeploy",
              "description": "*beta* uses the `kustomize` CLI to \"patch\" a deployment for a target environment.",
              "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e uses the \u003ccode\u003ekustomize\u003c/code\u003e CLI to \u0026quot;patch\u0026quot; a deployment for a target environment."
            }
          },
          "preferredOrder": [
            "kustomize"
          ],
          "additionalProperties": false
        }
      ],
      "description": "contains all the configuration needed by the deploy steps.",
      "x-intellij-html-description": "contains all the configuration needed by the deploy steps."
    },
    "DockerArtifact": {
      "properties": {
        "buildArgs": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "arguments passed to the docker build.",
          "x-intellij-html-description": "arguments passed to the docker build.",
          "default": "{}",
          "examples": [
            "{\"key1\": \"value1\", \"key2\": \"value2\"}"
          ]
        },
        "cacheFrom": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "the Docker images used as cache sources.",
          "x-intellij-html-description": "the Docker images used as cache sources.",
          "default": "[]",
          "examples": [
            "[\"golang:1.10.1-alpine3.7\", \"alpine:3.7\"]"
          ]
        },
        "dockerfile": {
          "type": "string",
          "description": "locates the Dockerfile relative to workspace.",
          "x-intellij-html-description": "locates the Dockerfile relative to workspace.",
          "default": "Dockerfile"
        },
        "target": {
          "type": "string",
          "description": "Dockerfile target name to build.",
          "x-intellij-html-description": "Dockerfile target name to build."
        }
      },
      "preferredOrder": [
        "dockerfile",
        "target",
        "buildArgs",
        "cacheFrom"
      ],
      "additionalProperties": false,
      "description": "*beta* describes an artifact built from a Dockerfile, usually using `docker build`.",
      "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e describes an artifact built from a Dockerfile, usually using \u003ccode\u003edocker build\u003c/code\u003e."
    },
    "DockerConfig": {
      "properties": {
        "path": {
          "type": "string",
          "description": "path to the docker `config.json`.",
          "x-intellij-html-description": "path to the docker \u003ccode\u003econfig.json\u003c/code\u003e."
        },
        "secretName": {
          "type": "string",
          "description": "Kubernetes secret that will hold the Docker configuration.",
          "x-intellij-html-description": "Kubernetes secret that will hold the Docker configuration."
        }
      },
      "preferredOrder": [
        "path",
        "secretName"
      ],
      "additionalProperties": false,
      "description": "contains information about the docker `config.json` to mount.",
      "x-intellij-html-description": "contains information about the docker \u003ccode\u003econfig.json\u003c/code\u003e to mount."
    },
    "EnvTemplateTagger": {
      "required": [
        "template"
      ],
      "properties": {
        "template": {
          "type": "string",
          "description": "used to produce the image name and tag. See golang [text/template](https://golang.org/pkg/text/template/). The template is executed against the current environment, with those variables injected:   IMAGE_NAME   |  Name of the image being built, as supplied in the artifacts section.",
          "x-intellij-html-description": "used to produce the image name and tag. See golang \u003ca href\u003d\"https://golang.org/pkg/text/template/\"\u003etext/template\u003c/a\u003e. The template is executed against the current environment, with those variables injected:   IMAGE_NAME   |  Name of the image being built, as supplied in the artifacts section.",
          "examples": [
            "{{.RELEASE}}-{{.IMAGE_NAME}}"
          ]
        }
      },
      "preferredOrder": [
        "template"
      ],
      "additionalProperties": false,
      "description": "*beta* tags images with a configurable template string.",
      "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e tags images with a configurable template string."
    },
    "ExecEnvironment": {
      "type": "string",
      "description": "name of an execution environment.",
      "x-intellij-html-description": "name of an execution environment."
    },
    "ExecutionEnvironment": {
      "properties": {
        "name": {
          "$ref": "#/definitions/ExecEnvironment",
          "description": "name of the environment.",
          "x-intellij-html-description": "name of the environment."
        },
        "properties": {
          "additionalProperties": {},
          "type": "object",
          "description": "key-value pairs passed to the environment.",
          "x-intellij-html-description": "key-value pairs passed to the environment.",
          "default": "{}"
        }
      },
      "preferredOrder": [
        "name",
        "properties"
      ],
      "additionalProperties": false,
      "description": "environment in which the build should run (ex. local or in-cluster, etc.).",
      "x-intellij-html-description": "environment in which the build should run (ex. local or in-cluster, etc.)."
    },
    "GitTagger": {
      "description": "*beta* tags images with the git tag or commit of the artifact\u0027s workspace.",
      "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e tags images with the git tag or commit of the artifact\u0027s workspace."
    },
    "GoogleCloudBuild": {
      "properties": {
        "diskSizeGb": {
          "type": "integer",
          "description": "disk size of the VM that runs the build. See [Cloud Build Reference](https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#buildoptions).",
          "x-intellij-html-description": "disk size of the VM that runs the build. See \u003ca href\u003d\"https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#buildoptions\"\u003eCloud Build Reference\u003c/a\u003e."
        },
        "dockerImage": {
          "type": "string",
          "description": "image that runs a Docker build. See [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders).",
          "x-intellij-html-description": "image that runs a Docker build. See \u003ca href\u003d\"https://cloud.google.com/cloud-build/docs/cloud-builders\"\u003eCloud Builders\u003c/a\u003e.",
          "default": "gcr.io/cloud-builders/docker"
        },
        "gradleImage": {
          "type": "string",
          "description": "image that runs a Gradle build. See [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders).",
          "x-intellij-html-description": "image that runs a Gradle build. See \u003ca href\u003d\"https://cloud.google.com/cloud-build/docs/cloud-builders\"\u003eCloud Builders\u003c/a\u003e.",
          "default": "gcr.io/cloud-builders/gradle"
        },
        "machineType": {
          "type": "string",
          "description": "type of the VM that runs the build. See [Cloud Build Reference](https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#buildoptions).",
          "x-intellij-html-description": "type of the VM that runs the build. See \u003ca href\u003d\"https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#buildoptions\"\u003eCloud Build Reference\u003c/a\u003e."
        },
        "mavenImage": {
          "type": "string",
          "description": "image that runs a Maven build. See [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders).",
          "x-intellij-html-description": "image that runs a Maven build. See \u003ca href\u003d\"https://cloud.google.com/cloud-build/docs/cloud-builders\"\u003eCloud Builders\u003c/a\u003e.",
          "default": "gcr.io/cloud-builders/mvn"
        },
        "projectId": {
          "type": "string",
          "description": "ID of your Cloud Platform Project. If it is not provided, Skaffold will guess it from the image name. For example, given the artifact image name `gcr.io/myproject/image`, Skaffold will use the `myproject` GCP project.",
          "x-intellij-html-description": "ID of your Cloud Platform Project. If it is not provided, Skaffold will guess it from the image name. For example, given the artifact image name \u003ccode\u003egcr.io/myproject/image\u003c/code\u003e, Skaffold will use the \u003ccode\u003emyproject\u003c/code\u003e GCP project."
        },
        "timeout": {
          "type": "string",
          "description": "amount of time (in seconds) that this build should be allowed to run. See [Cloud Build Reference](https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#resource-build).",
          "x-intellij-html-description": "amount of time (in seconds) that this build should be allowed to run. See \u003ca href\u003d\"https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#resource-build\"\u003eCloud Build Reference\u003c/a\u003e."
        }
      },
      "preferredOrder": [
        "projectId",
        "diskSizeGb",
        "machineType",
        "timeout",
        "dockerImage",
        "mavenImage",
        "gradleImage"
      ],
      "additionalProperties": false,
      "description": "*beta* describes how to do a remote build on [Google Cloud Build](https://cloud.google.com/cloud-build/docs/). Docker and Jib artifacts can be built on Cloud Build. The `projectId` needs to be provided and the currently logged in user should be given permissions to trigger new builds.",
      "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e describes how to do a remote build on \u003ca href\u003d\"https://cloud.google.com/cloud-build/docs/\"\u003eGoogle Cloud Build\u003c/a\u003e. Docker and Jib artifacts can be built on Cloud Build. The \u003ccode\u003eprojectId\u003c/code\u003e needs to be provided and the currently logged in user should be given permissions to trigger new builds."
    },
    "HelmConventionConfig": {
      "description": "image config in the syntax of image.repository and image.tag.",
      "x-intellij-html-description": "image config in the syntax of image.repository and image.tag."
    },
    "HelmDeploy": {
      "required": [
        "releases"
      ],
      "properties": {
        "flags": {
          "$ref": "#/definitions/HelmDeployFlags",
          "description": "additional option flags that are passed on the command line to `helm`.",
          "x-intellij-html-description": "additional option flags that are passed on the command line to \u003ccode\u003ehelm\u003c/code\u003e."
        },
        "releases": {
          "items": {
            "$ref": "#/definitions/HelmRelease"
          },
          "type": "array",
          "description": "a list of Helm releases.",
          "x-intellij-html-description": "a list of Helm releases."
        }
      },
      "preferredOrder": [
        "releases",
        "flags"
      ],
      "additionalProperties": false,
      "description": "*beta* uses the `helm` CLI to apply the charts to the cluster.",
      "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e uses the \u003ccode\u003ehelm\u003c/code\u003e CLI to apply the charts to the cluster."
    },
    "HelmDeployFlags": {
      "properties": {
        "global": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "additional flags passed on every command.",
          "x-intellij-html-description": "additional flags passed on every command.",
          "default": "[]"
        },
        "install": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "additional flags passed to (`helm install`).",
          "x-intellij-html-description": "additional flags passed to (\u003ccode\u003ehelm install\u003c/code\u003e).",
          "default": "[]"
        },
        "upgrade": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "additional flags passed to (`helm upgrade`).",
          "x-intellij-html-description": "additional flags passed to (\u003ccode\u003ehelm upgrade\u003c/code\u003e).",
          "default": "[]"
        }
      },
      "preferredOrder": [
        "global",
        "install",
        "upgrade"
      ],
      "additionalProperties": false,
      "description": "additional option flags that are passed on the command line to `helm`.",
      "x-intellij-html-description": "additional option flags that are passed on the command line to \u003ccode\u003ehelm\u003c/code\u003e."
    },
    "HelmFQNConfig": {
      "properties": {
        "property": {
          "type": "string",
          "description": "defines the image config.",
          "x-intellij-html-description": "defines the image config."
        }
      },
      "preferredOrder": [
        "property"
      ],
      "additionalProperties": false,
      "description": "image config to use the FullyQualifiedImageName as param to set.",
      "x-intellij-html-description": "image config to use the FullyQualifiedImageName as param to set."
    },
    "HelmImageStrategy": {
      "anyOf": [
        {
          "additionalProperties": false
        },
        {
          "properties": {
            "fqn": {
              "$ref": "#/definitions/HelmFQNConfig",
              "description": "image configuration uses the syntax `IMAGE-NAME\u003dIMAGE-REPOSITORY:IMAGE-TAG`.",
              "x-intellij-html-description": "image configuration uses the syntax \u003ccode\u003eIMAGE-NAME\u003dIMAGE-REPOSITORY:IMAGE-TAG\u003c/code\u003e."
            }
          },
          "preferredOrder": [
            "fqn"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "helm": {
              "$ref": "#/definitions/HelmConventionConfig",
              "description": "image configuration uses the syntax `IMAGE-NAME.repository\u003dIMAGE-REPOSITORY, IMAGE-NAME.tag\u003dIMAGE-TAG`.",
              "x-intellij-html-description": "image configuration uses the syntax \u003ccode\u003eIMAGE-NAME.repository\u003dIMAGE-REPOSITORY, IMAGE-NAME.tag\u003dIMAGE-TAG\u003c/code\u003e."
            }
          },
          "preferredOrder": [
            "helm"
          ],
          "additionalProperties": false
        }
      ],
      "description": "adds image configurations to the Helm `values` file.",
      "x-intellij-html-description": "adds image configurations to the Helm \u003ccode\u003evalues\u003c/code\u003e file."
    },
    "HelmPackaged": {
      "properties": {
        "appVersion": {
          "type": "string",
          "description": "sets the `appVersion` on the chart to this version.",
          "x-intellij-html-description": "sets the \u003ccode\u003eappVersion\u003c/code\u003e on the chart to this version."
        },
        "version": {
          "type": "string",
          "description": "sets the `version` on the chart to this semver version.",
          "x-intellij-html-description": "sets the \u003ccode\u003eversion\u003c/code\u003e on the chart to this semver version."
        }
      },
      "preferredOrder": [
        "version",
        "appVersion"
      ],
      "additionalProperties": false,
      "description": "parameters for packaging helm chart (`helm package`).",
      "x-intellij-html-description": "parameters for packaging helm chart (\u003ccode\u003ehelm package\u003c/code\u003e)."
    },
    "HelmRelease": {
      "required": [
        "name",
        "chartPath"
      ],
      "properties": {
        "chartPath": {
          "type": "string",
          "description": "path to the Helm chart.",
          "x-intellij-html-description": "path to the Helm chart."
        },
        "imageStrategy": {
          "$ref": "#/definitions/HelmImageStrategy",
          "description": "adds image configurations to the Helm `values` file.",
          "x-intellij-html-description": "adds image configurations to the Helm \u003ccode\u003evalues\u003c/code\u003e file."
        },
        "name": {
          "type": "string",
          "description": "name of the Helm release.",
          "x-intellij-html-description": "name of the Helm release."
        },
        "namespace": {
          "type": "string",
          "description": "Kubernetes namespace.",
          "x-intellij-html-description": "Kubernetes namespace."
        },
        "overrides": {
          "description": "key-value pairs. If present, Skaffold will build a Helm `values` file that overrides the original and use it to call Helm CLI (`--f` flag).",
          "x-intellij-html-description": "key-value pairs. If present, Skaffold will build a Helm \u003ccode\u003evalues\u003c/code\u003e file that overrides the original and use it to call Helm CLI (\u003ccode\u003e--f\u003c/code\u003e flag)."
        },
        "packaged": {
          "$ref": "#/definitions/HelmPackaged",
          "description": "parameters for packaging helm chart (`helm package`).",
          "x-intellij-html-description": "parameters for packaging helm chart (\u003ccode\u003ehelm package\u003c/code\u003e)."
        },
        "recreatePods": {
          "type": "boolean",
          "description": "if `true`, Skaffold will send `--recreate-pods` flag to Helm CLI.",
          "x-intellij-html-description": "if \u003ccode\u003etrue\u003c/code\u003e, Skaffold will send \u003ccode\u003e--recreate-pods\u003c/code\u003e flag to Helm CLI.",
          "default": "false"
        },
        "setValueTemplates": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "key-value pairs. If present, Skaffold will try to parse the value part of each key-value pair using environment variables in the system, then send `--set` flag to Helm CLI and append all parsed pairs after the flag.",
          "x-intellij-html-description": "key-value pairs. If present, Skaffold will try to parse the value part of each key-value pair using environment variables in the system, then send \u003ccode\u003e--set\u003c/code\u003e flag to Helm CLI and append all parsed pairs after the flag.",
          "default": "{}"
        },
        "setValues": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "key-value pairs. If present, Skaffold will send `--set` flag to Helm CLI and append all pairs after the flag.",
          "x-intellij-html-description": "key-value pairs. If present, Skaffold will send \u003ccode\u003e--set\u003c/code\u003e flag to Helm CLI and append all pairs after the flag.",
          "default": "{}"
        },
        "skipBuildDependencies": {
          "type": "boolean",
          "description": "should build dependencies be skipped.",
          "x-intellij-html-description": "should build dependencies be skipped.",
          "default": "false"
        },
        "useHelmSecrets": {
          "type": "boolean",
          "description": "instructs skaffold to use secrets plugin on deployment.",
          "x-intellij-html-description": "instructs skaffold to use secrets plugin on deployment.",
          "default": "false"
        },
        "values": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "key-value pairs supplementing the Helm `values` file.",
          "x-intellij-html-description": "key-value pairs supplementing the Helm \u003ccode\u003evalues\u003c/code\u003e file.",
          "default": "{}"
        },
        "valuesFiles": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "paths to the Helm `values` files.",
          "x-intellij-html-description": "paths to the Helm \u003ccode\u003evalues\u003c/code\u003e files.",
          "default": "[]"
        },
        "version": {
          "type": "string",
          "description": "version of the chart.",
          "x-intellij-html-description": "version of the chart."
        },
        "wait": {
          "type": "boolean",
          "description": "if `true`, Skaffold will send `--wait` flag to Helm CLI.",
          "x-intellij-html-description": "if \u003ccode\u003etrue\u003c/code\u003e, Skaffold will send \u003ccode\u003e--wait\u003c/code\u003e flag to Helm CLI.",
          "default": "false"
        }
      },
      "preferredOrder": [
        "name",
        "chartPath",
        "valuesFiles",
        "values",
        "namespace",
        "version",
        "setValues",
        "setValueTemplates",
        "wait",
        "recreatePods",
        "skipBuildDependencies",
        "useHelmSecrets",
        "overrides",
        "packaged",
        "imageStrategy"
      ],
      "additionalProperties": false,
      "description": "describes a helm release to be deployed.",
      "x-intellij-html-description": "describes a helm release to be deployed."
    },
    "JSONPatch": {
      "required": [
        "path"
      ],
      "properties": {
        "from": {
          "type": "string",
          "description": "source position in the yaml, used for `copy` or `move` operations.",
          "x-intellij-html-description": "source position in the yaml, used for \u003ccode\u003ecopy\u003c/code\u003e or \u003ccode\u003emove\u003c/code\u003e operations."
        },
        "op": {
          "type": "string",
          "description": "operation carried by the patch: `add`, `remove`, `replace`, `move`, `copy` or `test`.",
          "x-intellij-html-description": "operation carried by the patch: \u003ccode\u003eadd\u003c/code\u003e, \u003ccode\u003eremove\u003c/code\u003e, \u003ccode\u003ereplace\u003c/code\u003e, \u003ccode\u003emove\u003c/code\u003e, \u003ccode\u003ecopy\u003c/code\u003e or \u003ccode\u003etest\u003c/code\u003e.",
          "default": "replace"
        },
        "path": {
          "type": "string",
          "description": "position in the yaml where the operation takes place. For example, this targets the `dockerfile` of the first artifact built.",
          "x-intellij-html-description": "position in the yaml where the operation takes place. For example, this targets the \u003ccode\u003edockerfile\u003c/code\u003e of the first artifact built.",
          "examples": [
            "/build/artifacts/0/docker/dockerfile"
          ]
        },
        "value": {
          "description": "value to apply. Can be any portion of yaml.",
          "x-intellij-html-description": "value to apply. Can be any portion of yaml."
        }
      },
      "preferredOrder": [
        "op",
        "path",
        "from",
        "value"
      ],
      "additionalProperties": false,
      "description": "patch to be applied by a profile.",
      "x-intellij-html-description": "patch to be applied by a profile."
    },
    "JibGradleArtifact": {
      "properties": {
        "args": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "additional build flags passed to Gradle.",
          "x-intellij-html-description": "additional build flags passed to Gradle.",
          "default": "[]",
          "examples": [
            "[\"--no-build-cache\"]"
          ]
        },
        "project": {
          "type": "string",
          "description": "selects which Gradle project to build.",
          "x-intellij-html-description": "selects which Gradle project to build."
        }
      },
      "preferredOrder": [
        "project",
        "args"
      ],
      "additionalProperties": false,
      "description": "*alpha* builds images using the [Jib plugin for Gradle](https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin).",
      "x-intellij-html-description": "\u003cem\u003ealpha\u003c/em\u003e builds images using the \u003ca href\u003d\"https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin\"\u003eJib plugin for Gradle\u003c/a\u003e."
    },
    "JibMavenArtifact": {
      "properties": {
        "args": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "additional build flags passed to Maven.",
          "x-intellij-html-description": "additional build flags passed to Maven.",
          "default": "[]",
          "examples": [
            "[\"-x\", \"-DskipTests\"]"
          ]
        },
        "module": {
          "type": "string",
          "description": "selects which Maven module to build, for a multi module project.",
          "x-intellij-html-description": "selects which Maven module to build, for a multi module project."
        },
        "profile": {
          "type": "string",
          "description": "selects which Maven profile to activate.",
          "x-intellij-html-description": "selects which Maven profile to activate."
        }
      },
      "preferredOrder": [
        "module",
        "profile",
        "args"
      ],
      "additionalProperties": false,
      "description": "*alpha* builds images using the [Jib plugin for Maven](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin).",
      "x-intellij-html-description": "\u003cem\u003ealpha\u003c/em\u003e builds images using the \u003ca href\u003d\"https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin\"\u003eJib plugin for Maven\u003c/a\u003e."
    },
    "KanikoArtifact": {
      "properties": {
        "buildArgs": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "arguments passed to the docker build.",
          "x-intellij-html-description": "arguments passed to the docker build.",
          "default": "{}",
          "examples": [
            "{\"key1\": \"value1\", \"key2\": \"value2\"}"
          ]
        },
        "buildContext": {
          "$ref": "#/definitions/KanikoBuildContext",
          "description": "where the build context for this artifact resides.",
          "x-intellij-html-description": "where the build context for this artifact resides."
        },
        "cache": {
          "$ref": "#/definitions/KanikoCache",
          "description": "configures Kaniko caching. If a cache is specified, Kaniko will use a remote cache which will speed up builds.",
          "x-intellij-html-description": "configures Kaniko caching. If a cache is specified, Kaniko will use a remote cache which will speed up builds."
        },
        "dockerfile": {
          "type": "string",
          "description": "locates the Dockerfile relative to workspace.",
          "x-intellij-html-description": "locates the Dockerfile relative to workspace.",
          "default": "Dockerfile"
        },
        "flags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "additional flags to be passed to Kaniko command line. See [Kaniko Additional Flags](https://github.com/GoogleContainerTools/kaniko#additional-flags). Deprecated - instead the named, unique fields should be used, e.g. `buildArgs`, `cache`, `target`.",
          "x-intellij-html-description": "additional flags to be passed to Kaniko command line. See \u003ca href\u003d\"https://github.com/GoogleContainerTools/kaniko#additional-flags\"\u003eKaniko Additional Flags\u003c/a\u003e. Deprecated - instead the named, unique fields should be used, e.g. \u003ccode\u003ebuildArgs\u003c/code\u003e, \u003ccode\u003ecache\u003c/code\u003e, \u003ccode\u003etarget\u003c/code\u003e.",
          "default": "[]"
        },
        "image": {
          "type": "string",
          "description": "Docker image used by the Kaniko pod. Defaults to the latest released version of `gcr.io/kaniko-project/executor`.",
          "x-intellij-html-description": "Docker image used by the Kaniko pod. Defaults to the latest released version of \u003ccode\u003egcr.io/kaniko-project/executor\u003c/code\u003e."
        },
        "target": {
          "type": "string",
          "description": "Dockerfile target name to build.",
          "x-intellij-html-description": "Dockerfile target name to build."
        }
      },
      "preferredOrder": [
        "flags",
        "dockerfile",
        "target",
        "buildArgs",
        "buildContext",
        "image",
        "cache"
      ],
      "additionalProperties": false,
      "description": "*alpha* describes an artifact built from a Dockerfile, with kaniko.",
      "x-intellij-html-description": "\u003cem\u003ealpha\u003c/em\u003e describes an artifact built from a Dockerfile, with kaniko."
    },
    "KanikoBuildContext": {
      "properties": {
        "gcsBucket": {
          "type": "string",
          "description": "CGS bucket to which sources are uploaded. Kaniko will need access to that bucket to download the sources.",
          "x-intellij-html-description": "CGS bucket to which sources are uploaded. Kaniko will need access to that bucket to download the sources."
        },
        "localDir": {
          "$ref": "#/definitions/LocalDir",
          "description": "configures how Kaniko mounts sources directly via an `emptyDir` volume.",
          "x-intellij-html-description": "configures how Kaniko mounts sources directly via an \u003ccode\u003eemptyDir\u003c/code\u003e volume."
        }
      },
      "preferredOrder": [
        "gcsBucket",
        "localDir"
      ],
      "additionalProperties": false,
      "description": "contains the different fields available to specify a Kaniko build context.",
      "x-intellij-html-description": "contains the different fields available to specify a Kaniko build context."
    },
    "KanikoCache": {
      "properties": {
        "repo": {
          "type": "string",
          "description": "a remote repository to store cached layers. If none is specified, one will be inferred from the image name. See [Kaniko Caching](https://github.com/GoogleContainerTools/kaniko#caching).",
          "x-intellij-html-description": "a remote repository to store cached layers. If none is specified, one will be inferred from the image name. See \u003ca href\u003d\"https://github.com/GoogleContainerTools/kaniko#caching\"\u003eKaniko Caching\u003c/a\u003e."
        }
      },
      "preferredOrder": [
        "repo"
      ],
      "additionalProperties": false,
      "description": "configures Kaniko caching. If a cache is specified, Kaniko will use a remote cache which will speed up builds.",
      "x-intellij-html-description": "configures Kaniko caching. If a cache is specified, Kaniko will use a remote cache which will speed up builds."
    },
    "KubectlDeploy": {
      "properties": {
        "flags": {
          "$ref": "#/definitions/KubectlFlags",
          "description": "additional flags passed to `kubectl`.",
          "x-intellij-html-description": "additional flags passed to \u003ccode\u003ekubectl\u003c/code\u003e."
        },
        "manifests": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "the Kubernetes yaml or json manifests.",
          "x-intellij-html-description": "the Kubernetes yaml or json manifests.",
          "default": "[\"k8s/*.yaml\"]"
        },
        "remoteManifests": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Kubernetes manifests in remote clusters.",
          "x-intellij-html-description": "Kubernetes manifests in remote clusters.",
          "default": "[]"
        }
      },
      "preferredOrder": [
        "manifests",
        "remoteManifests",
        "flags"
      ],
      "additionalProperties": false,
      "description": "*beta* uses a client side `kubectl apply` to deploy manifests. You\u0027ll need a `kubectl` CLI version installed that\u0027s compatible with your cluster.",
      "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e uses a client side \u003ccode\u003ekubectl apply\u003c/code\u003e to deploy manifests. You\u0027ll need a \u003ccode\u003ekubectl\u003c/code\u003e CLI version installed that\u0027s compatible with your cluster."
    },
    "KubectlFlags": {
      "properties": {
        "apply": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "additional flags passed on creations (`kubectl apply`).",
          "x-intellij-html-description": "additional flags passed on creations (\u003ccode\u003ekubectl apply\u003c/code\u003e).",
          "default": "[]"
        },
        "delete": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "additional flags passed on deletions (`kubectl delete`).",
          "x-intellij-html-description": "additional flags passed on deletions (\u003ccode\u003ekubectl delete\u003c/code\u003e).",
          "default": "[]"
        },
        "global": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "additional flags passed on every command.",
          "x-intellij-html-description": "additional flags passed on every command.",
          "default": "[]"
        }
      },
      "preferredOrder": [
        "global",
        "apply",
        "delete"
      ],
      "additionalProperties": false,
      "description": "additional flags passed on the command line to kubectl either on every command (Global), on creations (Apply) or deletions (Delete).",
      "x-intellij-html-description": "additional flags passed on the command line to kubectl either on every command (Global), on creations (Apply) or deletions (Delete)."
    },
    "KustomizeDeploy": {
      "properties": {
        "flags": {
          "$ref": "#/definitions/KubectlFlags",
          "description": "additional flags passed to `kubectl`.",
          "x-intellij-html-description": "additional flags passed to \u003ccode\u003ekubectl\u003c/code\u003e."
        },
        "path": {
          "type": "string",
          "description": "path to Kustomization files.",
          "x-intellij-html-description": "path to Kustomization files.",
          "default": "."
        }
      },
      "preferredOrder": [
        "path",
        "flags"
      ],
      "additionalProperties": false,
      "description": "*beta* uses the `kustomize` CLI to \"patch\" a deployment for a target environment.",
      "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e uses the \u003ccode\u003ekustomize\u003c/code\u003e CLI to \u0026quot;patch\u0026quot; a deployment for a target environment."
    },
    "LocalBuild": {
      "properties": {
        "push": {
          "type": "boolean",
          "description": "should images be pushed to a registry. If not specified, images are pushed only if the current Kubernetes context connects to a remote cluster.",
          "x-intellij-html-description": "should images be pushed to a registry. If not specified, images are pushed only if the current Kubernetes context connects to a remote cluster."
        },
        "useBuildkit": {
          "type": "boolean",
          "description": "use BuildKit to build Docker images.",
          "x-intellij-html-description": "use BuildKit to build Docker images.",
          "default": "false"
        },
        "useDockerCLI": {
          "type": "boolean",
          "description": "use `docker` command-line interface instead of Docker Engine APIs.",
          "x-intellij-html-description": "use \u003ccode\u003edocker\u003c/code\u003e command-line interface instead of Docker Engine APIs.",
          "default": "false"
        }
      },
      "preferredOrder": [
        "push",
        "useDockerCLI",
        "useBuildkit"
      ],
      "additionalProperties": false,
      "description": "*beta* describes how to do a build on the local docker daemon and optionally push to a repository.",
      "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e describes how to do a build on the local docker daemon and optionally push to a repository."
    },
    "LocalDir": {
      "properties": {
        "initImage": {
          "type": "string",
          "description": "image used to run init container which mounts kaniko context.",
          "x-intellij-html-description": "image used to run init container which mounts kaniko context."
        }
      },
      "preferredOrder": [
        "initImage"
      ],
      "additionalProperties": false,
      "description": "configures how Kaniko mounts sources directly via an `emptyDir` volume.",
      "x-intellij-html-description": "configures how Kaniko mounts sources directly via an \u003ccode\u003eemptyDir\u003c/code\u003e volume."
    },
    "Profile": {
      "required": [
        "name"
      ],
      "properties": {
        "activation": {
          "items": {
            "$ref": "#/definitions/Activation"
          },
          "type": "array",
          "description": "criteria by which a profile can be auto-activated. The profile is auto-activated if any one of the activations are triggered. An activation is triggered if all of the criteria (env, kubeContext, command) are triggered.",
          "x-intellij-html-description": "criteria by which a profile can be auto-activated. The profile is auto-activated if any one of the activations are triggered. An activation is triggered if all of the criteria (env, kubeContext, command) are triggered."
        },
        "build": {
          "$ref": "#/definitions/BuildConfig",
          "description": "replaces the main `build` configuration.",
          "x-intellij-html-description": "replaces the main \u003ccode\u003ebuild\u003c/code\u003e configuration."
        },
        "deploy": {
          "$ref": "#/definitions/DeployConfig",
          "description": "replaces the main `deploy` configuration.",
          "x-intellij-html-description": "replaces the main \u003ccode\u003edeploy\u003c/code\u003e configuration."
        },
        "name": {
          "type": "string",
          "description": "a unique profile name.",
          "x-intellij-html-description": "a unique profile name.",
          "examples": [
            "profile-prod"
          ]
        },
        "patches": {
          "items": {
            "$ref": "#/definitions/JSONPatch"
          },
          "type": "array",
          "description": "patches applied to the configuration. Patches use the JSON patch notation.",
          "x-intellij-html-description": "patches applied to the configuration. Patches use the JSON patch notation."
        },
        "test": {
          "items": {
            "$ref": "#/definitions/TestCase"
          },
          "type": "array",
          "description": "replaces the main `test` configuration.",
          "x-intellij-html-description": "replaces the main \u003ccode\u003etest\u003c/code\u003e configuration."
        }
      },
      "preferredOrder": [
        "name",
        "build",
        "test",
        "deploy",
        "patches",
        "activation"
      ],
      "additionalProperties": false,
      "description": "*beta* profiles are used to override any `build`, `test` or `deploy` configuration.",
      "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e profiles are used to override any \u003ccode\u003ebuild\u003c/code\u003e, \u003ccode\u003etest\u003c/code\u003e or \u003ccode\u003edeploy\u003c/code\u003e configuration."
    },
    "ShaTagger": {
      "description": "*beta* tags images with their sha256 digest.",
      "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e tags images with their sha256 digest."
    },
    "SkaffoldConfig": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "version of the configuration.",
          "x-intellij-html-description": "version of the configuration."
        },
        "build": {
          "$ref": "#/definitions/BuildConfig",
          "description": "describes how images are built.",
          "x-intellij-html-description": "describes how images are built."
        },
        "deploy": {
          "$ref": "#/definitions/DeployConfig",
          "description": "describes how images are deployed.",
          "x-intellij-html-description": "describes how images are deployed."
        },
        "kind": {
          "type": "string",
          "description": "always `Config`.",
          "x-intellij-html-description": "always \u003ccode\u003eConfig\u003c/code\u003e.",
          "default": "Config"
        },
        "profiles": {
          "items": {
            "$ref": "#/definitions/Profile"
          },
          "type": "array",
          "description": "*beta* can override be used to `build`, `test` or `deploy` configuration.",
          "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e can override be used to \u003ccode\u003ebuild\u003c/code\u003e, \u003ccode\u003etest\u003c/code\u003e or \u003ccode\u003edeploy\u003c/code\u003e configuration."
        },
        "test": {
          "items": {
            "$ref": "#/definitions/TestCase"
          },
          "type": "array",
          "description": "describes how images are tested.",
          "x-intellij-html-description": "describes how images are tested."
        }
      },
      "preferredOrder": [
        "apiVersion",
        "kind",
        "build",
        "test",
        "deploy",
        "profiles"
      ],
      "additionalProperties": false,
      "description": "describes a Skaffold pipeline.",
      "x-intellij-html-description": "describes a Skaffold pipeline."
    },
    "TagPolicy": {
      "properties": {
        "dateTime": {
          "$ref": "#/definitions/DateTimeTagger",
          "description": "*beta* tags images with the build timestamp.",
          "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e tags images with the build timestamp."
        },
        "envTemplate": {
          "$ref": "#/definitions/EnvTemplateTagger",
          "description": "*beta* tags images with a configurable template string.",
          "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e tags images with a configurable template string."
        },
        "gitCommit": {
          "$ref": "#/definitions/GitTagger",
          "description": "*beta* tags images with the git tag or commit of the artifact\u0027s workspace.",
          "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e tags images with the git tag or commit of the artifact\u0027s workspace."
        },
        "sha256": {
          "$ref": "#/definitions/ShaTagger",
          "description": "*beta* tags images with their sha256 digest.",
          "x-intellij-html-description": "\u003cem\u003ebeta\u003c/em\u003e tags images with their sha256 digest."
        }
      },
      "preferredOrder": [
        "gitCommit",
        "sha256",
        "envTemplate",
        "dateTime"
      ],
      "additionalProperties": false,
      "description": "contains all the configuration for the tagging step.",
      "x-intellij-html-description": "contains all the configuration for the tagging step."
    },
    "TestCase": {
      "required": [
        "image"
      ],
      "properties": {
        "image": {
          "type": "string",
          "description": "artifact on which to run those tests.",
          "x-intellij-html-description": "artifact on which to run those tests.",
          "examples": [
            "gcr.io/k8s-skaffold/example"
          ]
        },
        "structureTests": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "the [Container Structure Tests](https://github.com/GoogleContainerTools/container-structure-test) to run on that artifact.",
          "x-intellij-html-description": "the \u003ca href\u003d\"https://github.com/GoogleContainerTools/container-structure-test\"\u003eContainer Structure Tests\u003c/a\u003e to run on that artifact.",
          "default": "[]",
          "examples": [
            "[\"./test/*\"]"
          ]
        }
      },
      "preferredOrder": [
        "image",
        "structureTests"
      ],
      "additionalProperties": false,
      "description": "a list of structure tests to run on images that Skaffold builds.",
      "x-intellij-html-description": "a list of structure tests to run on images that Skaffold builds."
    }
  }
}