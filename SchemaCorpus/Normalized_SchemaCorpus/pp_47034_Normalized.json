{
  "id": "https://github.com/ibm-watson-iot/blockchain-samples/contracts/platform/iotcontractplatform/schema/IOTCPschema.json",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "description": "Watson IoT Hyperledger Smart Contract Platform Schema",
  "definitions": {
    "API": {
      "initContract": {
        "type": "object",
        "description": "Sets contract version and nickname",
        "properties": {
          "method": "deploy",
          "function": {
            "type": "string",
            "enum": [
              "initContract"
            ]
          },
          "args": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "version": {
                  "$ref": "#/definitions/definitions_Model_version"
                },
                "nickname": {
                  "$ref": "#/definitions/definitions_Model_nickname"
                }
              }
            },
            "minItems": 1,
            "maxItems": 1
          }
        }
      },
      "createAsset": {
        "type": "object",
        "description": "Creates a new asset by class",
        "properties": {
          "method": "invoke",
          "function": {
            "type": "string",
            "enum": [
              "createAsset"
            ]
          },
          "args": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "asset": {
                  "$ref": "#/definitions/definitions_Model_asset"
                }
              }
            },
            "minItems": 1,
            "maxItems": 1
          }
        }
      },
      "replaceAsset": {
        "type": "object",
        "description": "Replaces an asset\u0027s state (e.g. put existing)",
        "properties": {
          "method": "invoke",
          "function": {
            "type": "string",
            "enum": [
              "replaceAsset"
            ]
          },
          "args": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "asset": {
                  "$ref": "#/definitions/definitions_Model_asset"
                }
              }
            },
            "minItems": 1,
            "maxItems": 1
          }
        }
      },
      "updateAsset": {
        "type": "object",
        "description": "Update an asset\u0027s state with one or more property changes",
        "properties": {
          "method": "invoke",
          "function": {
            "type": "string",
            "enum": [
              "updateAsset"
            ]
          },
          "args": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "asset": {
                  "$ref": "#/definitions/definitions_Model_asset"
                }
              }
            },
            "minItems": 1,
            "maxItems": 1
          }
        }
      },
      "deleteAsset": {
        "type": "object",
        "description": "Delete an asset from world state, transactions remain on the blockchain",
        "properties": {
          "method": "invoke",
          "function": {
            "type": "string",
            "enum": [
              "deleteAsset"
            ]
          },
          "args": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "$ref": "#/definitions/definitions_Model_assetKey"
              }
            },
            "minItems": 1,
            "maxItems": 1
          }
        }
      },
      "deleteAssetStateHistory": {
        "type": "object",
        "description": "Delete an asset\u0027s history from world state, transactions remain on the blockchain",
        "properties": {
          "method": "invoke",
          "function": {
            "type": "string",
            "enum": [
              "deleteAssetStateHistory"
            ]
          },
          "args": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "$ref": "#/definitions/definitions_Model_assetKey"
              }
            },
            "minItems": 1,
            "maxItems": 1
          }
        }
      },
      "deletePropertiesFromAsset": {
        "type": "object",
        "description": "Delete one or more properties from an asset\u0027s state",
        "properties": {
          "method": "invoke",
          "function": {
            "type": "string",
            "enum": [
              "deletePropertiesFromAsset"
            ]
          },
          "args": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "$ref": "#/definitions/definitions_Model_assetKey",
                "qprops": {
                  "type": "array",
                  "description": "Qualified property names such as common.location",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "minItems": 1,
            "maxItems": 1
          }
        }
      },
      "deleteAllAssets": {
        "type": "object",
        "description": "Delete all assets from world state, supports filters",
        "properties": {
          "method": "invoke",
          "function": {
            "type": "string",
            "enum": [
              "deleteAllAssets"
            ]
          },
          "args": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "filter": {
                  "$ref": "#/definitions/definitions_Model_stateFilter"
                }
              }
            },
            "minItems": 0,
            "maxItems": 1
          }
        }
      },
      "readAsset": {
        "type": "object",
        "description": "Returns the state an asset",
        "properties": {
          "method": "query",
          "function": {
            "type": "string",
            "enum": [
              "readAsset"
            ]
          },
          "args": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "$ref": "#/definitions/definitions_Model_assetKey"
              }
            },
            "minItems": 1,
            "maxItems": 1
          },
          "result": {
            "$ref": "#/definitions/definitions_Model_assetstate"
          }
        }
      },
      "readAllAssets": {
        "type": "object",
        "description": "Returns the state of all assets, supports filters",
        "properties": {
          "method": "query",
          "function": {
            "type": "string",
            "enum": [
              "readAllAssets"
            ]
          },
          "args": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "filter": {
                  "$ref": "#/definitions/definitions_Model_stateFilter"
                }
              }
            },
            "minItems": 0,
            "maxItems": 1
          },
          "result": {
            "$ref": "#/definitions/definitions_Model_assetstatearray"
          }
        }
      },
      "readAssetStateHistory": {
        "type": "object",
        "description": "Returns history for an asset",
        "properties": {
          "method": "query",
          "function": {
            "type": "string",
            "enum": [
              "readAssetStateHistory"
            ]
          },
          "args": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "$ref": "#/definitions/definitions_Model_assetKey",
                "daterange": {
                  "$ref": "#/definitions/definitions_Model_dateRange"
                },
                "filter": {
                  "$ref": "#/definitions/definitions_Model_stateFilter"
                }
              }
            },
            "minItems": 1,
            "maxItems": 1
          },
          "result": {
            "$ref": "#/definitions/definitions_Model_assetstatearray"
          }
        }
      },
      "readAssetSchemas": {
        "type": "object",
        "description": "Returns the API for this contract for the use of self-configuring applications; is MANDATORY for integration with the Watson IoT Platform",
        "properties": {
          "method": "query",
          "function": {
            "type": "string",
            "enum": [
              "readAssetSchemas"
            ]
          },
          "args": {
            "type": "array",
            "items": {},
            "minItems": 0,
            "maxItems": 0
          },
          "result": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "readAssetSamples": {
        "type": "object",
        "description": "Returns samples of selected contract objects",
        "properties": {
          "method": "query",
          "function": {
            "type": "string",
            "enum": [
              "readAssetSamples"
            ]
          },
          "args": {
            "type": "array",
            "items": {},
            "minItems": 0,
            "maxItems": 0
          },
          "result": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "readRecentStates": {
        "type": "object",
        "description": "Returns the state of recently updated assets",
        "properties": {
          "method": "query",
          "function": {
            "type": "string",
            "enum": [
              "readRecentStates"
            ]
          },
          "args": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "begin": {
                  "type": "integer",
                  "description": "zero based beginning of range"
                },
                "end": {
                  "type": "integer",
                  "description": "zero based end of range, absence means to end"
                }
              }
            },
            "minItems": 0,
            "maxItems": 0
          },
          "result": {
            "$ref": "#/definitions/definitions_Model_assetstatearray"
          }
        }
      },
      "readAllRoutes": {
        "type": "object",
        "description": "Returns an array of registered API calls by function (debugging)",
        "properties": {
          "method": "query",
          "function": {
            "type": "string",
            "enum": [
              "readAllRoutes"
            ]
          },
          "args": {
            "type": "array",
            "items": {},
            "minItems": 0,
            "maxItems": 0
          },
          "result": {
            "$ref": "#/definitions/definitions_Model_routeArray"
          }
        }
      },
      "readAllRules": {
        "type": "object",
        "description": "Returns an array of registered rules by class (debugging)",
        "properties": {
          "method": "query",
          "function": {
            "type": "string",
            "enum": [
              "readAllRules"
            ]
          },
          "args": {
            "type": "array",
            "items": {},
            "minItems": 0,
            "maxItems": 0
          },
          "result": {
            "$ref": "#/definitions/definitions_Model_ruleArray"
          }
        }
      },
      "readContractState": {
        "type": "object",
        "description": "Returns this contract instance\u0027s version and nickname",
        "properties": {
          "method": "query",
          "function": {
            "type": "string",
            "enum": [
              "readContractState"
            ]
          },
          "args": {
            "type": "array",
            "items": {},
            "minItems": 0,
            "maxItems": 0
          },
          "result": {
            "$ref": "#/definitions/definitions_Model_contractState"
          }
        }
      },
      "setLoggingLevel": {
        "type": "object",
        "description": "Sets the logging level for the contract",
        "properties": {
          "method": "invoke",
          "function": {
            "type": "string",
            "enum": [
              "setLoggingLevel"
            ]
          },
          "args": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "logLevel": {
                  "type": "string",
                  "enum": [
                    "CRITICAL",
                    "ERROR",
                    "WARNING",
                    "NOTICE",
                    "INFO",
                    "DEBUG"
                  ]
                }
              }
            },
            "minItems": 1,
            "maxItems": 1
          }
        }
      },
      "setCreateOnFirstUpdate": {
        "type": "object",
        "description": "Allow updateAsset to create an asset upon receipt of its first event",
        "properties": {
          "method": "invoke",
          "function": {
            "type": "string",
            "enum": [
              "setCreateOnFirstUpdate"
            ]
          },
          "args": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "setCreateOnFirstUpdate": {
                  "type": "boolean",
                  "description": "Allows updates to create missing assets on first event"
                }
              }
            },
            "minItems": 1,
            "maxItems": 1
          }
        }
      },
      "readWorldState": {
        "type": "object",
        "description": "Returns the entire contents of world state",
        "properties": {
          "method": "query",
          "function": {
            "type": "string",
            "enum": [
              "readWorldState"
            ]
          },
          "args": {
            "type": "array",
            "items": {},
            "minItems": 0,
            "maxItems": 0
          },
          "result": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "deleteWorldState": {
        "type": "object",
        "description": "**** WARNING *** Clears the entire contents of world state, redeploy the contract after using this, in debugging mode, will require a restart",
        "properties": {
          "method": "invoke",
          "function": {
            "type": "string",
            "enum": [
              "deleteWorldState"
            ]
          },
          "args": {
            "type": "array",
            "items": {},
            "minItems": 0,
            "maxItems": 0
          }
        }
      }
    },
    "Model": {
      "version": {
        "type": "string",
        "description": "The version number of the current contract instance"
      },
      "nickname": {
        "type": "string",
        "default": "IOT Contract Platform",
        "description": "The nickname of the current contract instance"
      },
      "assetID": {
        "type": "string",
        "description": "An asset\u0027s unique ID, e.g. barcode, VIN, etc."
      },
      "assetKey": {
        "asset": {
          "type": "object",
          "properties": {
            "assetID": {
              "$ref": "#/definitions/definitions_Model_assetID"
            }
          }
        }
      },
      "alertName": {
        "type": "string",
        "description": "An alert name"
      },
      "alertNameArray": {
        "type": "array",
        "description": "An array of alert names",
        "items": {
          "$ref": "#/definitions/definitions_Model_alertName"
        }
      },
      "geo": {
        "description": "A geographical coordinate",
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          }
        }
      },
      "assetClass": {
        "type": "object",
        "description": "An asset\u0027s classifier definition",
        "properties": {
          "name": "An asset\u0027s class name",
          "prefix": "An asset\u0027s world state prefix, used to allow iteration over all assets of a class",
          "assetidpath": "An asset\u0027s primary key, expressed as a qualified property path (see example contracts)"
        }
      },
      "asset": {
        "type": "object",
        "description": "The changeable properties for an asset, also considered its \u0027event\u0027 as a partial state",
        "properties": {
          "common": {
            "$ref": "#/definitions/definitions_Model_ioteventcommon"
          },
          "assetID": {
            "$ref": "#/definitions/definitions_Model_assetID"
          },
          "temperature": {
            "type": "number",
            "description": "Temperature of an asset\u0027s contents in degrees Celsuis"
          },
          "carrier": {
            "type": "string",
            "description": "The carrier in possession of this asset"
          }
        },
        "required": [
          "assetID"
        ]
      },
      "eventIOTContractPlatformInvokeResult": {
        "type": "object",
        "description": "A chaincode event defining the standard platform-generated result event for a contract invoke, contains an array of contributed results",
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "EVT.IOTCP.INVOKE.RESULT"
            ],
            "default": "EVT.IOTCP.INVOKE.RESULT"
          },
          "payload": {
            "type": "object",
            "description": "A map of contributed results",
            "properties": {
              "$ref": "#/definitions/definitions_Model_eventIOTContractPlatformStatus"
            }
          }
        }
      },
      "eventIOTContractPlatformStatus": {
        "type": "object",
        "description": "the overall status of the invoke result, defined by err",
        "properties": {
          "invokeresult": {
            "type": "object",
            "description": "status: OK\u003d\u003dtxn succeeded, ERROR\u003d\u003dtxn failed",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "OK",
                  "ERROR"
                ]
              },
              "message": {
                "type": "string"
              }
            }
          },
          "activeAlerts": {
            "$ref": "#/definitions/definitions_Model_alertNameArray"
          },
          "alertsRaised": {
            "$ref": "#/definitions/definitions_Model_alertNameArray"
          },
          "alertsCleared": {
            "$ref": "#/definitions/definitions_Model_alertNameArray"
          }
        }
      },
      "ioteventcommon": {
        "type": "object",
        "description": "Common properties for all assets",
        "properties": {
          "devicetimestamp": {
            "type": "string",
            "description": "A timestamp recoded by the device that sent the current event"
          },
          "deviceID": {
            "type": "string",
            "description": "A unique identifier for the device that sent the current event"
          },
          "location": {
            "$ref": "#/definitions/definitions_Model_geo"
          },
          "appdata": {
            "type": "array",
            "description": "Application managed information as an array of key:value pairs",
            "minItems": 0,
            "items": {
              "type": "object",
              "properties": {
                "K": {
                  "type": "string"
                },
                "V": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "assetstate": {
        "type": "object",
        "description": "A asset\u0027s complete state",
        "properties": {
          "class": {
            "$ref": "#/definitions/definitions_Model_assetClass"
          },
          "assetID": {
            "type": "string",
            "description": "This asset\u0027s world state asset ID"
          },
          "state": {
            "type": "object",
            "description": "Properties that have been received or calculated for this asset",
            "properties": {
              "asset": {
                "$ref": "#/definitions/definitions_Model_asset"
              }
            }
          },
          "eventin": {
            "type": "object",
            "description": "The contract event that created this state, for example updateAsset",
            "properties": {
              "asset": {
                "$ref": "#/definitions/definitions_Model_asset"
              }
            }
          },
          "txnts": {
            "type": "string",
            "description": "Transaction timestamp matching the blockchain"
          },
          "txnid": {
            "type": "string",
            "description": "Transaction UUID matching the blockchain"
          },
          "eventout": {
            "type": "object",
            "description": "The chaincode event emitted on invoke exit, if any",
            "properties": {
              "asset": {
                "$ref": "#/definitions/definitions_Model_eventIOTContractPlatformInvokeResult"
              }
            }
          },
          "alerts": {
            "$ref": "#/definitions/definitions_Model_alertNameArray"
          },
          "compliant": {
            "type": "boolean",
            "description": "This asset has no active alerts"
          }
        }
      },
      "assetstateexternal": {
        "type": "object",
        "description": "(deprecated)",
        "patternProperties": {
          "^DEF": {
            "type": "object",
            "description": "The external state of one asset asset, named by its world state ID",
            "$ref": "#/definitions/definitions_Model_assetstate"
          }
        }
      },
      "stateFilter": {
        "type": "object",
        "description": "Filter asset states",
        "properties": {
          "match": {
            "type": "string",
            "description": "Defines how to match properties, missing property always fails match",
            "enum": [
              "n/a",
              "all",
              "any",
              "none"
            ]
          },
          "select": {
            "type": "array",
            "description": "Qualified property names and values match",
            "items": {
              "type": "object",
              "properties": {
                "qprop": {
                  "type": "string",
                  "description": "Qualified property to compare, for example \u0027asset.assetID\u0027"
                },
                "value": {
                  "type": "string",
                  "description": "Value to be compared"
                }
              }
            }
          }
        }
      },
      "dateRange": {
        "type": "object",
        "description": "if specified, dates must fall in between these values, inclusive",
        "properties": {
          "begin": {
            "type": "string",
            "description": "timestamp formatted yyyy-mm-dd hh:mm:ss",
            "format": "date-time",
            "sample": "yyyy-mm-dd hh:mm:ss"
          },
          "end": {
            "type": "string",
            "description": "timestamp formatted yyyy-mm-dd hh:mm:ss",
            "format": "date-time",
            "sample": "yyyy-mm-dd hh:mm:ss"
          }
        }
      },
      "assetstatearray": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/definitions_Model_assetstate"
        },
        "minItems": 0,
        "description": "Array of asset states, can mix asset classes"
      },
      "contractState": {
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/definitions/definitions_Model_version"
          },
          "nickname": {
            "$ref": "#/definitions/definitions_Model_nickname"
          }
        }
      },
      "route": {
        "type": "object",
        "description": "A route defines a contract API that can be called to perform a service",
        "properties": {
          "functionname": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "class": {
            "$ref": "#/definitions/definitions_Model_assetClass"
          }
        }
      },
      "routeArray": {
        "type": "object",
        "description": "An array of routes",
        "items": {
          "$ref": "#/definitions/definitions_Model_route"
        },
        "minItems": 0
      },
      "rule": {
        "type": "object",
        "description": "A rule defines a behavior that is applied to every new asset state just before writing to world state, often raises or clears alerts",
        "properties": {
          "rulename": {
            "type": "string"
          },
          "alerts": {
            "$ref": "#/definitions/definitions_Model_alertNameArray"
          },
          "class": {
            "$ref": "#/definitions/definitions_Model_assetClass"
          }
        }
      },
      "ruleArray": {
        "type": "object",
        "description": "An array of rules",
        "items": {
          "$ref": "#/definitions/definitions_Model_rule"
        },
        "minItems": 0
      }
    },
    "definitions_Model_version": {
      "type": "string",
      "description": "The version number of the current contract instance"
    },
    "definitions_Model_nickname": {
      "type": "string",
      "default": "IOT Contract Platform",
      "description": "The nickname of the current contract instance"
    },
    "definitions_Model_asset": {
      "type": "object",
      "description": "The changeable properties for an asset, also considered its \u0027event\u0027 as a partial state",
      "properties": {
        "common": {
          "$ref": "#/definitions/definitions_Model_ioteventcommon"
        },
        "assetID": {
          "$ref": "#/definitions/definitions_Model_assetID"
        },
        "temperature": {
          "type": "number",
          "description": "Temperature of an asset\u0027s contents in degrees Celsuis"
        },
        "carrier": {
          "type": "string",
          "description": "The carrier in possession of this asset"
        }
      },
      "required": [
        "assetID"
      ]
    },
    "definitions_Model_ioteventcommon": {
      "type": "object",
      "description": "Common properties for all assets",
      "properties": {
        "devicetimestamp": {
          "type": "string",
          "description": "A timestamp recoded by the device that sent the current event"
        },
        "deviceID": {
          "type": "string",
          "description": "A unique identifier for the device that sent the current event"
        },
        "location": {
          "$ref": "#/definitions/definitions_Model_geo"
        },
        "appdata": {
          "type": "array",
          "description": "Application managed information as an array of key:value pairs",
          "minItems": 0,
          "items": {
            "type": "object",
            "properties": {
              "K": {
                "type": "string"
              },
              "V": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "definitions_Model_geo": {
      "description": "A geographical coordinate",
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        }
      }
    },
    "definitions_Model_assetID": {
      "type": "string",
      "description": "An asset\u0027s unique ID, e.g. barcode, VIN, etc."
    },
    "definitions_Model_assetKey": {
      "asset": {
        "type": "object",
        "properties": {
          "assetID": {
            "$ref": "#/definitions/definitions_Model_assetID"
          }
        }
      }
    },
    "definitions_Model_stateFilter": {
      "type": "object",
      "description": "Filter asset states",
      "properties": {
        "match": {
          "type": "string",
          "description": "Defines how to match properties, missing property always fails match",
          "enum": [
            "n/a",
            "all",
            "any",
            "none"
          ]
        },
        "select": {
          "type": "array",
          "description": "Qualified property names and values match",
          "items": {
            "type": "object",
            "properties": {
              "qprop": {
                "type": "string",
                "description": "Qualified property to compare, for example \u0027asset.assetID\u0027"
              },
              "value": {
                "type": "string",
                "description": "Value to be compared"
              }
            }
          }
        }
      }
    },
    "definitions_Model_assetstate": {
      "type": "object",
      "description": "A asset\u0027s complete state",
      "properties": {
        "class": {
          "$ref": "#/definitions/definitions_Model_assetClass"
        },
        "assetID": {
          "type": "string",
          "description": "This asset\u0027s world state asset ID"
        },
        "state": {
          "type": "object",
          "description": "Properties that have been received or calculated for this asset",
          "properties": {
            "asset": {
              "$ref": "#/definitions/definitions_Model_asset"
            }
          }
        },
        "eventin": {
          "type": "object",
          "description": "The contract event that created this state, for example updateAsset",
          "properties": {
            "asset": {
              "$ref": "#/definitions/definitions_Model_asset"
            }
          }
        },
        "txnts": {
          "type": "string",
          "description": "Transaction timestamp matching the blockchain"
        },
        "txnid": {
          "type": "string",
          "description": "Transaction UUID matching the blockchain"
        },
        "eventout": {
          "type": "object",
          "description": "The chaincode event emitted on invoke exit, if any",
          "properties": {
            "asset": {
              "$ref": "#/definitions/definitions_Model_eventIOTContractPlatformInvokeResult"
            }
          }
        },
        "alerts": {
          "$ref": "#/definitions/definitions_Model_alertNameArray"
        },
        "compliant": {
          "type": "boolean",
          "description": "This asset has no active alerts"
        }
      }
    },
    "definitions_Model_assetClass": {
      "type": "object",
      "description": "An asset\u0027s classifier definition",
      "properties": {
        "name": "An asset\u0027s class name",
        "prefix": "An asset\u0027s world state prefix, used to allow iteration over all assets of a class",
        "assetidpath": "An asset\u0027s primary key, expressed as a qualified property path (see example contracts)"
      }
    },
    "definitions_Model_eventIOTContractPlatformInvokeResult": {
      "type": "object",
      "description": "A chaincode event defining the standard platform-generated result event for a contract invoke, contains an array of contributed results",
      "properties": {
        "name": {
          "type": "string",
          "enum": [
            "EVT.IOTCP.INVOKE.RESULT"
          ],
          "default": "EVT.IOTCP.INVOKE.RESULT"
        },
        "payload": {
          "type": "object",
          "description": "A map of contributed results",
          "properties": {
            "$ref": "#/definitions/definitions_Model_eventIOTContractPlatformStatus"
          }
        }
      }
    },
    "definitions_Model_eventIOTContractPlatformStatus": {
      "type": "object",
      "description": "the overall status of the invoke result, defined by err",
      "properties": {
        "invokeresult": {
          "type": "object",
          "description": "status: OK\u003d\u003dtxn succeeded, ERROR\u003d\u003dtxn failed",
          "properties": {
            "status": {
              "type": "string",
              "enum": [
                "OK",
                "ERROR"
              ]
            },
            "message": {
              "type": "string"
            }
          }
        },
        "activeAlerts": {
          "$ref": "#/definitions/definitions_Model_alertNameArray"
        },
        "alertsRaised": {
          "$ref": "#/definitions/definitions_Model_alertNameArray"
        },
        "alertsCleared": {
          "$ref": "#/definitions/definitions_Model_alertNameArray"
        }
      }
    },
    "definitions_Model_alertNameArray": {
      "type": "array",
      "description": "An array of alert names",
      "items": {
        "$ref": "#/definitions/definitions_Model_alertName"
      }
    },
    "definitions_Model_alertName": {
      "type": "string",
      "description": "An alert name"
    },
    "definitions_Model_assetstatearray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/definitions_Model_assetstate"
      },
      "minItems": 0,
      "description": "Array of asset states, can mix asset classes"
    },
    "definitions_Model_dateRange": {
      "type": "object",
      "description": "if specified, dates must fall in between these values, inclusive",
      "properties": {
        "begin": {
          "type": "string",
          "description": "timestamp formatted yyyy-mm-dd hh:mm:ss",
          "format": "date-time",
          "sample": "yyyy-mm-dd hh:mm:ss"
        },
        "end": {
          "type": "string",
          "description": "timestamp formatted yyyy-mm-dd hh:mm:ss",
          "format": "date-time",
          "sample": "yyyy-mm-dd hh:mm:ss"
        }
      }
    },
    "definitions_Model_routeArray": {
      "type": "object",
      "description": "An array of routes",
      "items": {
        "$ref": "#/definitions/definitions_Model_route"
      },
      "minItems": 0
    },
    "definitions_Model_route": {
      "type": "object",
      "description": "A route defines a contract API that can be called to perform a service",
      "properties": {
        "functionname": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "class": {
          "$ref": "#/definitions/definitions_Model_assetClass"
        }
      }
    },
    "definitions_Model_ruleArray": {
      "type": "object",
      "description": "An array of rules",
      "items": {
        "$ref": "#/definitions/definitions_Model_rule"
      },
      "minItems": 0
    },
    "definitions_Model_rule": {
      "type": "object",
      "description": "A rule defines a behavior that is applied to every new asset state just before writing to world state, often raises or clears alerts",
      "properties": {
        "rulename": {
          "type": "string"
        },
        "alerts": {
          "$ref": "#/definitions/definitions_Model_alertNameArray"
        },
        "class": {
          "$ref": "#/definitions/definitions_Model_assetClass"
        }
      }
    },
    "definitions_Model_contractState": {
      "type": "object",
      "properties": {
        "version": {
          "$ref": "#/definitions/definitions_Model_version"
        },
        "nickname": {
          "$ref": "#/definitions/definitions_Model_nickname"
        }
      }
    }
  }
}