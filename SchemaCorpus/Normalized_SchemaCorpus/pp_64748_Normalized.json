{
  "$id": "http://raw.githubusercontent.com/oasis-open/cti-stix2-json-schemas/stix2.1/schemas/observables/email-message.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "email-message",
  "description": "The Email Message Object represents an instance of an email message.",
  "type": "object",
  "allOf": [
    {
      "$ref": "#/definitions/..\\common\\cyber-observable-core.json"
    },
    {
      "properties": {
        "type": {
          "type": "string",
          "description": "The value of this property MUST be `email-message`.",
          "enum": [
            "email-message"
          ]
        },
        "id": {
          "title": "id",
          "pattern": "^email-message--"
        },
        "date": {
          "$ref": "#/definitions/..\\common\\timestamp.json",
          "description": "Specifies the date/time that the email message was sent."
        },
        "content_type": {
          "type": "string",
          "description": "Specifies the value of the \u0027Content-Type\u0027 header of the email message."
        },
        "from_ref": {
          "description": "Specifies the value of the \u0027From:\u0027 header of the email message.",
          "type": "string"
        },
        "sender_ref": {
          "description": "Specifies the value of the \u0027From\u0027 field of the email message.",
          "type": "string"
        },
        "to_refs": {
          "type": "array",
          "description": "Specifies the mailboxes that are \u0027To:\u0027 recipients of the email message.",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        "cc_refs": {
          "type": "array",
          "description": "Specifies the mailboxes that are \u0027CC:\u0027 recipients of the email message.",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        "bcc_refs": {
          "type": "array",
          "description": "Specifies the mailboxes that are \u0027BCC:\u0027 recipients of the email message.",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        "message_id": {
          "type": "string",
          "description": "Specifies the Message-ID field of the email message."
        },
        "subject": {
          "type": "string",
          "description": "Specifies the subject of the email message."
        },
        "received_lines": {
          "type": "array",
          "description": "Specifies one or more Received header fields that may be included in the email headers.",
          "items": {
            "type": "string"
          }
        },
        "additional_header_fields": {
          "$ref": "#/definitions/email-additional-header-fields",
          "description": "Specifies any other header fields found in the email message, as a dictionary."
        },
        "raw_email_ref": {
          "description": "Specifies the raw binary contents of the email message, including both the headers and body, as a reference to an Artifact Object.",
          "type": "string"
        }
      }
    }
  ],
  "oneOf": [
    {
      "properties": {
        "is_multipart": {
          "type": "boolean",
          "enum": [
            false
          ],
          "description": "Indicates whether the email body contains multiple MIME parts."
        },
        "body": {
          "type": "string",
          "description": "Specifies a string containing the email body. This field MAY only be used if is_multipart is false."
        }
      },
      "required": [
        "is_multipart"
      ],
      "not": {
        "required": [
          "body_multipart"
        ]
      }
    },
    {
      "properties": {
        "is_multipart": {
          "type": "boolean",
          "enum": [
            true
          ],
          "description": "Indicates whether the email body contains multiple MIME parts."
        },
        "body_multipart": {
          "type": "array",
          "description": "Specifies a list of the MIME parts that make up the email body. This property MAY only be used if is_multipart is true.",
          "items": {
            "$ref": "#/definitions/mime-part-type"
          }
        }
      },
      "required": [
        "is_multipart"
      ],
      "not": {
        "required": [
          "body"
        ]
      }
    }
  ],
  "definitions": {
    "mime-part-type": {
      "type": "object",
      "description": "Specifies a component of a multi-part email body.",
      "properties": {
        "body": {
          "type": "string",
          "description": "Specifies the contents of the MIME part if the content_type is not provided OR starts with text/"
        },
        "body_raw_ref": {
          "type": "string",
          "description": "Specifies the contents of non-textual MIME parts, that is those whose content_type does not start with text/, as a reference to an Artifact Object or File Object."
        },
        "content_type": {
          "type": "string",
          "description": "Specifies the value of the \u0027Content-Type\u0027 header field of the MIME part."
        },
        "content_disposition": {
          "type": "string",
          "description": "Specifies the value of the \u0027Content-Disposition\u0027 header field of the MIME part."
        }
      },
      "oneOf": [
        {
          "required": [
            "body"
          ]
        },
        {
          "required": [
            "body_raw_ref"
          ]
        }
      ]
    },
    "email-additional-header-fields": {
      "allOf": [
        {
          "$ref": "#/definitions/..\\common\\dictionary.json"
        }
      ],
      "description": "Specifies any other header fields (except for date, received_lines, content_type, from_ref, sender_ref, to_refs, cc_refs, bcc_refs, and subject) found in the email message, as a dictionary.",
      "not": {
        "patternProperties": {
          "^date|received_lines|content_type|from_ref|sender_ref|to_refs|cc_refs|bcc_refs|subject$": {
            "description": "Invalid additional header field types"
          }
        },
        "additionalProperties": false
      },
      "patternProperties": {
        "^[a-zA-Z0-9_-]{0,250}$": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 2
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "..\\common\\cyber-observable-core.json": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "cyber-observable-core",
      "description": "Common properties and behavior across all Cyber Observable Objects.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "pattern": "^([a-z][a-z0-9]*)+(-[a-z0-9]+)*\\-?$",
          "minLength": 3,
          "maxLength": 250,
          "description": "Indicates that this object is an Observable Object. The value of this property MUST be a valid Observable Object type name, but to allow for custom objects this has been removed from the schema.",
          "not": {
            "enum": [
              "action"
            ]
          }
        },
        "spec_version": {
          "type": "string",
          "enum": [
            "2.0",
            "2.1"
          ],
          "description": "The version of the STIX specification used to represent the content in this cyber-observable."
        },
        "object_marking_refs": {
          "type": "array",
          "description": "The list of marking-definition objects to be applied to this object.",
          "items": {
            "$ref": "#/definitions/..\\common\\identifier.json"
          },
          "minItems": 1
        },
        "granular_markings": {
          "type": "array",
          "description": "The set of granular markings that apply to this object.",
          "items": {
            "$ref": "#/definitions/..\\common\\granular-marking.json"
          },
          "minItems": 1
        },
        "defanged": {
          "type": "boolean",
          "description": "Defines whether or not the data contained within the object has been defanged."
        },
        "id": {
          "$ref": "#/definitions/..\\common\\identifier.json",
          "description": "Specifies the identifier of the observable object, as a string."
        },
        "extensions": {
          "description": "Specifies any extensions of the object, as a dictionary.",
          "type": "object",
          "minProperties": 1,
          "patternProperties": {
            "^([a-z][a-z0-9]*)+(-[a-z0-9]+)*\\-ext$": {
              "type": "object",
              "minProperties": 1,
              "allOf": [
                {
                  "$ref": "#/definitions/..\\common\\properties.json"
                }
              ]
            },
            "^extension-definition--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
              "allOf": [
                {
                  "$ref": "#/definitions/..\\common\\extension.json"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/..\\common\\properties.json"
        }
      ],
      "not": {
        "anyOf": [
          {
            "required": [
              "severity"
            ]
          },
          {
            "required": [
              "action"
            ]
          },
          {
            "required": [
              "username"
            ]
          },
          {
            "required": [
              "phone_numbers"
            ]
          }
        ]
      },
      "required": [
        "type",
        "id"
      ]
    },
    "..\\common\\identifier.json": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "identifier",
      "description": "Represents identifiers across the CTI specifications. The format consists of the name of the top-level object being identified, followed by two dashes (--), followed by a UUIDv4.",
      "type": "string",
      "pattern": "^[a-z][a-z0-9-]+[a-z0-9]--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
    },
    "..\\common\\granular-marking.json": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "granular-marking",
      "description": "The granular-marking type defines how the list of marking-definition objects referenced by the marking_refs property to apply to a set of content identified by the list of selectors in the selectors property.",
      "type": "object",
      "properties": {
        "selectors": {
          "type": "array",
          "description": "A list of selectors for content contained within the STIX object in which this property appears.",
          "items": {
            "type": "string",
            "pattern": "^([a-z0-9_-]{3,249}(\\.(\\[\\d+\\]|[a-z0-9_-]{1,250}))*|id)$"
          },
          "minItems": 1
        },
        "lang": {
          "type": "string",
          "description": "Identifies the language of the text identified by this marking."
        },
        "marking_ref": {
          "allOf": [
            {
              "$ref": "#/definitions/..\\common\\identifier.json"
            },
            {
              "pattern": "^marking-definition--",
              "description": "The marking_ref property specifies the ID of the marking-definition object that describes the marking."
            }
          ]
        }
      },
      "required": [
        "selectors",
        "marking_ref"
      ]
    },
    "..\\common\\properties.json": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "properties",
      "description": "Rules for custom properties",
      "patternProperties": {
        "^[a-z][a-z0-9_]{0,245}_bin$": {
          "$ref": "#/definitions/..\\common\\binary.json"
        },
        "^[a-z][a-z0-9_]{0,245}_hex$": {
          "$ref": "#/definitions/..\\common\\hex.json"
        },
        "^([a-z][a-z0-9_]{2,249})|id$": {
          "anyOf": [
            {
              "type": "array",
              "minItems": 1
            },
            {
              "type": "string"
            },
            {
              "type": "integer"
            },
            {
              "type": "boolean"
            },
            {
              "type": "number"
            },
            {
              "type": "object"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "..\\common\\binary.json": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "binary",
      "description": "The ​binary data type represents a sequence of bytes. In order to allow pattern matching on custom objects, for all properties that use the binary type, the property name MUST end with \u0027_bin\u0027. The JSON MTI serialization represents this as a base64-­encoded string as specified in RFC4648​. Other serializations SHOULD use a native binary type, if available.",
      "type": "string",
      "pattern": "^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}\u003d|[A-Za-z0-9+/]{2}\u003d\u003d)$"
    },
    "..\\common\\hex.json": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "hex",
      "description": "The hex data type encodes an array of octets (8-bit bytes) as hexadecimal. The string MUST consist of an even number of hexadecimal characters, which are the digits \u00270\u0027 through \u00279\u0027 and the letters \u0027a\u0027 through \u0027f\u0027.  In order to allow pattern matching on custom objects, all properties that use the hex type, the property name MUST end with \u0027_hex\u0027.",
      "type": "string",
      "pattern": "^([a-fA-F0-9]{2})+$"
    },
    "..\\common\\extension.json": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "minProperties": 1,
      "properties": {
        "extension_type": {
          "description": "The type of extension.",
          "$ref": "#/definitions/..\\common\\extension.json_definitions_extension-type-enum"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/..\\common\\properties.json"
        }
      ],
      "required": [
        "extension_type"
      ],
      "definitions": {
        "extension-type-enum": {
          "type": "string",
          "enum": [
            "new-sdo",
            "new-sco",
            "new-sro",
            "property-extension",
            "toplevel-property-extension"
          ]
        }
      }
    },
    "..\\common\\extension.json_definitions_extension-type-enum": {
      "type": "string",
      "enum": [
        "new-sdo",
        "new-sco",
        "new-sro",
        "property-extension",
        "toplevel-property-extension"
      ]
    },
    "..\\common\\timestamp.json": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "timestamp",
      "description": "Represents timestamps across the CTI specifications. The format is an RFC3339 timestamp, with a required timezone specification of \u0027Z\u0027.",
      "type": "string",
      "pattern": "^[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\\.[0-9]+)?Z$"
    },
    "..\\common\\dictionary.json": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "dictionary",
      "description": "A dictionary captures a set of key/value pairs",
      "type": "object",
      "minProperties": 1,
      "patternProperties": {
        "^[a-zA-Z0-9_-]{0,250}$": {
          "anyOf": [
            {
              "type": "array",
              "minItems": 1
            },
            {
              "type": "string"
            },
            {
              "type": "integer"
            },
            {
              "type": "boolean"
            },
            {
              "type": "number"
            },
            {
              "type": "object"
            }
          ]
        }
      },
      "additionalProperties": false
    }
  }
}