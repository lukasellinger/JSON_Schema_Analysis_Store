{
  "$schema": "http://json-schema.org/draft-04/schema",
  "title": "Material",
  "type": "object",
  "description": "The material appearance of a primitive.",
  "allOf": [
    {
      "$ref": "#/definitions/glTFChildOfRootProperty.schema.json"
    }
  ],
  "properties": {
    "name": {},
    "extensions": {},
    "extras": {},
    "pbrMetallicRoughness": {
      "allOf": [
        {
          "$ref": "#/definitions/material.pbrMetallicRoughness.schema.json"
        }
      ],
      "description": "A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology. When not specified, all the default values of `pbrMetallicRoughness` apply."
    },
    "normalTexture": {
      "allOf": [
        {
          "$ref": "#/definitions/material.normalTextureInfo.schema.json"
        }
      ],
      "description": "The normal map texture.",
      "gltf_detailedDescription": "A tangent space normal map. The texture contains RGB components in linear space. Each texel represents the XYZ components of a normal vector in tangent space. Red [0 to 255] maps to X [-1 to 1]. Green [0 to 255] maps to Y [-1 to 1]. Blue [128 to 255] maps to Z [1/255 to 1]. The normal vectors use OpenGL conventions where +X is right and +Y is up. +Z points toward the viewer. In GLSL, this vector would be unpacked like so: `float3 normalVector \u003d tex2D(\u003csampled normal map texture value\u003e, texCoord) * 2 - 1`. Client implementations should normalize the normal vectors before using them in lighting equations."
    },
    "occlusionTexture": {
      "allOf": [
        {
          "$ref": "#/definitions/material.occlusionTextureInfo.schema.json"
        }
      ],
      "description": "The occlusion map texture.",
      "gltf_detailedDescription": "The occlusion map texture. The occlusion values are sampled from the R channel. Higher values indicate areas that should receive full indirect lighting and lower values indicate no indirect lighting. These values are linear. If other channels are present (GBA), they are ignored for occlusion calculations."
    },
    "emissiveTexture": {
      "allOf": [
        {
          "$ref": "#/definitions/textureInfo.schema.json"
        }
      ],
      "description": "The emissive map texture.",
      "gltf_detailedDescription": "The emissive map controls the color and intensity of the light being emitted by the material. This texture contains RGB components in sRGB color space. If a fourth component (A) is present, it is ignored."
    },
    "emissiveFactor": {
      "type": "array",
      "items": {
        "type": "number",
        "minimum": 0.0,
        "maximum": 1.0
      },
      "minItems": 3,
      "maxItems": 3,
      "default": [
        0.0,
        0.0,
        0.0
      ],
      "description": "The emissive color of the material.",
      "gltf_detailedDescription": "The RGB components of the emissive color of the material. These values are linear. If an emissiveTexture is specified, this value is multiplied with the texel values."
    },
    "alphaMode": {
      "default": "OPAQUE",
      "description": "The alpha rendering mode of the material.",
      "gltf_detailedDescription": "The material\u0027s alpha rendering mode enumeration specifying the interpretation of the alpha value of the main factor and texture.",
      "anyOf": [
        {
          "enum": [
            "OPAQUE"
          ],
          "description": "The alpha value is ignored and the rendered output is fully opaque."
        },
        {
          "enum": [
            "MASK"
          ],
          "description": "The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value."
        },
        {
          "enum": [
            "BLEND"
          ],
          "description": "The alpha value is used to composite the source and destination areas. The rendered output is combined with the background using the normal painting operation (i.e. the Porter and Duff over operator)."
        },
        {
          "type": "string"
        }
      ]
    },
    "alphaCutoff": {
      "type": "number",
      "minimum": 0.0,
      "default": 0.5,
      "description": "The alpha cutoff value of the material.",
      "gltf_detailedDescription": "Specifies the cutoff threshold when in `MASK` mode. If the alpha value is greater than or equal to this value then it is rendered as fully opaque, otherwise, it is rendered as fully transparent. A value greater than 1.0 will render the entire material as fully transparent. This value is ignored for other modes."
    },
    "doubleSided": {
      "type": "boolean",
      "default": false,
      "description": "Specifies whether the material is double sided.",
      "gltf_detailedDescription": "Specifies whether the material is double sided. When this value is false, back-face culling is enabled. When this value is true, back-face culling is disabled and double sided lighting is enabled. The back-face must have its normals reversed before the lighting equation is evaluated."
    }
  },
  "dependencies": {
    "alphaCutoff": [
      "alphaMode"
    ]
  },
  "definitions": {
    "glTFChildOfRootProperty.schema.json": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "glTF Child of Root Property",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/glTFProperty.schema.json"
        }
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The user-defined name of this object.",
          "gltf_detailedDescription": "The user-defined name of this object.  This is not necessarily unique, e.g., an accessor and a buffer could have the same name, or two accessors could even have the same name."
        }
      }
    },
    "glTFProperty.schema.json": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "glTF Property",
      "type": "object",
      "properties": {
        "extensions": {
          "$ref": "#/definitions/extension.schema.json"
        },
        "extras": {
          "$ref": "#/definitions/extras.schema.json"
        }
      }
    },
    "extension.schema.json": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "Extension",
      "type": "object",
      "description": "Dictionary object with extension-specific objects.",
      "properties": {},
      "additionalProperties": {
        "type": "object"
      }
    },
    "extras.schema.json": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "Extras",
      "description": "Application-specific data."
    },
    "material.pbrMetallicRoughness.schema.json": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "Material PBR Metallic Roughness",
      "type": "object",
      "description": "A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology.",
      "allOf": [
        {
          "$ref": "#/definitions/glTFProperty.schema.json"
        }
      ],
      "properties": {
        "baseColorFactor": {
          "type": "array",
          "items": {
            "type": "number",
            "minimum": 0.0,
            "maximum": 1.0
          },
          "description": "The material\u0027s base color factor.",
          "default": [
            1.0,
            1.0,
            1.0,
            1.0
          ],
          "minItems": 4,
          "maxItems": 4,
          "gltf_detailedDescription": "The RGBA components of the base color of the material. The fourth component (A) is the alpha coverage of the material. The `alphaMode` property specifies how alpha is interpreted. These values are linear. If a baseColorTexture is specified, this value is multiplied with the texel values."
        },
        "baseColorTexture": {
          "allOf": [
            {
              "$ref": "#/definitions/textureInfo.schema.json"
            }
          ],
          "description": "The base color texture.",
          "gltf_detailedDescription": "The base color texture. This texture contains RGB(A) components in sRGB color space. The first three components (RGB) specify the base color of the material. If the fourth component (A) is present, it represents the alpha coverage of the material. Otherwise, an alpha of 1.0 is assumed. The `alphaMode` property specifies how alpha is interpreted. The stored texels must not be premultiplied."
        },
        "metallicFactor": {
          "type": "number",
          "description": "The metalness of the material.",
          "default": 1.0,
          "minimum": 0.0,
          "maximum": 1.0,
          "gltf_detailedDescription": "The metalness of the material. A value of 1.0 means the material is a metal. A value of 0.0 means the material is a dielectric. Values in between are for blending between metals and dielectrics such as dirty metallic surfaces. This value is linear. If a metallicRoughnessTexture is specified, this value is multiplied with the metallic texel values."
        },
        "roughnessFactor": {
          "type": "number",
          "description": "The roughness of the material.",
          "default": 1.0,
          "minimum": 0.0,
          "maximum": 1.0,
          "gltf_detailedDescription": "The roughness of the material. A value of 1.0 means the material is completely rough. A value of 0.0 means the material is completely smooth. This value is linear. If a metallicRoughnessTexture is specified, this value is multiplied with the roughness texel values."
        },
        "metallicRoughnessTexture": {
          "allOf": [
            {
              "$ref": "#/definitions/textureInfo.schema.json"
            }
          ],
          "description": "The metallic-roughness texture.",
          "gltf_detailedDescription": "The metallic-roughness texture. The metalness values are sampled from the B channel. The roughness values are sampled from the G channel. These values are linear. If other channels are present (R or A), they are ignored for metallic-roughness calculations."
        },
        "extensions": {},
        "extras": {}
      }
    },
    "textureInfo.schema.json": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "Texture Info",
      "type": "object",
      "description": "Reference to a texture.",
      "allOf": [
        {
          "$ref": "#/definitions/glTFProperty.schema.json"
        }
      ],
      "properties": {
        "index": {
          "allOf": [
            {
              "$ref": "#/definitions/glTFid.schema.json"
            }
          ],
          "description": "The index of the texture."
        },
        "texCoord": {
          "type": "integer",
          "description": "The set index of texture\u0027s TEXCOORD attribute used for texture coordinate mapping.",
          "default": 0,
          "minimum": 0,
          "gltf_detailedDescription": "This integer value is used to construct a string in the format `TEXCOORD_\u003cset index\u003e` which is a reference to a key in mesh.primitives.attributes (e.g. A value of `0` corresponds to `TEXCOORD_0`). Mesh must have corresponding texture coordinate attributes for the material to be applicable to it."
        },
        "extensions": {},
        "extras": {}
      },
      "required": [
        "index"
      ]
    },
    "glTFid.schema.json": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "glTF Id",
      "type": "integer",
      "minimum": 0
    },
    "material.normalTextureInfo.schema.json": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "Material Normal Texture Info",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/textureInfo.schema.json"
        }
      ],
      "properties": {
        "index": {},
        "texCoord": {},
        "scale": {
          "type": "number",
          "description": "The scalar multiplier applied to each normal vector of the normal texture.",
          "default": 1.0,
          "gltf_detailedDescription": "The scalar multiplier applied to each normal vector of the texture. This value scales the normal vector using the formula: `scaledNormal \u003d  normalize((normalize(\u003csampled normal texture value\u003e) * 2.0 - 1.0) * vec3(\u003cnormal scale\u003e, \u003cnormal scale\u003e, 1.0))`. This value is ignored if normalTexture is not specified. This value is linear."
        },
        "extensions": {},
        "extras": {}
      }
    },
    "material.occlusionTextureInfo.schema.json": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "Material Occlusion Texture Info",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/textureInfo.schema.json"
        }
      ],
      "properties": {
        "index": {},
        "texCoord": {},
        "strength": {
          "type": "number",
          "description": "A scalar multiplier controlling the amount of occlusion applied.",
          "default": 1.0,
          "minimum": 0.0,
          "maximum": 1.0,
          "gltf_detailedDescription": "A scalar multiplier controlling the amount of occlusion applied. A value of 0.0 means no occlusion. A value of 1.0 means full occlusion. This value affects the resulting color using the formula: `occludedColor \u003d lerp(color, color * \u003csampled occlusion texture value\u003e, \u003cocclusion strength\u003e)`. This value is ignored if the corresponding texture is not specified. This value is linear."
        },
        "extensions": {},
        "extras": {}
      }
    }
  }
}