{
  "title": "layer",
  "type": "object",
  "$schema": "http://json-schema.org/draft-04/schema",
  "description": "A layer object may allow overrides on popup content and drawing behavior for individual layers of a web service. This object also contains geographic features and their attributes when used in a feature collection.",
  "properties": {
    "defaultVisibility": {
      "type": "boolean",
      "description": "Default visibility of the layers in the map service."
    },
    "definitionEditor": {
      "type": "object",
      "description": "An object that provides interactive filters.",
      "$ref": "#/definitions/definitionEditor_schema.json"
    },
    "featureSet": {
      "type": "object",
      "description": "A featureSet object containing the geometry and attributes of the features in the layer. Used with feature collections only.",
      "$ref": "#/definitions/featureSet_schema.json"
    },
    "field": {
      "type": "object",
      "description": "Information about each field in a layer. Used with feature collections.",
      "$ref": "#/definitions/field_schema.json"
    },
    "id": {
      "type": "string",
      "description": "A string indicating the index position of the layer in the map service or feature collection."
    },
    "layerDefinition": {
      "type": "object",
      "description": "The layerDefinition object defines the attribute schema and drawing information for the layer.",
      "$ref": "#/definitions/layerDefinition_schema.json"
    },
    "layerUrl": {
      "type": "string",
      "description": "A string URL to a service that should be used for all queries against the layer. Used with hosted tiled map services on ArcGIS Online when there is an associated feature service that allows for queries."
    },
    "maxScale": {
      "type": "number",
      "description": "Represents the maximum scale at which the layer definition will be applied."
    },
    "minScale": {
      "type": "number",
      "description": "Represents the minimum scale at which the layer definition will be applied."
    },
    "parentLayerId": {
      "type": "number",
      "description": "If working with nested layers, this is the numeric value indicating the layer id of the next layer (parent) directly above the current referenced layer."
    },
    "popupInfo": {
      "type": "object",
      "description": "A popupInfo object defining the popup window content for the layer.",
      "$ref": "#/definitions/popupInfo_schema.json"
    },
    "showLegend": {
      "type": "boolean",
      "description": "Indicates whether to allow map authors the ability to control what layers should be shown in a client\u0027s legend.",
      "default": true
    },
    "subLayer": {
      "type": "number",
      "description": "Array of numeric values indicating the layer index for layers nested directly under the parent layer."
    },
    "subLayerIds": {
      "type": "array",
      "description": "If the layer is a parent layer, it will have one or more sub layers included in an array.",
      "items": {
        "type": "integer"
      }
    },
    "title": {
      "type": "string",
      "description": "A user-friendly string title for the layer that can be used in a table of contents."
    }
  },
  "additionalProperties": false,
  "definitions": {
    "definitionEditor_schema.json": {
      "title": "definitionEditor",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The definitionEditor stores interactive filters at the same level as layerDefinition.",
      "properties": {
        "inputs": {
          "type": "array",
          "description": "An array of input objects.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/input_schema.json"
          }
        },
        "parameterizedExpression": {
          "type": "string",
          "description": "A string value representing the where clause for the interactive filter."
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "definitionEditor",
            "code": {
              "definitionEditor": {
                "parameterizedExpression": "AREA BETWEEN {0} AND {1} or VALUE \u003d 23 or NAME LIKE \u0027{2}%\u0027",
                "inputs": [
                  {
                    "hint": "Enter square miles.",
                    "prompt": "Area between",
                    "parameters": [
                      {
                        "type": "esriFieldTypeInteger",
                        "fieldName": "AREA",
                        "parameterId": 0,
                        "defaultValue": 10
                      },
                      {
                        "type": "esriFieldTypeInteger",
                        "fieldName": "AREA",
                        "parameterId": 1,
                        "defaultValue": 100
                      }
                    ]
                  },
                  {
                    "hint": "Enter your name.",
                    "prompt": "Name starts with",
                    "parameters": [
                      {
                        "type": "esriFieldTypeString",
                        "fieldName": "NAME",
                        "parameterId": 2,
                        "defaultValue": "Jack"
                      }
                    ]
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "input_schema.json": {
      "title": "input",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The input objects specified by the [definitionEditor](definitionEditor.md).",
      "properties": {
        "hint": {
          "type": "string",
          "description": "A string value representing a hint for the input."
        },
        "parameters": {
          "type": "array",
          "description": "An array of parameter objects.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/parameter_schema.json"
          }
        },
        "prompt": {
          "type": "string",
          "description": "A string value representing the prompt for the input."
        }
      },
      "additionalProperties": false
    },
    "parameter_schema.json": {
      "title": "parameter",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Objects defined by a [definitionEditor](definitionEditor.md) input.",
      "properties": {
        "defaultValue": {
          "description": "The default value that is automatically given if nothing is provided.",
          "oneOf": [
            {
              "type": "number",
              "description": "Value given automatically if none provided."
            },
            {
              "type": "string"
            }
          ]
        },
        "fieldName": {
          "type": "string",
          "description": "A string value representing the name of the field to query."
        },
        "parameterId": {
          "type": "integer",
          "description": "Number given to uniquely identify the specified parameter."
        },
        "type": {
          "type": "string",
          "description": "The field type for the specified field parameter.",
          "enum": [
            "esriFieldTypeBlob",
            "esriFieldTypeDate",
            "esriFieldTypeDouble",
            "esriFieldTypeGeometry",
            "esriFieldTypeGlobalID",
            "esriFieldTypeGUID",
            "esriFieldTypeInteger",
            "esriFieldTypeOID",
            "esriFieldTypeRaster",
            "esriFieldTypeSingle",
            "esriFieldTypeSmallInteger",
            "esriFieldTypeString",
            "esriFieldTypeXML"
          ]
        },
        "utcValue": {
          "type": "integer",
          "description": "An integer value representing exact UNIX time used when `defaultValue` is a date string."
        }
      },
      "additionalProperties": false
    },
    "featureSet_schema.json": {
      "title": "featureSet",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "A featureSet object contains the geometry and attributes of features in a layer. This object is used with feature collections only.",
      "properties": {
        "features": {
          "type": "array",
          "description": "An array of feature objects containing geometry and a set of attributes.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/feature_schema.json"
          },
          "uniqueItems": true
        },
        "geometryType": {
          "type": "string",
          "description": "The type of geometry.",
          "enum": [
            "esriGeometryPoint",
            "esriGeometryMultipoint",
            "esriGeometryPolyline",
            "esriGeometryPolygon",
            "esriGeometryEnvelope"
          ]
        }
      },
      "required": [
        "features",
        "geometryType"
      ],
      "additionalProperties": false
    },
    "feature_schema.json": {
      "title": "feature",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Contains information about an attribute field and feature geometry.",
      "properties": {
        "attributes": {
          "type": "object",
          "description": "The feature attributes. A JSON object that contains a dictionary of name-value pairs. The names are the feature field names. The values are the field values, and they can be any of the standard JSON types: string, number, and boolean. Note that date values are encoded as numbers. The number represents the number of milliseconds since epoch (January 1, 1970) in UTC."
        },
        "geometry": {
          "type": "object",
          "description": "It can be any of the supported geometry types.",
          "$ref": "#/definitions/geometry_schema.json"
        },
        "symbol": {
          "type": "object",
          "description": "Symbol used for drawing the feature.",
          "$ref": "#/definitions/symbol3D_schema.json"
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "feature",
            "code": {
              "feature": {
                "geometry": {
                  "x": -118.15,
                  "y": 33.8
                },
                "attributes": {
                  "OWNER": "Joe Smith",
                  "VALUE": 94820.37,
                  "APPROVED": true,
                  "LASTUPDATE": 1227663551096
                },
                "symbol": {
                  "type": "PolygonSymbol3D",
                  "symbolLayers": [
                    {
                      "type": "Fill",
                      "material": {
                        "color": [
                          255,
                          0,
                          0
                        ]
                      }
                    }
                  ]
                }
              }
            }
          }
        ]
      }
    },
    "geometry_schema.json": {
      "title": "geometry",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Please refer to the links below for objects which define the JSON formats of geometry and spatial reference objects.",
      "oneOf": [
        {
          "$ref": "#/definitions/multipoint_geometry_schema.json"
        },
        {
          "$ref": "#/definitions/point_geometry_schema.json"
        },
        {
          "$ref": "#/definitions/polygon_geometry_schema.json"
        },
        {
          "$ref": "#/definitions/polyline_geometry_schema.json"
        }
      ]
    },
    "multipoint_geometry_schema.json": {
      "title": "multipointGeometry",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Contains an array of points, along with a spatial reference field.",
      "properties": {
        "hasM": {
          "type": "boolean",
          "description": "Indicates whether the geometry contains M coordinate values."
        },
        "hasZ": {
          "type": "boolean",
          "description": "Indicates whether the geometry contains Z coordinate values."
        },
        "points": {
          "type": "array",
          "description": "An array that corresponds to 2D and 3D points.",
          "items": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "minItems": 2,
            "maxItems": 4
          }
        },
        "spatialReference": {
          "type": "object",
          "description": "The spatial reference can be defined using a well-known ID (WKID) or well-known text (WKT).",
          "$ref": "#/definitions/spatialReference_schema.json"
        }
      },
      "required": [
        "points"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "multipointGeometry",
            "code": {
              "geometry": {
                "points": [
                  [
                    -97.06138,
                    32.837
                  ],
                  [
                    -97.06133,
                    32.836
                  ],
                  [
                    -97.06124,
                    32.834
                  ],
                  [
                    -97.06127,
                    32.832
                  ]
                ],
                "spatialReference": {
                  "wkid": 4326
                }
              }
            }
          }
        ]
      }
    },
    "spatialReference_schema.json": {
      "title": "spatialReference",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The spatialReference object is located at the top level of the JSON hierarchy. In addition to this, it is also available within the operationalLayer and basemap objects.\n\nMany predefined spatial references have already been defined and are available for use. A spatial reference can be defined using a well-known ID (WKID) or well-known text (WKT). The default tolerance and resolution values for the associated coordinate system are used.\n\nA spatial reference can optionally include a definition for a vertical coordinate system (VCS), which is used to interpret the z values of a geometry.",
      "properties": {
        "latestVcsWkid": {
          "type": "number",
          "description": "(Optional) The current wkid value of the vertical coordinate system."
        },
        "latestWkid": {
          "type": "number",
          "description": "(Optional) Identifies the current wkid value associated with the same spatial reference. For example a WKID of \u0027102100\u0027 (Web Mercator) has a latestWKid of \u00273857\u0027."
        },
        "vcsWkid": {
          "type": "number",
          "description": "(Optional) The wkid value of the vertical coordinate system."
        },
        "wkid": {
          "type": "number",
          "description": "The well-known ID (WKID) of the coordinate system. Specify either WKID or the well-known text (WKT) of the coordinate system.",
          "default": 102100
        },
        "wkt": {
          "type": "string",
          "description": "The well-known text (WKT) of the coordinate system. Specify either WKT or WKID of the coordinate system."
        }
      },
      "oneOf": [
        {
          "required": [
            "wkt"
          ]
        },
        {
          "required": [
            "wkid"
          ]
        }
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "additionalInformation": "All operational layers in the scene are drawn or requested in the spatial reference of the basemap layers.\n\nThe **basemap** defines the spatial reference and tiling scheme of the scene. Each **baseMapLayer** must be in the same spatial reference and tiling scheme.\n\n\n\nFor a complete list of supported IDs and their corresponding definition strings, see:\n\n[Projected Coordinate Systems Listing](http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Projected_coordinate_systems/02r3000000vt000000/)\n\n[Geographic Coordinate Systems Listing](http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Geographic_coordinate_systems/02r300000105000000/)\n\n[Vertical Coordinate Systems Listing](http://resources.arcgis.com/en/help/rest/apiref/vcs.html)\n\n\n\nAdditional information regarding how web scenes work with geometry and spatial reference can be found on the Resource Center:\n\n[ArcGIS Server REST API Geometry object](http://resources.arcgis.com/en/help/rest/apiref/geometry.html)\n\n[Using spatial references](http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Using_spatial_references/02r3000000qq000000/)\n\n[Working with Geometry Objects](http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Geometry_Objects/02r3000000n1000000/)",
        "examples": [
          {
            "title": "wkid",
            "code": {
              "spatialreference": {
                "wkid": 102100,
                "latestWkid": 3857
              }
            }
          }
        ]
      }
    },
    "point_geometry_schema.json": {
      "title": "pointGeometry",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Defines the JSON formats of the point and spatial reference objects.",
      "properties": {
        "m": {
          "type": "number",
          "description": "M coordinate which contains measures used for linear referencing."
        },
        "spatialReference": {
          "type": "object",
          "description": "The spatial reference can be defined using a well-known ID (WKID) or well-known text (WKT).",
          "$ref": "#/definitions/spatialReference_schema.json"
        },
        "x": {
          "description": "X coordinate which is measured along the east/west axis.",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "enum": [
                "NaN"
              ]
            }
          ]
        },
        "y": {
          "type": "number",
          "description": "Y coordinate which is measured along the north/south axis."
        },
        "z": {
          "type": "number",
          "description": "Z coordinate which measures height or elevation."
        }
      },
      "required": [
        "x"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "pointGeometry",
            "code": {
              "geometry": {
                "x": -118.15,
                "y": 33.8,
                "spatialReference": {
                  "wkid": 4326
                }
              }
            }
          }
        ]
      }
    },
    "polygon_geometry_schema.json": {
      "title": "polygonGeometry",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "A polygon contains an array of rings and a spatial reference.",
      "properties": {
        "hasM": {
          "type": "boolean",
          "description": "Indicates whether the geometry contains M coordinate values."
        },
        "hasZ": {
          "type": "boolean",
          "description": "Indicates whether the geometry contains Z coordinate values."
        },
        "rings": {
          "type": "array",
          "description": "Represents an array of rings. Each ring is an array of points.",
          "items": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "number"
              },
              "minItems": 2,
              "maxItems": 4
            },
            "minItems": 3
          }
        },
        "spatialReference": {
          "type": "object",
          "description": "The spatial reference can be defined using a well-known ID (WKID) or well-known text (WKT).",
          "$ref": "#/definitions/spatialReference_schema.json"
        }
      },
      "required": [
        "rings"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "polygonGeometry",
            "code": {
              "geometry": {
                "rings": [
                  [
                    [
                      -97.06138,
                      32.837
                    ],
                    [
                      -97.06133,
                      32.836
                    ],
                    [
                      -97.06124,
                      32.834
                    ],
                    [
                      -97.06127,
                      32.832
                    ],
                    [
                      -97.06138,
                      32.837
                    ]
                  ],
                  [
                    [
                      -97.06326,
                      32.759
                    ],
                    [
                      -97.06298,
                      32.755
                    ],
                    [
                      -97.06153,
                      32.749
                    ],
                    [
                      -97.06326,
                      32.759
                    ]
                  ]
                ],
                "spatialReference": {
                  "wkid": 4326
                }
              }
            }
          }
        ]
      }
    },
    "polyline_geometry_schema.json": {
      "title": "polylineGeometry",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Contains an array of paths and a spatialReference.",
      "properties": {
        "hasM": {
          "type": "boolean",
          "description": "Indicates whether the geometry contains M coordinate values."
        },
        "hasZ": {
          "type": "boolean",
          "description": "Indicates whether the geometry contains Z coordinate values."
        },
        "paths": {
          "type": "array",
          "description": "Three nested array levels describing a polyline. The first level describes individual paths; the second describes the points of these paths; and the third gives the coordinates of the points.",
          "items": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "number"
              },
              "minItems": 2,
              "maxItems": 4
            },
            "minItems": 2
          }
        },
        "spatialReference": {
          "type": "object",
          "description": "The spatial reference can be defined using a well-known ID (WKID) or well-known text (WKT).",
          "$ref": "#/definitions/spatialReference_schema.json"
        }
      },
      "required": [
        "paths"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "polylineGeometry",
            "code": {
              "geometry": {
                "paths": [
                  [
                    [
                      -97.06138,
                      32.837
                    ],
                    [
                      -97.06133,
                      32.836
                    ],
                    [
                      -97.06124,
                      32.834
                    ],
                    [
                      -97.06127,
                      32.832
                    ]
                  ],
                  [
                    [
                      -97.06326,
                      32.759
                    ],
                    [
                      -97.06298,
                      32.755
                    ]
                  ]
                ],
                "spatialReference": {
                  "wkid": 4326
                }
              }
            }
          }
        ]
      }
    },
    "symbol3D_schema.json": {
      "title": "Symbol3D",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Symbol3D is the base class for all 3D symbols. It is used to render 2D Point, Polyline, and Polygon features in a FeatureLayer and 3D mesh features in a SceneLayer. All 3D symbols must be used in a SceneView instance; there is no support for 3D rendering in MapViews.",
      "oneOf": [
        {
          "$ref": "#/definitions/lineSymbol3D_schema.json"
        },
        {
          "$ref": "#/definitions/meshSymbol3D_schema.json"
        },
        {
          "$ref": "#/definitions/pointSymbol3D_schema.json"
        },
        {
          "$ref": "#/definitions/polygonSymbol3D_schema.json"
        },
        {
          "$ref": "#/definitions/styleSymbolReference_schema.json"
        }
      ]
    },
    "lineSymbol3D_schema.json": {
      "title": "LineSymbol3D",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "LineSymbol3D is used to render features with Polyline geometry in a 3D SceneView.",
      "properties": {
        "styleOrigin": {
          "$ref": "#/definitions/styleOrigin_schema.json"
        },
        "symbolLayers": {
          "type": "array",
          "description": "A Collection of Symbol3DLayer objects used to visualize the graphic or feature.",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/lineSymbol3DLayer_schema.json"
              },
              {
                "$ref": "#/definitions/pathSymbol3DLayer_schema.json"
              }
            ]
          }
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used.",
          "enum": [
            "LineSymbol3D"
          ]
        }
      },
      "required": [
        "symbolLayers",
        "type"
      ],
      "additionalProperties": false
    },
    "styleOrigin_schema.json": {
      "title": "styleOrigin",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The origin of the style from which the symbol was originally referenced. A reference to the style origin can be either by styleName or by styleUrl (but not both). It may be used to understand where a symbol was originally sourced from, but does not affect actual appearance or rendering of the symbol.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Identifies a symbol in the style by name."
        },
        "styleName": {
          "type": "string",
          "description": "A registered web style name, such as `EsriThematicShapesStyle`"
        },
        "styleUrl": {
          "description": "URL to a style definition.",
          "oneOf": [
            {
              "type": "string",
              "format": "uri",
              "description": "An absolute URL"
            },
            {
              "type": "string",
              "description": "A relative path starting with ./",
              "pattern": "^\\./.+$"
            }
          ]
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "styleName"
          ]
        },
        {
          "required": [
            "name",
            "styleUrl"
          ]
        }
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "styleOrigin",
            "schema": "pointSymbol3D_schema.json",
            "code": {
              "symbol": {
                "styleOrigin": {
                  "styleName": "EsriThematicTreesStyle",
                  "name": "Frangula"
                },
                "type": "PointSymbol3D",
                "symbolLayers": [
                  {
                    "type": "Object",
                    "resource": {
                      "href": "http://static.arcgis.com/arcgis/styleItems/ThematicTrees/web/resource/FrangulaAlnus.json"
                    },
                    "height": 100,
                    "material": {
                      "color": [
                        255,
                        0,
                        0
                      ]
                    }
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "lineSymbol3DLayer_schema.json": {
      "title": "LineSymbol3DLayer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "LineSymbol3DLayer renders Polyline geometries using a flat 2D line with a LineSymbol3D in a 3D SceneView.",
      "properties": {
        "enable": {
          "type": "boolean"
        },
        "material": {
          "$ref": "#/definitions/material_schema.json"
        },
        "size": {
          "type": "number",
          "description": "Line width in points, positive only",
          "minimum": 0
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used.",
          "enum": [
            "Line"
          ]
        }
      },
      "required": [
        "size",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Line SymbolLayer",
            "code": {
              "symbolLayers": [
                {
                  "type": "Line",
                  "material": {
                    "color": [
                      255,
                      0,
                      0
                    ]
                  },
                  "size": 12
                }
              ]
            }
          }
        ]
      }
    },
    "material_schema.json": {
      "title": "Material",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The material used to shade the geometry.",
      "properties": {
        "color": {
          "$ref": "#/definitions/color_schema.json"
        },
        "colorMixMode": {
          "type": "string",
          "description": "Controls how symbolLayer or visualVariable color is applied onto the underlying geometry color/texture. This property only applies to FillSymbol3DLayer within MeshSymbol3D.\u003cbr\u003e\u003cul\u003e\u003cli\u003e`tint`: the feature\u0027s appearance (in terms of color) should be altered to match the symbol / visual variable color.\u003c/li\u003e\u003cli\u003e`replace`: the feature\u0027s color is replaced with the symbol / visual variable color.\u003c/li\u003e\u003cli\u003e`multiply`: the feature\u0027s color is multiplied with the symbol color.\u003c/li\u003e\u003c/ul\u003e",
          "enum": [
            "tint",
            "replace",
            "multiply"
          ],
          "default": "tint"
        },
        "transparency": {
          "type": "integer",
          "minimum": 0,
          "maximum": 100
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "material",
            "code": {
              "material": {
                "color": [
                  255,
                  0,
                  0
                ],
                "transparency": 20,
                "colorMixMode": "tint"
              }
            }
          }
        ]
      }
    },
    "color_schema.json": {
      "title": "color",
      "type": "array",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Color is represented as a three or four-element array. The four elements represent values for red, green, blue, and alpha in that order. Values range from 0 through 255. If color is undefined for a symbol, the color value is null.",
      "items": {
        "type": "integer",
        "minimum": 0,
        "maximum": 255
      },
      "minItems": 3,
      "maxItems": 4,
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "color",
            "code": {
              "color": [
                13,
                38,
                68,
                255
              ]
            }
          }
        ]
      }
    },
    "pathSymbol3DLayer_schema.json": {
      "title": "PathSymbol3DLayer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "PathSymbol3DLayer renders Polyline geometries using a volumetric 3D tube with a LineSymbol3D in a SceneView.",
      "properties": {
        "enable": {
          "type": "boolean"
        },
        "material": {
          "$ref": "#/definitions/material_schema.json"
        },
        "size": {
          "type": "number",
          "description": "Path size (diameter) in meters, positive only",
          "minimum": 0
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used.",
          "enum": [
            "Path"
          ]
        },
        "width": {
          "type": "number",
          "description": "Path width in meters"
        }
      },
      "oneOf": [
        {
          "required": [
            "type",
            "size"
          ]
        },
        {
          "required": [
            "type",
            "width"
          ]
        }
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Path SymbolLayer",
            "code": {
              "symbolLayers": [
                {
                  "type": "Path",
                  "material": {
                    "color": [
                      255,
                      0,
                      0
                    ]
                  },
                  "size": 12
                }
              ]
            }
          }
        ]
      }
    },
    "meshSymbol3D_schema.json": {
      "title": "MeshSymbol3D",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "MeshSymbol3D is used to render 3D mesh features in a SceneLayer in a 3D SceneView.",
      "properties": {
        "styleOrigin": {
          "$ref": "#/definitions/styleOrigin_schema.json"
        },
        "symbolLayers": {
          "type": "array",
          "description": "A Collection of Symbol3DLayer objects used to visualize the graphic or feature.",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/fillSymbol3DLayer_schema.json"
              }
            ]
          }
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used",
          "enum": [
            "MeshSymbol3D"
          ]
        }
      },
      "required": [
        "symbolLayers",
        "type"
      ],
      "additionalProperties": false
    },
    "fillSymbol3DLayer_schema.json": {
      "title": "FillSymbol3DLayer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "FillSymbol3DLayer is used to render the surfaces of flat 2D Polygon geometries and 3D volumetric meshes in a SceneView.",
      "properties": {
        "edges": {
          "type": "object",
          "description": "Specifies an edge visualization style. Only affects MeshSymbol3D.",
          "$ref": "#/definitions/edges_schema.json"
        },
        "enable": {
          "type": "boolean"
        },
        "material": {
          "$ref": "#/definitions/material_schema.json"
        },
        "outline": {
          "$ref": "#/definitions/outline_schema.json"
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used.",
          "enum": [
            "Fill"
          ]
        }
      },
      "required": [
        "material",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Fill SymbolLayer",
            "code": {
              "symbolLayers": [
                {
                  "type": "Fill",
                  "material": {
                    "color": [
                      255,
                      0,
                      0
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "edges_schema.json": {
      "title": "Edges",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Edges describe additional styles applied to visually important edges of 3D objects.",
      "oneOf": [
        {
          "$ref": "#/definitions/sketchEdges_schema.json"
        },
        {
          "$ref": "#/definitions/solidEdges_schema.json"
        }
      ]
    },
    "sketchEdges_schema.json": {
      "title": "Sketch Edges",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The sketch edge rendering configuration of a symbol layer. Edges of type `sketch` are rendered with a hand-drawn look in mind.",
      "properties": {
        "color": {
          "$ref": "#/definitions/color_schema.json"
        },
        "extensionLength": {
          "type": "number",
          "description": "A size in points by which to extend edges beyond their original end points."
        },
        "size": {
          "type": "number",
          "description": "Edge size in points, positive only",
          "minimum": 0
        },
        "transparency": {
          "type": "integer",
          "description": "The value has to lie between `100` (full transparency) and `0` (full opacity).",
          "minimum": 0,
          "maximum": 100
        },
        "type": {
          "type": "string",
          "description": "The type of edge visualization.",
          "enum": [
            "sketch"
          ]
        }
      },
      "required": [
        "color",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "edges",
            "code": {
              "edges": {
                "type": "sketch",
                "color": [
                  255,
                  0,
                  0
                ],
                "size": 0.75,
                "transparency": 10,
                "extensionLength": 5
              }
            }
          }
        ]
      }
    },
    "solidEdges_schema.json": {
      "title": "Solid Edges",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The solid edge rendering configuration of a symbol layer. Edges of type `solid` are rendered in a single color, unaffected by scene lighting.",
      "properties": {
        "color": {
          "$ref": "#/definitions/color_schema.json"
        },
        "extensionLength": {
          "type": "number",
          "description": "A size in points by which to extend edges beyond their original end points."
        },
        "size": {
          "type": "number",
          "description": "Edge size in points, positive only",
          "minimum": 0
        },
        "transparency": {
          "type": "integer",
          "description": "The value has to lie between `100` (full transparency) and `0` (full opacity).",
          "minimum": 0,
          "maximum": 100
        },
        "type": {
          "type": "string",
          "description": "The type of edge visualization.",
          "enum": [
            "solid"
          ]
        }
      },
      "required": [
        "color",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "edges",
            "code": {
              "edges": {
                "type": "solid",
                "color": [
                  255,
                  0,
                  0
                ],
                "size": 0.75,
                "transparency": 10,
                "extensionLength": 5
              }
            }
          }
        ]
      }
    },
    "outline_schema.json": {
      "title": "Outline",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The outline of the symbol layer.",
      "properties": {
        "color": {
          "$ref": "#/definitions/color_schema.json"
        },
        "size": {
          "type": "number",
          "description": "Outline size in points, positive only",
          "minimum": 0
        },
        "transparency": {
          "type": "integer",
          "description": "The value has to lie between `100` (full transparency) and `0` (full opacity).",
          "minimum": 0,
          "maximum": 100
        }
      },
      "required": [
        "color",
        "size"
      ],
      "additionalProperties": false
    },
    "pointSymbol3D_schema.json": {
      "title": "PointSymbol3D",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "PointSymbol3D is used to render features with Point geometry in a 3D SceneView.",
      "properties": {
        "callout": {
          "$ref": "#/definitions/callout_schema.json"
        },
        "styleOrigin": {
          "$ref": "#/definitions/styleOrigin_schema.json"
        },
        "symbolLayers": {
          "type": "array",
          "description": "A Collection of Symbol3DLayer objects used to visualize the graphic or feature.",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/iconSymbol3DLayer_schema.json"
              },
              {
                "$ref": "#/definitions/objectSymbol3DLayer_schema.json"
              }
            ]
          }
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used",
          "enum": [
            "PointSymbol3D"
          ]
        },
        "verticalOffset": {
          "$ref": "#/definitions/verticalOffset_schema.json"
        }
      },
      "required": [
        "symbolLayers",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Point Symbol 3D",
            "code": {
              "symbol": {
                "type": "PointSymbol3D",
                "symbolLayers": [
                  {
                    "width": 30000,
                    "height": 160000,
                    "resource": {
                      "primitive": "cylinder"
                    },
                    "type": "Object",
                    "material": {
                      "color": [
                        0,
                        255,
                        0
                      ]
                    }
                  }
                ]
              }
            }
          },
          {
            "title": "Icon Point Symbol with verticalOffset and leader line callout",
            "code": {
              "symbol": {
                "type": "PointSymbol3D",
                "symbolLayers": [
                  {
                    "size": 16,
                    "resource": {
                      "primitive": "circle"
                    },
                    "type": "Icon",
                    "material": {
                      "color": [
                        0,
                        255,
                        0
                      ]
                    }
                  }
                ],
                "callout": {
                  "type": "line",
                  "color": [
                    255,
                    255,
                    255
                  ],
                  "size": 0.75,
                  "border": {
                    "color": [
                      50,
                      50,
                      50
                    ]
                  }
                },
                "verticalOffset": {
                  "screenLength": 100,
                  "maxWorldLength": 600,
                  "minWorldLength": 10
                }
              }
            }
          }
        ]
      }
    },
    "callout_schema.json": {
      "title": "Callout",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Callout configuration for a symbol.",
      "properties": {
        "border": {
          "$ref": "#/definitions/border_schema.json"
        },
        "color": {
          "description": "The color of the line.",
          "$ref": "#/definitions/color_schema.json"
        },
        "size": {
          "type": "number",
          "description": "The width of the line in points.",
          "minimum": 0
        },
        "transparency": {
          "type": "integer",
          "description": "A value between `100` (full transparency) and `0` (full opacity).",
          "minimum": 0,
          "maximum": 100,
          "default": 0
        },
        "type": {
          "type": "string",
          "description": "The type of the callout. A callout of type `line` connects an offset symbol or label with its location.",
          "enum": [
            "line"
          ]
        }
      },
      "required": [
        "color",
        "size",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "additionalInformation": "[Callout3D](https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-callouts-Callout3D.html) in ArcGIS API for JavaScript.",
        "examples": [
          {
            "title": "leader line",
            "code": {
              "callout": {
                "type": "line",
                "size": 0.75,
                "color": [
                  255,
                  255,
                  255
                ],
                "transparency": 20,
                "border": {
                  "color": [
                    50,
                    50,
                    50
                  ],
                  "transparency": 50
                }
              }
            }
          }
        ]
      }
    },
    "border_schema.json": {
      "title": "border",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Optional border on the line that is used to improve the contrast of the line color against various background colors.",
      "properties": {
        "color": {
          "$ref": "#/definitions/color_schema.json"
        },
        "transparency": {
          "type": "integer",
          "description": "A value between `100` (full transparency) and `0` (full opacity).",
          "minimum": 0,
          "maximum": 100,
          "default": 0
        }
      },
      "required": [
        "color"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "border",
            "code": {
              "border": {
                "color": [
                  255,
                  255,
                  255
                ],
                "transparency": 50
              }
            }
          }
        ]
      }
    },
    "iconSymbol3DLayer_schema.json": {
      "title": "IconSymbol3DLayer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "IconSymbol3DLayer is used to render Point geometries using a flat 2D icon (e.g. a circle) with a PointSymbol3D in a SceneView.",
      "properties": {
        "anchor": {
          "type": "string",
          "enum": [
            "center",
            "left",
            "right",
            "top",
            "bottom",
            "topLeft",
            "topRight",
            "bottomLeft",
            "bottomRight"
          ],
          "default": "center"
        },
        "enable": {
          "type": "boolean"
        },
        "material": {
          "$ref": "#/definitions/material_schema.json"
        },
        "outline": {
          "$ref": "#/definitions/outline_schema.json"
        },
        "resource": {
          "$ref": "#/definitions/iconSymbol3DLayer_resource_schema.json"
        },
        "size": {
          "type": "number",
          "description": "Icon size in points, positive only",
          "minimum": 0
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used.",
          "enum": [
            "Icon"
          ]
        }
      },
      "required": [
        "size",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Icon SymbolLayer",
            "code": {
              "symbolLayers": [
                {
                  "type": "Icon",
                  "resource": {
                    "primitive": "kite"
                  },
                  "material": {
                    "color": [
                      255,
                      255,
                      255
                    ]
                  },
                  "size": 12,
                  "anchor": "bottom",
                  "outline": {
                    "size": 1,
                    "color": [
                      0,
                      0,
                      0
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "iconSymbol3DLayer_resource_schema.json": {
      "title": "IconSymbol3DLayer Resource",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The shape (primitive) or image URL (href) used to visualize the features.",
      "properties": {
        "dataURI": {
          "type": "string",
          "description": "an image encoded as base64 string, starting with `data:image/`",
          "pattern": "^data:image/(.|\\n|\\r)+$"
        },
        "href": {
          "description": "URL to the returned image.",
          "oneOf": [
            {
              "type": "string",
              "description": "An absolute URL",
              "pattern": "^https?://.+$"
            },
            {
              "type": "string",
              "description": "A relative path starting with ./",
              "pattern": "^\\./.+$"
            }
          ]
        },
        "primitive": {
          "type": "string",
          "description": "Specifies the type of symbol used.",
          "enum": [
            "circle",
            "square",
            "cross",
            "x",
            "kite"
          ]
        }
      },
      "oneOf": [
        {
          "required": [
            "primitive"
          ]
        },
        {
          "required": [
            "href"
          ]
        },
        {
          "required": [
            "dataURI"
          ]
        }
      ],
      "additionalProperties": false
    },
    "objectSymbol3DLayer_schema.json": {
      "title": "ObjectSymbol3DLayer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "ObjectSymbol3DLayer is used to render Point geometries using a volumetric 3D shape (e.g., a sphere or cylinder) with a Symbol3D in a SceneView.",
      "properties": {
        "anchor": {
          "type": "string",
          "description": "The positioning of the object relative to the geometry.",
          "enum": [
            "center",
            "bottom",
            "origin",
            "top"
          ],
          "default": "origin"
        },
        "depth": {
          "type": "number",
          "description": "Object depth in meters, positive only",
          "minimum": 0
        },
        "enable": {
          "type": "boolean"
        },
        "heading": {
          "type": "number",
          "description": "Rotation angle around Z axis in degrees. At 0 degrees, the model points in the direction of the Y-axis. Positive values indicate clockwise rotation (when looked at from the top). [Detailed description](static/objectSymbolLayerOrientation.md)."
        },
        "height": {
          "type": "number",
          "description": "Object height in meters, positive only",
          "minimum": 0
        },
        "material": {
          "$ref": "#/definitions/material_schema.json"
        },
        "resource": {
          "$ref": "#/definitions/objectSymbol3DLayer_resource_schema.json"
        },
        "roll": {
          "type": "number",
          "description": "Rotation angle around Y axis in degrees. At 0 degrees, the model is level. A positive value lifts the left part and lowers the right part of the model. [Detailed description](static/objectSymbolLayerOrientation.md)."
        },
        "tilt": {
          "type": "number",
          "description": "Rotation angle around X axis in degrees. At 0 degrees, the model is level. A positive value lifts the front and lowers the back of the model. [Detailed description](static/objectSymbolLayerOrientation.md)."
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used.",
          "enum": [
            "Object"
          ]
        },
        "width": {
          "type": "number",
          "description": "Object width in meters, positive only",
          "minimum": 0
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "additionalInformation": "[Anchor and `origin`](https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-ObjectSymbol3DLayer.html#anchor) in ArcGIS API for JavaScript.",
        "examples": [
          {
            "title": "Object Symbol",
            "code": {
              "symbolLayers": [
                {
                  "type": "Object",
                  "resource": {
                    "primitive": "sphere"
                  },
                  "width": 50000,
                  "height": 50000,
                  "material": {
                    "color": [
                      128,
                      255,
                      0
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Object Symbol with 3-axis rotation",
            "code": {
              "symbolLayers": [
                {
                  "type": "Object",
                  "resource": {
                    "primitive": "diamond"
                  },
                  "width": 50000,
                  "height": 50000,
                  "material": {
                    "color": [
                      128,
                      255,
                      0
                    ]
                  },
                  "heading": 12,
                  "tilt": 10,
                  "roll": 5
                }
              ]
            }
          }
        ]
      }
    },
    "objectSymbol3DLayer_resource_schema.json": {
      "title": "ObjectSymbol3DLayer Resource",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The primitive shape (primitive) or external 3D model (href) used to visualize the points.",
      "properties": {
        "href": {
          "oneOf": [
            {
              "type": "string",
              "description": "An absolute URL",
              "pattern": "^https?://.+$"
            },
            {
              "type": "string",
              "description": "A relative path starting with ./",
              "pattern": "^\\./.+$"
            }
          ]
        },
        "primitive": {
          "type": "string",
          "enum": [
            "sphere",
            "cylinder",
            "cube",
            "cone",
            "invertedCone",
            "diamond",
            "tetrahedron"
          ]
        }
      },
      "oneOf": [
        {
          "required": [
            "primitive"
          ]
        },
        {
          "required": [
            "href"
          ]
        }
      ],
      "additionalProperties": false
    },
    "verticalOffset_schema.json": {
      "title": "verticalOffset",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Shifts the symbol along the vertical world axis by a given length. The length is set in screen space units.",
      "properties": {
        "maxWorldLength": {
          "type": "number",
          "description": "The maximum vertical symbol lift in world units. It acts as an upper bound to avoid lift becoming too big."
        },
        "minWorldLength": {
          "type": "number",
          "description": "The minimum vertical symbol lift in world units. It acts as a lower bound to avoid lift becoming too small.",
          "default": 0
        },
        "screenLength": {
          "type": "number",
          "description": "Maximal screen length of lift in points."
        }
      },
      "required": [
        "screenLength"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "verticalOffset",
            "code": {
              "verticalOffset": {
                "screenLength": 100,
                "maxWorldLength": 600,
                "minWorldLength": 10
              }
            }
          }
        ]
      }
    },
    "polygonSymbol3D_schema.json": {
      "title": "PolygonSymbol3D",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "PolygonSymbol3D is used to render features with Polygon geometry in a 3D SceneView. Polygon features may also be rendered as points with icons or objects at the centroid of each polygon.",
      "properties": {
        "styleOrigin": {
          "$ref": "#/definitions/styleOrigin_schema.json"
        },
        "symbolLayers": {
          "type": "array",
          "description": "A Collection of Symbol3DLayer objects used to visualize the graphic or feature.",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/fillSymbol3DLayer_schema.json"
              },
              {
                "$ref": "#/definitions/extrudeSymbol3DLayer_schema.json"
              },
              {
                "$ref": "#/definitions/iconSymbol3DLayer_schema.json"
              },
              {
                "$ref": "#/definitions/objectSymbol3DLayer_schema.json"
              },
              {
                "description": "\u003cem\u003eDeprecated\u003c/em\u003e, use [fillSymbol3DLayer with outline](fillSymbol3DLayer.md) instead",
                "$ref": "#/definitions/lineSymbol3DLayer_schema.json"
              }
            ]
          }
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used.",
          "enum": [
            "PolygonSymbol3D"
          ]
        }
      },
      "required": [
        "symbolLayers",
        "type"
      ],
      "additionalProperties": false
    },
    "extrudeSymbol3DLayer_schema.json": {
      "title": "ExtrudeSymbol3DLayer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "ExtrudeSymbol3DLayer is used to render Polygon geometries by extruding them upward from the ground, creating a 3D volumetric object.",
      "properties": {
        "edges": {
          "type": "object",
          "description": "Specifies an edge visualization style.",
          "$ref": "#/definitions/edges_schema.json"
        },
        "enable": {
          "type": "boolean"
        },
        "material": {
          "$ref": "#/definitions/material_schema.json"
        },
        "size": {
          "type": "number",
          "description": "Extrusion height in meters."
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used.",
          "enum": [
            "Extrude"
          ]
        }
      },
      "required": [
        "size",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Extrude SymbolLayer",
            "code": {
              "symbolLayer": {
                "type": "Extrude",
                "material": {
                  "color": [
                    255,
                    0,
                    0
                  ]
                },
                "size": 250
              }
            }
          }
        ]
      }
    },
    "styleSymbolReference_schema.json": {
      "title": "StyleSymbolReference",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The StyleSymbolReference is used to reference a symbol from a portal styleItem",
      "properties": {
        "name": {
          "type": "string",
          "description": "Identifies a symbol in the style by name."
        },
        "styleName": {
          "type": "string",
          "description": "A registered web style name, such as `EsriThematicTreesStyle`"
        },
        "styleUrl": {
          "type": "string",
          "description": "URL to a style definition."
        },
        "type": {
          "type": "string",
          "description": "The type of the symbol",
          "enum": [
            "styleSymbolReference"
          ]
        }
      },
      "oneOf": [
        {
          "required": [
            "type",
            "name",
            "styleUrl"
          ]
        },
        {
          "required": [
            "type",
            "name",
            "styleName"
          ]
        }
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "code": {
              "symbol": {
                "type": "styleSymbolReference",
                "styleName": "EsriThematicTreesStyle",
                "name": "Frangula"
              }
            }
          }
        ]
      }
    },
    "field_schema.json": {
      "title": "field",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Contains information about an attribute field.",
      "properties": {
        "alias": {
          "type": "string",
          "description": "A string defining the field alias."
        },
        "domain": {
          "type": "object",
          "description": "The domain objects if applicable.",
          "$ref": "#/definitions/domain_schema.json"
        },
        "editable": {
          "type": "boolean",
          "description": "A Boolean defining whether this field is editable."
        },
        "exactMatch": {
          "type": "boolean",
          "description": "A Boolean defining whether or not the field is an exact match."
        },
        "length": {
          "type": "integer",
          "description": "A number defining how many characters are allowed in a string field."
        },
        "name": {
          "type": "string",
          "description": "A string defining the field name."
        },
        "nullable": {
          "type": "boolean",
          "description": "A Boolean defining whether this field can have a null value."
        },
        "type": {
          "type": "string",
          "description": "A string defining the field type.",
          "enum": [
            "esriFieldTypeBlob",
            "esriFieldTypeDate",
            "esriFieldTypeDouble",
            "esriFieldTypeGeometry",
            "esriFieldTypeGlobalID",
            "esriFieldTypeGUID",
            "esriFieldTypeInteger",
            "esriFieldTypeOID",
            "esriFieldTypeRaster",
            "esriFieldTypeSingle",
            "esriFieldTypeSmallInteger",
            "esriFieldTypeString",
            "esriFieldTypeXML"
          ]
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "field",
            "code": {
              "field": {
                "alias": "Postcode",
                "name": "relationships/2/Postcode",
                "editable": false,
                "type": "esriFieldTypeString"
              }
            }
          }
        ]
      }
    },
    "domain_schema.json": {
      "title": "domain",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Domains specify the set of valid values for a field. The links below are the available domains.",
      "oneOf": [
        {
          "$ref": "#/definitions/codedValue_domain_schema.json"
        },
        {
          "$ref": "#/definitions/inherited_domain_schema.json"
        },
        {
          "$ref": "#/definitions/range_domain_schema.json"
        }
      ]
    },
    "codedValue_domain_schema.json": {
      "title": "codedValue",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The coded value domain includes both the actual value that is stored in a database and a description of what the code value means.",
      "properties": {
        "codedValues": {
          "type": "array",
          "description": "A set of valid values with unique names.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/codedValue_schema.json"
          },
          "uniqueItems": true
        },
        "name": {
          "type": "string",
          "description": "The domain name."
        },
        "type": {
          "type": "string",
          "description": "String value representing the domain type.",
          "enum": [
            "codedValue"
          ]
        }
      },
      "required": [
        "codedValues",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "codedValue",
            "code": {
              "codedValue": {
                "type": "codedValue",
                "name": "Material",
                "codedValues": [
                  {
                    "name": "Aluminum",
                    "code": "AL"
                  },
                  {
                    "name": "Copper",
                    "code": "CU"
                  },
                  {
                    "name": "Steel",
                    "code": "STEL"
                  },
                  {
                    "name": "Not Applicable",
                    "code": "NA"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "codedValue_schema.json": {
      "title": "codedValue",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "A set of valid coded values with unique names.",
      "properties": {
        "code": {
          "type": "string",
          "description": "String value indicating which unqiue code is used to identify the feature attribute."
        },
        "name": {
          "type": "string",
          "description": "A string value given for the coded domain."
        }
      },
      "required": [
        "code",
        "name"
      ],
      "additionalProperties": false
    },
    "inherited_domain_schema.json": {
      "title": "inheritedDomain",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "This domain applies to domains on subtypes. It implies that the domain for a field at the subtype level is the same as the domain for the field at the layer level.",
      "properties": {
        "type": {
          "type": "string",
          "description": "String value representing the domain type.",
          "enum": [
            "inherited"
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "range_domain_schema.json": {
      "title": "rangeDomain",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Range domain specifies a range of valid values for a field",
      "properties": {
        "name": {
          "type": "string",
          "description": "The domain name."
        },
        "range": {
          "type": "array",
          "description": "The first element is the minValue and the second element is the maxValue.",
          "items": {
            "type": "number"
          },
          "minItems": 2,
          "maxItems": 2,
          "uniqueItems": true
        },
        "type": {
          "type": "string",
          "description": "String value representing the domain type.",
          "enum": [
            "range"
          ]
        }
      },
      "required": [
        "range",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "rangeDomain",
            "code": {
              "domain": {
                "type": "range",
                "name": "Measured Length",
                "range": [
                  1,
                  10000
                ]
              }
            }
          }
        ]
      }
    },
    "layerDefinition_schema.json": {
      "title": "layerDefinition",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "An object that defines the attribute schema and drawing information for a layer drawn using client-side graphics.",
      "properties": {
        "allowGeometryUpdates": {
          "type": "boolean",
          "description": "Boolean value indicating whether the geometry of the features in the layer can be edited."
        },
        "capabilities": {
          "type": "string",
          "description": "A comma separated list of supported capabilities, e.g. `Query,Editing`."
        },
        "copyrightText": {
          "type": "string",
          "description": "String value for the copyright text information for the layer."
        },
        "currentVersion": {
          "type": "number",
          "description": "Numeric value indicating the server version of the layer."
        },
        "defaultVisibility": {
          "type": "boolean",
          "description": "Boolean value indicating whether the layer\u0027s visibility is turned on."
        },
        "definitionExpression": {
          "type": "string",
          "description": "SQL-based definition expression string that narrows the data to be displayed in the layer."
        },
        "description": {
          "type": "string",
          "description": "String value of the layer as defined in the map service."
        },
        "displayField": {
          "type": "string",
          "description": "A string value that summarizes the feature."
        },
        "drawingInfo": {
          "type": "object",
          "description": "Contains drawing, labeling, and transparency information.",
          "$ref": "#/definitions/drawingInfo_schema.json"
        },
        "elevationInfo": {
          "type": "object",
          "$ref": "#/definitions/elevationInfo_schema.json"
        },
        "extent": {
          "description": "An object defining the rectangular area.",
          "oneOf": [
            {
              "$ref": "#/definitions/extent_schema.json"
            },
            {
              "type": "null"
            }
          ]
        },
        "featureReduction": {
          "type": "object",
          "description": "An object that specifies how features are reduced or aggregated, with the goal of decluttering the view or presenting the user with an aggregate visualization. If unset, every feature is rendered individually.",
          "$ref": "#/definitions/featureReduction_select_schema.json"
        },
        "fields": {
          "type": "array",
          "description": "An array of field objects containing information about the attribute fields for the feature collection or layer.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/field_schema.json"
          },
          "uniqueItems": true
        },
        "filters": {
          "type": "array",
          "description": "Filters for PointCloud layers",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pointCloudFilter_schema.json"
          }
        },
        "geometryType": {
          "type": "string",
          "description": "A string defining the type of geometry. Possible geometry types are: `esriGeometryPoint`, `esriGeometryMultipoint`, `esriGeometryPolyline`, `esriGeometryPolygon`, and `esriGeometryEnvelope`."
        },
        "globalIdField": {
          "type": "string",
          "description": "The unique identifier for a feature or table row within a geodatabase."
        },
        "hasAttachments": {
          "type": "boolean",
          "description": "Indicates whether attachments should be loaded for the layer."
        },
        "hasM": {
          "type": "boolean",
          "description": "Boolean value indicating whether layer has M values."
        },
        "hasStaticData": {
          "type": "boolean",
          "description": "Boolean value indicating whether data changes. True if it does not."
        },
        "hasZ": {
          "type": "boolean",
          "description": "Boolean value indicating whether layer has Z values."
        },
        "htmlPopupType": {
          "type": "string",
          "description": "String value indicating the HTML popup type.",
          "enum": [
            "esriServerHTMLPopupTypeNone",
            "esriServerHTMLPopupTypeAsURL",
            "esriServerHTMLPopupTypeAsHTMLText"
          ]
        },
        "id": {
          "type": "number",
          "description": "The identifier assigned to the layer."
        },
        "isDataVersioned": {
          "type": "boolean",
          "description": "Boolean value indicating whether the data is versioned."
        },
        "maxRecordCount": {
          "type": "number",
          "description": "Numeric value indicating tbe maximum number of records that will be returned at once for a query."
        },
        "maxScale": {
          "type": "number",
          "description": "Represents the maximum scale at which the layer definition will be applied. This does not apply to layers of type: `ArcGISMapServiceLayer`, `ImageServiceVectorLayer` or `ImageServiceLayer`."
        },
        "minScale": {
          "type": "number",
          "description": "Represents the minimum scale at which the layer definition will be applied. This does not apply to layers of type: `ArcGISMapServiceLayer`, `ImageServiceVectorLayer` or `ImageServiceLayer`."
        },
        "name": {
          "type": "string",
          "description": "Contains a unique name for the layer that can be displayed in a legend."
        },
        "objectIdField": {
          "type": "string",
          "description": "Indicates the name of the object ID field in the dataset."
        },
        "overrideSymbols": {
          "type": "boolean",
          "description": "Dictates whether a client can support having an end user modify symbols on individual features."
        },
        "rangeInfos": {
          "type": "array",
          "description": "Indicates range information",
          "items": {
            "type": "object",
            "$ref": "#/definitions/rangeInfo_schema.json"
          },
          "minItems": 1
        },
        "source": {
          "type": "object",
          "description": "An object indicating the layerDefinition\u0027s layer source.",
          "$ref": "#/definitions/source_schema.json"
        },
        "spatialReference": {
          "type": "object",
          "description": "An object containing the WKID or WKT identifying the spatial reference of the layer\u0027s geometry.",
          "$ref": "#/definitions/spatialReference_schema.json"
        },
        "supportedQueryFormats": {
          "type": "string",
          "description": "String value indicating the output formats that are supported in a query."
        },
        "supportsAdvancedQueries": {
          "type": "boolean",
          "description": "Boolean value indicating whether the layer supports orderByFields in a query operation."
        },
        "supportsAttachmentsByUploadId": {
          "type": "boolean",
          "description": "Boolean value indicating whether the layer supports uploading attachments with the Uploads operation. This can then be used in the Add Attachment and Update Attachment operations."
        },
        "supportsCalculate": {
          "type": "boolean",
          "description": "Boolean value indicating whether the layer supports the Calculate REST operation when updating features."
        },
        "supportsRollbackOnFailureParameter": {
          "type": "boolean",
          "description": "Boolean value indicating whether the layer supports rolling back edits made on a feature layer if some of the edits fail."
        },
        "supportsStatistics": {
          "type": "boolean",
          "description": "Boolean value indicating whether feature layer query operations support statistical functions."
        },
        "supportsValidateSql": {
          "type": "boolean",
          "description": "Boolean value indicating whether the validateSQL operation is supported across a feature service layer."
        },
        "type": {
          "type": "string",
          "description": "Indicates whether the layerDefinition applies to a Feature Layer or a Table.",
          "enum": [
            "Feature Layer",
            "Table"
          ],
          "default": "Feature Layer"
        },
        "typeIdField": {
          "type": "string",
          "description": "Contains the name of the field holding the type ID for the features."
        },
        "types": {
          "type": "array",
          "description": "Contains information about an attribute field.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/type_schema.json"
          },
          "uniqueItems": true
        },
        "visibilityField": {
          "type": "string",
          "description": "String value indicating the attribute field that is used to control the visibility of a feature. If applicable, when rendering a feature the client should use this field to control visibility. The field\u0027s values are 0 \u003d do not display, 1 \u003d display."
        }
      },
      "additionalProperties": false
    },
    "drawingInfo_schema.json": {
      "title": "drawingInfo",
      "type": "object",
      "description": "The drawingInfo object contains drawing information for a feature layer.",
      "properties": {
        "labelingInfo": {
          "type": "array",
          "description": "An object defining the properties used for labeling the layer.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/labelingInfo_schema.json"
          }
        },
        "renderer": {
          "type": "object",
          "description": "An object defined which provides the symbology for the layer.",
          "$ref": "#/definitions/renderer_schema.json"
        },
        "transparency": {
          "type": "number",
          "description": "Number value ranging between 0 (no transparency) to 100 (completely transparent).",
          "minimum": 0,
          "maximum": 100
        }
      },
      "additionalProperties": false
    },
    "labelingInfo_schema.json": {
      "title": "labelingInfo",
      "type": "object",
      "description": "The labelingInfo object specifies the label definition for a layer.",
      "properties": {
        "labelExpression": {
          "type": "string",
          "description": "Defines the expression for text of labels. Deprecated on FeatureLayer, Use `labelExpressionInfo` instead."
        },
        "labelExpressionInfo": {
          "type": "object",
          "$ref": "#/definitions/labelExpressionInfo_schema.json"
        },
        "labelPlacement": {
          "type": "string",
          "description": "This string property specifies the label placement with respect to that of its feature. A list of label placement values categorized by feature geometry types.",
          "enum": [
            "esriServerPointLabelPlacementAboveCenter",
            "esriServerPointLabelPlacementBelowCenter",
            "esriServerPointLabelPlacementCenterCenter",
            "esriServerPointLabelPlacementAboveLeft",
            "esriServerPointLabelPlacementBelowLeft",
            "esriServerPointLabelPlacementCenterLeft",
            "esriServerPointLabelPlacementAboveRight",
            "esriServerPointLabelPlacementBelowRight",
            "esriServerPointLabelPlacementCenterRight",
            "esriServerLinePlacementAboveAfter",
            "esriServerLinePlacementAboveStart",
            "esriServerLinePlacementBelowAfter",
            "esriServerLinePlacementBelowStart",
            "esriServerLinePlacementCenterAfter",
            "esriServerLinePlacementCenterStart",
            "esriServerLinePlacementAboveAlong",
            "esriServerLinePlacementAboveEnd",
            "esriServerLinePlacementBelowAlong",
            "esriServerLinePlacementBelowEnd",
            "esriServerLinePlacementCenterAlong",
            "esriServerLinePlacementCenterEnd",
            "esriServerLinePlacementAboveBefore",
            "esriServerLinePlacementBelowBefore",
            "esriServerLinePlacementCenterBefore",
            "esriServerPolygonPlacementAlwaysHorizontal"
          ]
        },
        "maxScale": {
          "type": "number",
          "description": "Represents the maximum scale at which the layer definition will be applied."
        },
        "minScale": {
          "type": "number",
          "description": "Represents the minimum scale at which the layer definition will be applied."
        },
        "name": {
          "type": "string",
          "description": "The name of the label class."
        },
        "symbol": {
          "type": "object",
          "description": "The text symbol used to label.",
          "$ref": "#/definitions/labelSymbol3D_schema.json"
        },
        "useCodedValues": {
          "type": "boolean",
          "description": "Boolean value indicating whether to display the coded values for the specified field name(s)."
        },
        "where": {
          "type": "string",
          "description": "String template used to determine which features to label."
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "labelingInfo",
            "code": {
              "labelingInfo": [
                {
                  "labelExpressionInfo": {
                    "expression": "return $feature[\"state_name\"];"
                  },
                  "useCodedValues": false,
                  "maxScale": 0,
                  "minScale": 0,
                  "labelPlacement": "esriServerPointLabelPlacementAboveLeft",
                  "symbol": {
                    "type": "LabelSymbol3D",
                    "symbolLayers": [
                      {
                        "size": 32,
                        "type": "Text",
                        "material": {
                          "color": [
                            255,
                            255,
                            0
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "labelExpressionInfo_schema.json": {
      "title": "labelExpressionInfo",
      "type": "object",
      "description": "An object that defines an expression for text of labels",
      "properties": {
        "expression": {
          "type": "string",
          "description": "An [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to either a string or a number."
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "labelExpressionInfo",
            "code": {
              "labelExpressionInfo": {
                "expression": "return $feature[\"state_name\"] + \" (arcade)\";"
              }
            }
          }
        ]
      }
    },
    "labelSymbol3D_schema.json": {
      "title": "LabelSymbol3D",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "LabelSymbol3D is used to render labels for features from a FeatureLayer in a 3D SceneView.",
      "properties": {
        "callout": {
          "$ref": "#/definitions/callout_schema.json"
        },
        "symbolLayers": {
          "type": "array",
          "description": "A Collection of Symbol3DLayer objects used to visualize the graphic or feature.",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/textSymbol3DLayer_schema.json"
              }
            ]
          }
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used.",
          "enum": [
            "LabelSymbol3D"
          ]
        },
        "verticalOffset": {
          "$ref": "#/definitions/verticalOffset_schema.json"
        }
      },
      "required": [
        "symbolLayers",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Label Symbol 3D",
            "code": {
              "symbol": {
                "type": "LabelSymbol3D",
                "symbolLayers": [
                  {
                    "size": 12,
                    "type": "Text",
                    "material": {
                      "color": [
                        255,
                        255,
                        0
                      ]
                    }
                  }
                ]
              }
            }
          },
          {
            "title": "Label Symbol 3D with verticalOffset and leader line callout",
            "code": {
              "symbol": {
                "type": "LabelSymbol3D",
                "symbolLayers": [
                  {
                    "size": 12,
                    "type": "Text",
                    "material": {
                      "color": [
                        255,
                        255,
                        0
                      ]
                    }
                  }
                ],
                "callout": {
                  "type": "line",
                  "color": [
                    255,
                    255,
                    255
                  ],
                  "size": 0.75,
                  "border": {
                    "color": [
                      50,
                      50,
                      50
                    ]
                  }
                },
                "verticalOffset": {
                  "screenLength": 100,
                  "maxWorldLength": 600,
                  "minWorldLength": 10
                }
              }
            }
          }
        ]
      }
    },
    "textSymbol3DLayer_schema.json": {
      "title": "TextSymbol3DLayer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Symbol layer for text and font definitions.",
      "properties": {
        "enable": {
          "type": "boolean"
        },
        "font": {
          "$ref": "#/definitions/font_schema.json"
        },
        "halo": {
          "$ref": "#/definitions/halo_schema.json"
        },
        "material": {
          "$ref": "#/definitions/material_schema.json"
        },
        "size": {
          "type": "number",
          "description": "Font size in points, positive only",
          "minimum": 0
        },
        "text": {
          "type": "string",
          "description": "Text content in the label. Typically this property is not set, as text content is read from labeling field."
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used.",
          "enum": [
            "Text"
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "schema": "labelSymbol3D_schema.json",
            "code": {
              "symbol": {
                "type": "LabelSymbol3D",
                "symbolLayers": [
                  {
                    "size": 12,
                    "type": "Text",
                    "material": {
                      "color": [
                        255,
                        255,
                        0
                      ]
                    }
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "font_schema.json": {
      "title": "font",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Font used for text symbols.",
      "properties": {
        "decoration": {
          "type": "string",
          "description": "The text decoration.",
          "enum": [
            "line-through",
            "underline",
            "none"
          ]
        },
        "family": {
          "type": "string",
          "description": "The font family."
        },
        "size": {
          "type": "number",
          "description": "The font size in points."
        },
        "style": {
          "type": "string",
          "description": "The text style.",
          "enum": [
            "italic",
            "normal",
            "oblique"
          ]
        },
        "weight": {
          "type": "string",
          "description": "The text weight.",
          "enum": [
            "bold",
            "bolder",
            "lighter",
            "normal"
          ]
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "font",
            "code": {
              "font": {
                "family": "Arial",
                "size": 12,
                "style": "normal",
                "weight": "bold",
                "decoration": "none"
              }
            }
          }
        ]
      }
    },
    "halo_schema.json": {
      "title": "halo",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Halo definition.",
      "properties": {
        "color": {
          "$ref": "#/definitions/color_schema.json"
        },
        "size": {
          "type": "number",
          "description": "Width of the halo in points."
        },
        "transparency": {
          "type": "integer",
          "description": "A value between `100` (full transparency) and `0` (full opacity).",
          "minimum": 0,
          "maximum": 100,
          "default": 0
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "halo",
            "code": {
              "halo": {
                "size": 2,
                "color": [
                  255,
                  255,
                  0
                ],
                "transparency": 70
              }
            }
          }
        ]
      }
    },
    "renderer_schema.json": {
      "title": "renderer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The renderer object contains the drawing information for the operationalLayer. This is a list of links to all the renderer objects.",
      "oneOf": [
        {
          "$ref": "#/definitions/classBreaksRenderer_schema.json"
        },
        {
          "$ref": "#/definitions/pointCloudRenderers_schema.json"
        },
        {
          "$ref": "#/definitions/rasterRenderers_schema.json"
        },
        {
          "$ref": "#/definitions/simpleRenderer_schema.json"
        },
        {
          "$ref": "#/definitions/uniqueValueFromStyleRenderer_schema.json"
        },
        {
          "$ref": "#/definitions/uniqueValueRenderer_schema.json"
        }
      ]
    },
    "classBreaksRenderer_schema.json": {
      "title": "ClassBreaks Renderer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "A class breaks renderer symbolizes based on the value of some numeric attribute. The classBreakInfo define the values at which the symbology changes.",
      "properties": {
        "authoringInfo": {
          "type": "object",
          "description": "An object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific overridable settings so that next time it is accessed via the UI, their selections are remembered. Non-authoring clients can ignore it.",
          "$ref": "#/definitions/authoringInfo_schema.json"
        },
        "backgroundFillSymbol": {
          "type": "object",
          "description": "Supported only for polygon features.",
          "$ref": "#/definitions/polygonSymbol3D_schema.json"
        },
        "classBreakInfos": {
          "type": "array",
          "description": "Array of classBreakInfo objects.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/classBreakInfo_schema.json"
          }
        },
        "defaultLabel": {
          "type": "string",
          "description": "Label for the default symbol used to draw unspecified values."
        },
        "defaultSymbol": {
          "type": "object",
          "description": "Symbol used when a value cannot be classified.",
          "$ref": "#/definitions/symbol3D_schema.json"
        },
        "field": {
          "type": "string",
          "description": "Attribute field used for renderer."
        },
        "legendOptions": {
          "type": "object",
          "description": "A legend containing one title, which is a string describing the renderer in the legend.",
          "$ref": "#/definitions/rendererLegendOptions_schema.json"
        },
        "minValue": {
          "type": "number",
          "description": "The minimum numeric data value needed to begin class breaks."
        },
        "normalizationField": {
          "type": "string",
          "description": "Used when normalizationType is field. The string value indicating the attribute field by which the data value is normalized."
        },
        "normalizationTotal": {
          "type": "number",
          "description": "Used when normalizationType is percent-of-total, this number property contains the total of all data values."
        },
        "normalizationType": {
          "type": "string",
          "description": "Determine how the data was normalized.",
          "enum": [
            "esriNormalizeByField",
            "esriNormalizeByLog",
            "esriNormalizeByPercentOfTotal"
          ]
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "classBreaks"
          ]
        },
        "valueExpression": {
          "type": "string",
          "description": "An [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to a number."
        },
        "valueExpressionTitle": {
          "type": "string",
          "description": "The title identifying and describing the associated [Arcade](https://developers.arcgis.com/arcade/) expression as defined in the `valueExpression` property."
        },
        "visualVariables": {
          "type": "array",
          "description": "An array of objects used to set rendering properties.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/visualVariable_schema.json"
          }
        }
      },
      "required": [
        "classBreakInfos",
        "type"
      ],
      "additionalProperties": false
    },
    "authoringInfo_schema.json": {
      "title": "authoringInfo",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The authoringInfo is an object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific overridable settings so that next time it is accessed via an authoring client, their selections are remembered. Non-authoring clients can ignore it. Properties for color/size/transparency sliders, theme selection, classification information, and additional properties are saved within this object.",
      "properties": {
        "classificationMethod": {
          "type": "string",
          "description": "Used for classed color or size. The default value is `esriClassifyManual`.",
          "enum": [
            "esriClassifyDefinedInterval",
            "esriClassifyNaturalBreaks",
            "esriClassifyEqualInterval",
            "esriClassifyQuantile",
            "esriClassifyStandardDeviation",
            "esriClassifyManual"
          ],
          "default": "esriClassifyManual"
        },
        "colorRamp": {
          "type": "object",
          "$ref": "#/definitions/colorRamp_schema.json"
        },
        "fields": {
          "type": "array",
          "description": "An array of string values representing field names used for creating predominance renderers.",
          "items": {
            "type": "string"
          }
        },
        "lengthUnit": {
          "type": "string",
          "description": "Unit used in user interfaces to display world/map sizes and distances",
          "enum": [
            "inches",
            "feet",
            "yards",
            "miles",
            "nautical-miles",
            "millimeters",
            "centimeters",
            "decimeters",
            "meters",
            "kilometers",
            "decimal-degrees"
          ]
        },
        "standardDeviationInterval": {
          "type": "number",
          "description": "Use this property if the classificationMethod is `esriClassifyStandardDeviation`.",
          "enum": [
            1,
            0.5,
            0.33,
            0.25
          ]
        },
        "type": {
          "type": "string",
          "description": "Used in case of classed renderers.",
          "enum": [
            "classedSize",
            "classedColor",
            "predominance",
            "univariateColorSize"
          ]
        },
        "visualVariables": {
          "type": "array",
          "description": "An array of visualVariable objects containing additional information needed when authoring the renderer.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/authoringInfo_visualVariable_schema.json"
          }
        }
      },
      "esriDocumentation": {
        "additionalInformation": "The authoringInfo object is not required with a renderer. It is only used if rendering was generated using the Scene Viewer rendering tools. All snippets provided below show a portion of what is contained within `authoringInfo`. Please refer to the sample snippets in the [authoringInfo visual variable](authoringInfo_visualVariable.md) object for additional help.",
        "examples": [
          {
            "title": "Classed Size Renderer (Option 1)",
            "code": {
              "authoringInfo": {
                "type": "classedSize",
                "classificationMethod": "esriClassifyNaturalBreaks"
              }
            }
          },
          {
            "title": "Classed Size Renderer (Option 2)",
            "code": {
              "authoringInfo": {
                "type": "classedSize",
                "classificationMethod": "esriClassifyStandardDeviation",
                "standardDeviationInterval": 0.5
              }
            }
          },
          {
            "title": "Classed Color Renderer (Option 1)",
            "code": {
              "authoringInfo": {
                "type": "classedColor",
                "classificationMethod": "esriClassifyNaturalBreaks"
              }
            }
          },
          {
            "title": "Classed Color Renderer (Option 2)",
            "code": {
              "authoringInfo": {
                "type": "classedColor",
                "classificationMethod": "esriClassifyStandardDeviation",
                "standardDeviationInterval": 0.5
              }
            }
          },
          {
            "title": "Predominance Renderer",
            "code": {
              "authoringInfo": {
                "type": "predominance",
                "fields": [
                  "COST",
                  "DOLLARS",
                  "PRICE"
                ]
              }
            }
          },
          {
            "title": "Univariate Color Size Renderer",
            "code": {
              "authoringInfo": {
                "type": "univariateColorSize",
                "visualVariables": [
                  {
                    "type": "sizeInfo",
                    "minSliderValue": 1,
                    "maxSliderValue": 1000
                  },
                  {
                    "type": "colorInfo",
                    "minSliderValue": 1,
                    "maxSliderValue": 1000,
                    "theme": "high-to-low"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "colorRamp_schema.json": {
      "title": "Color Ramp",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "A colorRamp object is used to specify a range of colors that are applied to a group of symbols.",
      "properties": {
        "algorithm": {
          "type": "string",
          "description": "Algorithm used for calculating the ramp.",
          "enum": [
            "esriHSVAlgorithm",
            "esriCIELabAlgorithm",
            "esriLabLChAlgorithm"
          ]
        },
        "colorRamps": {
          "type": "array",
          "description": "A multipart color ramp is defined by a list of constituent color ramps.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/colorRamp_schema.json"
          }
        },
        "fromColor": {
          "description": "Array representing the initial color to start the ramp from.",
          "$ref": "#/definitions/color_schema.json"
        },
        "toColor": {
          "description": "Array representing the final color to end the ramp with.",
          "$ref": "#/definitions/color_schema.json"
        },
        "type": {
          "type": "string",
          "description": "Value indicating the type of colorRamp.",
          "enum": [
            "algorithmic",
            "multipart"
          ]
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Algorithmic",
            "code": {
              "colorRamp": {
                "type": "algorithmic",
                "fromColor": [
                  115,
                  76,
                  0,
                  255
                ],
                "toColor": [
                  255,
                  25,
                  86,
                  255
                ],
                "algorithm": "esriHSVAlgorithm"
              }
            }
          },
          {
            "title": "Multipart",
            "code": {
              "colorRamp": {
                "type": "multipart",
                "colorRamps": [
                  {
                    "type": "algorithmic",
                    "fromColor": [
                      255,
                      0,
                      0,
                      255
                    ],
                    "toColor": [
                      255,
                      255,
                      0,
                      255
                    ],
                    "algorithm": "esriHSVAlgorithm"
                  },
                  {
                    "type": "algorithmic",
                    "fromColor": [
                      0,
                      255,
                      255,
                      255
                    ],
                    "toColor": [
                      0,
                      0,
                      255,
                      255
                    ],
                    "algorithm": "esriHSVAlgorithm"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "authoringInfo_visualVariable_schema.json": {
      "title": "AuthoringInfo Visual Variable",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "This visual variable is different from `sizeInfo`, `colorInfo`, `transparencyInfo`, and `rotationInfo` as it is an array of visual variables pertaining specifically to authoringInfo and not directly on the [renderer](renderer.md).",
      "properties": {
        "endTime": {
          "description": "A Unix stamp. Both `startTime` or `endTime` can be fields. If this is the case, their names must be different.",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ]
        },
        "field": {
          "type": "string",
          "description": "The attribute field the user chose in the Smart Mapping gallery. Must be the same as in either `startTime` or `endTime`."
        },
        "maxSliderValue": {
          "type": "number",
          "description": "A numeric value indicating the maximum value displayed."
        },
        "minSliderValue": {
          "type": "number",
          "description": "A numeric value indicating the minimum value displayed."
        },
        "startTime": {
          "description": "A Unix time stamp. Both `startTime` or `endTime` can be fields. If this is the case, their names must be different.",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ]
        },
        "style": {
          "type": "string",
          "description": "(This property is used for comparison rendering). It is used to map the ratio between two numbers. It is possible to express that relationship as percentages, simple ratios, or an overall percentage.",
          "enum": [
            "percent",
            "ratio",
            "percentTotal"
          ]
        },
        "theme": {
          "type": "string",
          "description": "Theme to be used only when working with visual variables of type `colorInfo`. Default is `high-to-low`.",
          "enum": [
            "high-to-low",
            "above-and-below",
            "centered-on",
            "extremes"
          ]
        },
        "type": {
          "type": "string",
          "description": "A string value specifying the type of renderer\u0027s visual variable.",
          "enum": [
            "colorInfo",
            "sizeInfo",
            "transparencyInfo",
            "rotationInfo"
          ]
        },
        "units": {
          "type": "string",
          "description": "(This property is used only with age renderers.) Units for startTime and endTime.",
          "enum": [
            "seconds",
            "minutes",
            "hours",
            "days",
            "months",
            "years"
          ]
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Attribute Transparency",
            "description": "Allows displaying features with different levels of opacity.",
            "code": {
              "visualVariables": [
                {
                  "type": "transparencyInfo",
                  "minSliderValue": 0.0003,
                  "maxSliderValue": 23.8951
                }
              ]
            }
          },
          {
            "title": "Continuous Size Renderer",
            "description": "If a layer contains date values, it is possible to use a sequence of proportional symbols to view dates sequentially on a scene.",
            "code": {
              "visualVariables": [
                {
                  "type": "sizeInfo",
                  "minSliderValue": 1,
                  "maxSliderValue": 14928.5396
                }
              ]
            }
          },
          {
            "title": "Continuous Color Renderer",
            "description": "If a layer contains date values, it is possible to use color to view data sequentially from new to old or before and after a key date.",
            "code": {
              "visualVariables": [
                {
                  "type": "colorInfo",
                  "minSliderValue": 1,
                  "maxSliderValue": 14928.5396,
                  "theme": "high-to-low"
                }
              ]
            }
          },
          {
            "title": "Age-Size Renderer",
            "description": "If a layer contains date or time values, it is possible to use a sequence of proportional symbols to view the age of features. Age reflects the length of time (in seconds, minutes, hours, days, months, or years) from a start date or time to an end date or time.",
            "code": {
              "visualVariables": [
                {
                  "type": "sizeInfo",
                  "minSliderValue": -129.2625,
                  "maxSliderValue": 234.7374,
                  "units": "days",
                  "startTime": "DATE",
                  "endTime": 1471970511924,
                  "field": "DATE"
                }
              ]
            }
          },
          {
            "title": "Age-Color Renderer",
            "description": "If a layer contains date or time values, it is possible to use color to represent the age of features. Age reflects the length of time (in seconds, minutes, hours, days, months, or years) from a start date or time to an end date or time.",
            "code": {
              "visualVariables": [
                {
                  "type": "colorInfo",
                  "minSliderValue": -129.2625,
                  "maxSliderValue": 234.7374,
                  "units": "days",
                  "startTime": "DATE",
                  "endTime": 1471970511924,
                  "field": "DATE",
                  "theme": "high-to-low"
                }
              ]
            }
          },
          {
            "title": "Compare Renderer (special color renderer)",
            "description": "This style allows mapping the ratio between two numbers and expresses that relationship as percentages, simple ratios, or overall percentage.",
            "code": {
              "visualVariables": [
                {
                  "type": "colorInfo",
                  "minSliderValue": 0.0003858501658018686,
                  "maxSliderValue": 23.89513157894737,
                  "theme": "above-and-below",
                  "style": "ratio"
                }
              ]
            }
          },
          {
            "title": "Predominance Renderer",
            "description": "This style uses transparency to show the relative strength of the predominant attribute for each feature in the layer. The strength, or degree, of predominance is calculated as a percentage of the total value of all the attributes for a given feature.",
            "schema": "authoringInfo_schema.json",
            "code": {
              "authoringInfo": {
                "type": "predominance",
                "fields": [
                  "COST",
                  "DOLLARS",
                  "PRICE"
                ],
                "visualVariables": [
                  {
                    "type": "transparencyInfo",
                    "minSliderValue": 0,
                    "maxSliderValue": 100
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "classBreakInfo_schema.json": {
      "title": "classBreakInfo",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The classBreaksInfo object provides information about the class breaks associated with the renderer.",
      "properties": {
        "classMaxValue": {
          "type": "number",
          "description": "A numeric value used to specify the maximum value for a break."
        },
        "classMinValue": {
          "type": "number",
          "description": "A numeric value used to specify discontinuous class breaks. If this value is null or is missing, the map server will calculate the minimum value based on the preceding class\u0027 maximum value."
        },
        "description": {
          "type": "string",
          "description": "String value used to describe the drawn symbol."
        },
        "label": {
          "type": "string",
          "description": "String value used to label the drawn symbol."
        },
        "symbol": {
          "type": "object",
          "description": "An object used to display the value.",
          "$ref": "#/definitions/symbol3D_schema.json"
        }
      },
      "required": [
        "symbol"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "classBreak Info",
            "code": {
              "classBreakInfo": {
                "classMaxValue": 1000,
                "label": "10.0 - 1000.000000",
                "description": "10 to 1000",
                "symbol": {
                  "type": "PointSymbol3D",
                  "symbolLayers": [
                    {
                      "type": "Icon",
                      "resource": {
                        "primitive": "circle"
                      },
                      "material": {
                        "color": [
                          255,
                          255,
                          255
                        ]
                      },
                      "size": 12
                    }
                  ]
                }
              }
            }
          }
        ]
      }
    },
    "rendererLegendOptions_schema.json": {
      "title": "Renderer Legend Options",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Options available for the renderer legend.",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title of the legend."
        }
      }
    },
    "visualVariable_schema.json": {
      "title": "visualVariable",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "An object used to set rendering options. Please see the individual visual variable for specific information on how it is used.",
      "oneOf": [
        {
          "$ref": "#/definitions/colorInfo_visualVariable_schema.json"
        },
        {
          "$ref": "#/definitions/rotationInfo_visualVariable_schema.json"
        },
        {
          "$ref": "#/definitions/sizeInfo_visualVariable_schema.json"
        },
        {
          "$ref": "#/definitions/transparencyInfo_visualVariable_schema.json"
        }
      ]
    },
    "colorInfo_visualVariable_schema.json": {
      "title": "ColorInfo Visual Variable",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The colorInfo visual variable defines how a continuous color ramp is applied to features based on the values of a numeric field attribute.",
      "properties": {
        "field": {
          "type": "string",
          "description": "Attribute field used for color rendering if no valueExpression is provided."
        },
        "legendOptions": {
          "type": "object",
          "$ref": "#/definitions/visualVariableLegendOptions_schema.json"
        },
        "normalizationField": {
          "type": "string",
          "description": "Attribute field used to normalize the data."
        },
        "stops": {
          "type": "array",
          "description": "An array of stop objects.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/colorStop_schema.json"
          }
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of visual variable.",
          "enum": [
            "colorInfo"
          ]
        },
        "valueExpression": {
          "type": "string",
          "description": "An [Arcade expression](https://developers.arcgis.com/arcade/) that computes a value in lieu of a value provided by an attribute `field`."
        },
        "valueExpressionTitle": {
          "type": "string",
          "description": "The title identifying and describing the associated [Arcade](https://developers.arcgis.com/arcade/) expression as defined in the `valueExpression` property."
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "colorInfo",
            "description": "Live sample web scene showing [use of the colorInfo visual variable](https://www.arcgis.com/home/webscene/viewer.html?webscene\u003ded2892fef34b43b8a5cc61c8ff890c6f).",
            "code": {
              "visualVariables": [
                {
                  "type": "colorInfo",
                  "field": "M086_07",
                  "stops": [
                    {
                      "value": -99,
                      "color": [
                        255,
                        252,
                        212,
                        255
                      ],
                      "label": "\u003c -99"
                    },
                    {
                      "value": 705950,
                      "color": [
                        177,
                        205,
                        194,
                        255
                      ]
                    },
                    {
                      "value": 1411999,
                      "color": [
                        98,
                        158,
                        176,
                        255
                      ],
                      "label": "1,411,999"
                    },
                    {
                      "value": 2578189,
                      "color": [
                        56,
                        98,
                        122,
                        255
                      ]
                    },
                    {
                      "value": 3744380,
                      "color": [
                        13,
                        38,
                        68,
                        255
                      ],
                      "label": "\u003e 3,744,380"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "visualVariableLegendOptions_schema.json": {
      "title": "Visual Variable Legend Options",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Options available for the legend for visual variables.",
      "properties": {
        "showLegend": {
          "type": "boolean",
          "description": "Indicates whether to show the color/size/opacity ramp in the legend."
        },
        "title": {
          "type": "string",
          "description": "The title of the legend."
        }
      }
    },
    "colorStop_schema.json": {
      "title": "colorStop",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "A colorStop object describes the renderer\u0027s color ramp with more specificity than just colors.",
      "properties": {
        "color": {
          "description": "A CSS color string or an array of rbga values. The color to place at the stop indicated by either a ratio or value.",
          "$ref": "#/definitions/color_schema.json"
        },
        "label": {
          "type": "string",
          "description": "Value if a label is needed on the legend for a stop."
        },
        "value": {
          "type": "number",
          "description": "The pixel intensity value. Describes the pixel intensity value that the color should be associated with. Just like in colorInfo, using value will ignore `maxPixelIntensity` and `minPixelIntensity` properties. It will actually set those properties to maximum and minimum values you set in the colorStops array. The hard values are converted to ratios to create the color gradient that is used in the heatmap calculations. Setting `minPixelIntensity` or `maxPixelIntensity`, after setting colorStops with values, removes the hard link between the color ramp and the pixel intensity values that were used to create it."
        }
      },
      "required": [
        "color",
        "value"
      ],
      "esriDocumentation": {
        "examples": [
          {
            "title": "colorStops",
            "code": {
              "stop": {
                "value": 8035,
                "color": [
                  255,
                  252,
                  212,
                  255
                ],
                "label": "\u003c 8,035"
              }
            }
          }
        ]
      }
    },
    "rotationInfo_visualVariable_schema.json": {
      "title": "RotationInfo Visual Variable",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The rotation visual variable defines how features rendered with marker symbols are rotated. The rotation value is determined by a value in a field or an Arcade expression calculating a value. Use either the `field` property or `valueExpression` when specifying rotation values.",
      "properties": {
        "axis": {
          "type": "string",
          "description": "Defines the rotation axis the visual variable should be applied to when rendering features with an ObjectSymbol3DLayer. [Detailed description](static/objectSymbolLayerOrientation.md).",
          "enum": [
            "heading",
            "tilt",
            "roll"
          ],
          "default": "heading"
        },
        "field": {
          "type": "string",
          "description": "Attribute field used for setting the rotation of a symbol if no `valueExpression` is provided."
        },
        "legendOptions": {
          "type": "object",
          "$ref": "#/definitions/visualVariableLegendOptions_schema.json"
        },
        "rotationType": {
          "type": "string",
          "description": "Defines the origin and direction of rotation depending on how the angle of rotation was measured. Possible values are `geographic` which rotates the symbol from the north in a clockwise direction and `arithmetic` which rotates the symbol from the east in a counter-clockwise direction.",
          "enum": [
            "geographic",
            "arithmetic"
          ],
          "default": "geographic"
        },
        "type": {
          "type": "string",
          "description": "A string value indicating the type of visual variable used for the renderer.",
          "enum": [
            "rotationInfo"
          ]
        },
        "valueExpression": {
          "type": "string",
          "description": "An [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to a number."
        },
        "valueExpressionTitle": {
          "type": "string",
          "description": "The title identifying and describing the associated [Arcade expression] (https://developers.arcgis.com/arcade/) as defined in the `valueExpression` property."
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "RotationInfo Visual Variable",
            "description": "Live sample web scene showing [use of the rotationInfo visual variable](https://www.arcgis.com/home/webscene/viewer.html?webscene\u003d30973f38dc5f4e019bf7f4926abd1571).",
            "code": {
              "visualVariables": [
                {
                  "type": "rotationInfo",
                  "rotationType": "geographic",
                  "field": "WIND_DIRECT"
                }
              ]
            }
          }
        ]
      }
    },
    "sizeInfo_visualVariable_schema.json": {
      "title": "SizeInfo Visual Variable",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The sizeInfo visual variable defines how size is applied to features based on the values of a numeric field attribute. The minimum and maximum values of the data should be indicated along with their respective size values. You must specify either `minSize` and `maxSize`, or `stops`, or `valueUnit` to construct the size ramp. All features with values falling in between the specified min and max data values (or stops) will be scaled proportionally between the provided min and max sizes.",
      "properties": {
        "axis": {
          "type": "string",
          "description": "Defines the axis the size visual variable should be applied to when rendering features with an ObjectSymbol3DLayer.",
          "enum": [
            "width",
            "height",
            "depth",
            "widthAndDepth",
            "all"
          ]
        },
        "field": {
          "type": "string",
          "description": "Attribute field used for size rendering if no valueExpression is provided."
        },
        "legendOptions": {
          "type": "object",
          "$ref": "#/definitions/visualVariableLegendOptions_schema.json"
        },
        "maxDataValue": {
          "type": "number",
          "description": "The maximum data value."
        },
        "maxSize": {
          "type": "number",
          "description": "Specifies the maximum size to be applied to the symbol. This is required if valueUnit is set to `unknown`."
        },
        "minDataValue": {
          "type": "number",
          "description": "The minimum data value."
        },
        "minSize": {
          "type": "number",
          "description": "Specifies the minimum size to be applied to the symbol. This is required if valueUnit is set to `unknown`."
        },
        "normalizationField": {
          "type": "string",
          "description": "Attribute field used to normalize the data."
        },
        "stops": {
          "type": "array",
          "description": "An array of objects that defines the thematic size ramp in a sequence of data or expression stops. At least two stops are required. The stops must be listed in ascending order based on the value of the `value` property in each stop. This property is required if `minDataValue`, `maxDataValue`, `minSize`, and `maxSize` are not defined.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/sizeStop_schema.json"
          }
        },
        "target": {
          "type": "string",
          "description": "Only used when sizeInfo is used for polygon outlines.",
          "enum": [
            "outline"
          ]
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of visual variable.",
          "enum": [
            "sizeInfo"
          ]
        },
        "useSymbolValue": {
          "type": "boolean",
          "description": "When setting a size visual variable on a renderer using an ObjectSymbol3DLayer, this property indicates whether to apply the value defined by the height, width, or depth properties to the corresponding axis of this visual variable instead of proportionally scaling this axis\u0027 value after other axes."
        },
        "valueExpression": {
          "type": "string",
          "description": "An [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to a number."
        },
        "valueExpressionTitle": {
          "type": "string",
          "description": "The title identifying and describing the associated [Arcade](https://developers.arcgis.com/arcade/) expression as defined in the `valueExpression` property."
        },
        "valueRepresentation": {
          "type": "string",
          "description": "Specifies how to apply the data value when mapping real-world sizes. See table below for supported values.",
          "enum": [
            "radius",
            "diameter",
            "area",
            "width",
            "distance"
          ]
        },
        "valueUnit": {
          "type": "string",
          "description": "A string value indicating the unit of measurement. Defaults to `meters` if not set.",
          "enum": [
            "unknown",
            "inches",
            "feet",
            "yards",
            "miles",
            "nautical-miles",
            "millimeters",
            "centimeters",
            "decimeters",
            "meters",
            "kilometers",
            "decimal-degrees"
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "sizeInfo",
            "description": "Live sample web scene showing [use of the sizeInfo visual variable](https://www.arcgis.com/home/webscene/viewer.html?webscene\u003ded2892fef34b43b8a5cc61c8ff890c6f).",
            "code": {
              "visualVariables": [
                {
                  "type": "sizeInfo",
                  "field": "Deaths",
                  "axis": "all",
                  "minSize": 6,
                  "maxSize": 37,
                  "minDataValue": 2814,
                  "maxDataValue": 121179
                }
              ]
            }
          },
          {
            "title": "sizeInfo with stops",
            "code": {
              "visualVariables": [
                {
                  "type": "sizeInfo",
                  "field": "Deaths",
                  "stops": [
                    {
                      "value": 2814,
                      "size": 6
                    },
                    {
                      "value": 121179,
                      "size": 37
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "sizeStop_schema.json": {
      "title": "sizeStop",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "A `sizeStop` object describes the size of the symbol at various values of the expression.",
      "properties": {
        "size": {
          "type": "number",
          "description": "Specifies the marker size to use for the specified value."
        },
        "value": {
          "type": "number",
          "description": "The value to be mapped to a size."
        }
      },
      "required": [
        "size",
        "value"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "code": {
              "stop": {
                "value": 0,
                "size": 255
              }
            }
          }
        ]
      }
    },
    "transparencyInfo_visualVariable_schema.json": {
      "title": "TransparencyInfo Visual Variable",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The transparencyInfo visual variable defines the transparency, or opacity, of each feature\u0027s symbol based on a numeric attribute field value.",
      "properties": {
        "field": {
          "type": "string",
          "description": "Attribute field used for setting the transparency of a feature if no `valueExpression` is provided."
        },
        "legendOptions": {
          "type": "object",
          "$ref": "#/definitions/visualVariableLegendOptions_schema.json"
        },
        "normalizationField": {
          "type": "string",
          "description": "Attribute field used to normalize the data."
        },
        "stops": {
          "type": "array",
          "description": "An array of transparencyStop objects.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/transparencyStop_schema.json"
          }
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of visual variable.",
          "enum": [
            "transparencyInfo"
          ]
        },
        "valueExpression": {
          "type": "string",
          "description": "An [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to a number."
        },
        "valueExpressionTitle": {
          "type": "string",
          "description": "The title identifying and describing the associated [Arcade](https://developers.arcgis.com/arcade/) expression as defined in the `valueExpression` property."
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "transparencyInfo",
            "description": "Live sample web scene showing [use of the transparencyInfo visual variable](https://www.arcgis.com/home/webscene/viewer.html?webscene\u003d593dc1e98a1d447fb09b09d486355ef0).",
            "code": {
              "visualVariables": [
                {
                  "type": "transparencyInfo",
                  "field": "strength",
                  "stops": [
                    {
                      "value": 21,
                      "transparency": 60
                    },
                    {
                      "value": 39,
                      "transparency": 10
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "transparencyStop_schema.json": {
      "title": "transparencyStop",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The transparencyStop object defines the thematic opacity ramp in a sequence of stops. At least two stops are required. The stops must be listed in ascending order based on the value of the `value` property in each stop.",
      "properties": {
        "label": {
          "type": "string",
          "description": "A string value used to label the stop in the legend."
        },
        "transparency": {
          "type": "integer",
          "description": "A numeric transparancy value for a stop ranging from 0-100, where 0 is opaque and 100 is 100% transparent.",
          "minimum": 0,
          "maximum": 100
        },
        "value": {
          "type": "number",
          "description": "The pixel intensity value. Describes the pixel intensity value that the color should be associated with."
        }
      },
      "required": [
        "transparency",
        "value"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "code": {
              "stop": {
                "value": 0,
                "transparency": 50
              }
            }
          }
        ]
      }
    },
    "pointCloudRenderers_schema.json": {
      "title": "PointCloud Renderers",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Renderers for PointCloud Layers.",
      "oneOf": [
        {
          "$ref": "#/definitions/pointCloudClassBreaksRenderer_schema.json"
        },
        {
          "$ref": "#/definitions/pointCloudRGBRenderer_schema.json"
        },
        {
          "$ref": "#/definitions/pointCloudStretchRenderer_schema.json"
        },
        {
          "$ref": "#/definitions/pointCloudUniqueValueRenderer_schema.json"
        }
      ]
    },
    "pointCloudClassBreaksRenderer_schema.json": {
      "title": "PointCloud ClassBreaks Renderer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "PointCloudClassBreaksRenderer defines the color of each point in a PointCloudLayer based on the value of a numeric attribute. Colors are assigned based on classes or ranges of data. Each point is assigned a symbol based on the class break in which the value of the attribute falls.",
      "properties": {
        "colorClassBreakInfos": {
          "type": "array",
          "description": "Each element in the array is an object that provides information about a class break associated with the renderer.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/colorClassBreakInfo_schema.json"
          }
        },
        "colorModulation": {
          "$ref": "#/definitions/colorModulationInfo_schema.json"
        },
        "field": {
          "type": "string",
          "description": "  The name of the field that is used for the renderer."
        },
        "fieldTransformType": {
          "type": "string",
          "description": "A transform that is applied to the field value before evaluating the renderer.",
          "enum": [
            "none",
            "lowFourBit",
            "highFourBit",
            "absoluteValue",
            "moduloTen"
          ]
        },
        "legendOptions": {
          "type": "object",
          "description": "A legend containing one title, which is a string describing the renderer in the legend.",
          "$ref": "#/definitions/rendererLegendOptions_schema.json"
        },
        "pointSizeAlgorithm": {
          "$ref": "#/definitions/pointSizeAlgorithm_schema.json"
        },
        "pointsPerInch": {
          "type": "number",
          "description": "Number of point to draw per display inch."
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "pointCloudClassBreaksRenderer"
          ]
        }
      },
      "required": [
        "colorClassBreakInfos",
        "field",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "pointSizeAlgorithm",
            "description": "",
            "code": {
              "renderer": {
                "type": "pointCloudClassBreaksRenderer",
                "pointSizeAlgorithm": {
                  "type": "pointCloudSplatAlgorithm",
                  "scaleFactor": 1,
                  "minSize": 4
                },
                "pointsPerInch": 10,
                "field": "ELEVATION",
                "colorClassBreakInfos": [
                  {
                    "classMinValue": 0,
                    "classMaxValue": 422.87,
                    "label": "406.59 - 422.87",
                    "description": "",
                    "color": [
                      87,
                      0,
                      252
                    ]
                  },
                  {
                    "classMinValue": 422.87,
                    "classMaxValue": 438.81,
                    "label": "422.87 - 438.81",
                    "description": "",
                    "color": [
                      89,
                      168,
                      253
                    ]
                  },
                  {
                    "classMinValue": 438.81,
                    "classMaxValue": 466.8,
                    "label": "438.81 - 466.8",
                    "description": "",
                    "color": [
                      109,
                      253,
                      219
                    ]
                  },
                  {
                    "classMinValue": 466.8,
                    "classMaxValue": 507.05,
                    "label": "466.8 - 507.05",
                    "description": "",
                    "color": [
                      221,
                      254,
                      96
                    ]
                  },
                  {
                    "classMinValue": 507.05,
                    "classMaxValue": 593.73,
                    "label": "507.05 - 593.73",
                    "description": "",
                    "color": [
                      254,
                      185,
                      5
                    ]
                  }
                ]
              }
            }
          },
          {
            "description": "",
            "code": {
              "renderer": {
                "type": "pointCloudClassBreaksRenderer",
                "pointsPerInch": 10.0,
                "field": "",
                "colorClassBreakInfos": [
                  {
                    "classMinValue": 0,
                    "classMaxValue": 422.87,
                    "label": "406.59 - 422.87",
                    "description": "",
                    "color": [
                      87.0,
                      0.0,
                      252.0
                    ]
                  },
                  {
                    "classMinValue": 422.87,
                    "classMaxValue": 438.81,
                    "label": "422.87 - 438.81",
                    "description": "",
                    "color": [
                      89.0,
                      168.0,
                      253.0
                    ]
                  },
                  {
                    "classMinValue": 438.81,
                    "classMaxValue": 466.8,
                    "label": "438.81 - 466.8",
                    "description": "",
                    "color": [
                      109.0,
                      253.0,
                      219.0
                    ]
                  },
                  {
                    "classMinValue": 466.8,
                    "classMaxValue": 507.05,
                    "label": "466.8 - 507.05",
                    "description": "",
                    "color": [
                      221.0,
                      254.0,
                      96.0
                    ]
                  },
                  {
                    "classMinValue": 507.05,
                    "classMaxValue": 593.73,
                    "label": "507.05 - 593.73",
                    "description": "",
                    "color": [
                      254.0,
                      185.0,
                      5.0
                    ]
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "colorClassBreakInfo_schema.json": {
      "title": "colorClassBreakInfo",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The classBreaksInfo object provides information about the class breaks associated with the renderer.",
      "properties": {
        "classMaxValue": {
          "type": "number",
          "description": "A numeric value used to specify the maximum value for a break."
        },
        "classMinValue": {
          "type": "number",
          "description": "A numeric value used to specify discontinuous class breaks. If this value is null or is missing, the map server will calculate the minimum value based on the preceding class\u0027 maximum value."
        },
        "color": {
          "$ref": "#/definitions/color_schema.json"
        },
        "description": {
          "type": "string",
          "description": "String value used to describe the class."
        },
        "label": {
          "type": "string",
          "description": "String value used to label the class."
        }
      },
      "required": [
        "classMaxValue",
        "classMinValue",
        "color"
      ],
      "additionalProperties": false
    },
    "colorModulationInfo_schema.json": {
      "title": "colorModulationInfo",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Indicates whether modulation should be used to render the point.",
      "properties": {
        "field": {
          "type": "string",
          "description": "the attribute to use as a source for the modulation amplitude"
        },
        "maxValue": {
          "type": "number",
          "description": "maximum value to compute modulation linear mapping"
        },
        "minValue": {
          "type": "number",
          "description": "minimum value to compute modulation linear mapping"
        }
      },
      "required": [
        "field",
        "maxValue",
        "minValue"
      ],
      "additionalProperties": false
    },
    "pointSizeAlgorithm_schema.json": {
      "title": "PointCloud Size Algorithm",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Size algorithms for point cloud performance.",
      "oneOf": [
        {
          "$ref": "#/definitions/pointCloudFixedSizeAlgorithm_schema.json"
        },
        {
          "$ref": "#/definitions/pointCloudSplatAlgorithm_schema.json"
        }
      ]
    },
    "pointCloudFixedSizeAlgorithm_schema.json": {
      "title": "PointCloud FixedSize Algorithm",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Render points with fixed real world or screen space size.",
      "properties": {
        "size": {
          "type": "number",
          "description": "Symbol size in real world units or display unit"
        },
        "type": {
          "type": "string",
          "enum": [
            "pointCloudFixedSizeAlgorithm"
          ]
        },
        "useRealWorldSymbolSizes": {
          "type": "boolean",
          "description": " If true symbol size is in meters, display unit (pt) otherwise"
        }
      },
      "required": [
        "size",
        "type"
      ],
      "additionalProperties": false
    },
    "pointCloudSplatAlgorithm_schema.json": {
      "title": "PointCloud Splat Algorithm",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Render points using sizes depending on point density.",
      "properties": {
        "minSize": {
          "type": "number",
          "description": "Minimum display space point size in points"
        },
        "scaleFactor": {
          "type": "number",
          "description": "Scale factor to applied to the computed point size (in real world)"
        },
        "type": {
          "type": "string",
          "enum": [
            "pointCloudSplatAlgorithm"
          ]
        }
      },
      "required": [
        "scaleFactor",
        "type"
      ],
      "additionalProperties": false
    },
    "pointCloudRGBRenderer_schema.json": {
      "title": "PointCloud RGB Renderer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "PointCloudRGBRenderer defines the color of each point in a PointCloudLayer based on the value of a color attribute.",
      "properties": {
        "colorModulation": {
          "description": "",
          "$ref": "#/definitions/colorModulationInfo_schema.json"
        },
        "field": {
          "type": "string",
          "description": "The name of the field that is used for the renderer."
        },
        "fieldTransformType": {
          "type": "string",
          "description": "A transform that is applied to the field value before evaluating the renderer.",
          "enum": [
            "none",
            "lowFourBit",
            "highFourBit",
            "absoluteValue",
            "moduloTen"
          ]
        },
        "pointSizeAlgorithm": {
          "description": "",
          "$ref": "#/definitions/pointSizeAlgorithm_schema.json"
        },
        "pointsPerInch": {
          "type": "number",
          "description": "Number of point to draw per display inch."
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "pointCloudRGBRenderer"
          ]
        }
      },
      "required": [
        "field",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "pointCloudRGBRenderer",
            "description": "",
            "code": {
              "renderer": {
                "type": "pointCloudRGBRenderer",
                "field": "RGB",
                "pointsPerInch": 10
              }
            }
          }
        ]
      }
    },
    "pointCloudStretchRenderer_schema.json": {
      "title": "PointCloud Stretch Renderer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "PointCloudStretchRenderer defines the color of each point in a PointCloudLayer based on the value of a numeric attribute. They allow you to easily map continuous color ramps to minimum and maximum data values of one of the layer\u0027s numeric attribute fields.",
      "properties": {
        "colorModulation": {
          "description": "",
          "$ref": "#/definitions/colorModulationInfo_schema.json"
        },
        "field": {
          "type": "string",
          "description": "The name of the field that is used for the renderer."
        },
        "fieldTransformType": {
          "type": "string",
          "description": "A transform that is applied to the field value before evaluating the renderer.",
          "enum": [
            "none",
            "lowFourBit",
            "highFourBit",
            "absoluteValue",
            "moduloTen"
          ]
        },
        "legendOptions": {
          "type": "object",
          "description": "A legend containing one title, which is a string describing the renderer in the legend.",
          "$ref": "#/definitions/rendererLegendOptions_schema.json"
        },
        "pointSizeAlgorithm": {
          "description": "",
          "$ref": "#/definitions/pointSizeAlgorithm_schema.json"
        },
        "pointsPerInch": {
          "type": "number",
          "description": "Number of points to draw per display inch."
        },
        "stops": {
          "type": "array",
          "description": "An array of color value pairs.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/colorStop_schema.json"
          }
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "pointCloudStretchRenderer"
          ]
        }
      },
      "required": [
        "field",
        "stops",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "pointCloudStretchRenderer",
            "description": "",
            "code": {
              "renderer": {
                "type": "pointCloudStretchRenderer",
                "pointSizeAlgorithm": {
                  "type": "pointCloudSplatAlgorithm",
                  "scaleFactor": 1,
                  "minSize": 4
                },
                "pointsPerInch": 10,
                "field": "Elevation",
                "stops": [
                  {
                    "value": 406.59,
                    "color": [
                      87,
                      0,
                      252,
                      255
                    ]
                  },
                  {
                    "value": 468.96999999999997,
                    "color": [
                      13,
                      253,
                      255,
                      255
                    ]
                  },
                  {
                    "value": 531.35,
                    "color": [
                      242,
                      254,
                      23,
                      255
                    ]
                  },
                  {
                    "value": 593.73,
                    "color": [
                      254,
                      21,
                      0,
                      255
                    ]
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "pointCloudUniqueValueRenderer_schema.json": {
      "title": "PointCloud UniqueValue Renderer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "PointCloudUniqueValueRenderer allows you to colorize points in a PointCloudLayer based on an attribute. This is done by using unique colors to represent points with equal attribute values.",
      "properties": {
        "colorModulation": {
          "description": "",
          "$ref": "#/definitions/colorModulationInfo_schema.json"
        },
        "colorUniqueValueInfos": {
          "type": "array",
          "description": "Unique value infos.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/colorUniqueValueInfo_schema.json"
          }
        },
        "field": {
          "type": "string",
          "description": "The name of the field that is used for the renderer."
        },
        "fieldTransformType": {
          "type": "string",
          "description": "A transform that is applied to the field value before evaluating the renderer.",
          "enum": [
            "none",
            "lowFourBit",
            "highFourBit",
            "absoluteValue",
            "moduloTen"
          ]
        },
        "legendOptions": {
          "type": "object",
          "description": "A legend containing one title, which is a string describing the renderer in the legend.",
          "$ref": "#/definitions/rendererLegendOptions_schema.json"
        },
        "pointSizeAlgorithm": {
          "description": "",
          "$ref": "#/definitions/pointSizeAlgorithm_schema.json"
        },
        "pointsPerInch": {
          "type": "number",
          "description": "Number of points to draw per display inch."
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "pointCloudUniqueValueRenderer"
          ]
        }
      },
      "required": [
        "colorUniqueValueInfos",
        "field",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "pointCloudUniqueValueRenderer",
            "description": "",
            "code": {
              "renderer": {
                "type": "pointCloudUniqueValueRenderer",
                "pointSizeAlgorithm": {
                  "type": "pointCloudFixedSizeAlgorithm",
                  "useRealWorldSymbolSizes": false,
                  "size": 4
                },
                "pointsPerInch": 10.0,
                "field": "CLASS_CODE",
                "colorUniqueValueInfos": [
                  {
                    "values": [
                      "1"
                    ],
                    "label": "1",
                    "description": "Unassigned",
                    "color": [
                      79,
                      112,
                      181
                    ]
                  },
                  {
                    "values": [
                      "2"
                    ],
                    "label": "2",
                    "description": "Ground",
                    "color": [
                      170,
                      183,
                      189
                    ]
                  },
                  {
                    "values": [
                      "3"
                    ],
                    "label": "3",
                    "description": "Low vegetation",
                    "color": [
                      247,
                      255,
                      188
                    ]
                  },
                  {
                    "values": [
                      "4"
                    ],
                    "label": "4",
                    "description": "Medium vegetation",
                    "color": [
                      241,
                      159,
                      106
                    ]
                  },
                  {
                    "values": [
                      "5"
                    ],
                    "label": "5",
                    "description": "High vegetation",
                    "color": [
                      211,
                      26,
                      18
                    ]
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "colorUniqueValueInfo_schema.json": {
      "title": "colorUniqueValueInfo",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The colorUniqueValueInfo object matches a unique value with a specific color.",
      "properties": {
        "color": {
          "$ref": "#/definitions/color_schema.json"
        },
        "description": {
          "type": "string",
          "description": "String value used to describe the class."
        },
        "label": {
          "type": "string",
          "description": "String value used to label the class."
        },
        "values": {
          "type": "array",
          "description": "List of string or number values used to classifiy points.",
          "items": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          }
        }
      },
      "required": [
        "color",
        "values"
      ],
      "additionalProperties": false
    },
    "rasterRenderers_schema.json": {
      "title": "Raster Renderers",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Renderers for Raster Layers.",
      "oneOf": [
        {
          "$ref": "#/definitions/rasterClassBreaksRenderer_schema.json"
        },
        {
          "$ref": "#/definitions/rasterStretchRenderer_schema.json"
        },
        {
          "$ref": "#/definitions/rasterUniqueValueRenderer_schema.json"
        }
      ]
    },
    "rasterClassBreaksRenderer_schema.json": {
      "title": "Raster ClassBreaks Renderer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Defines the color of each raster cell based on the value of a numeric attribute. Colors are assigned based on classed ranges of data.",
      "properties": {
        "authoringInfo": {
          "type": "object",
          "description": "An object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific overridable settings so that next time it is accessed via the UI, their selections are remembered. Non-authoring clients can ignore it.",
          "$ref": "#/definitions/authoringInfo_schema.json"
        },
        "colorClassBreakInfos": {
          "type": "array",
          "description": "Each element in the array is an object that provides information about a class break associated with the renderer.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/colorClassBreakInfo_schema.json"
          }
        },
        "defaultColor": {
          "description": "The defaultColor on the renderer that get assigned to features with no value or features that do not fall within the configured data.",
          "$ref": "#/definitions/color_schema.json"
        },
        "defaultLabel": {
          "type": "string",
          "description": "Default label for the default symbol used to draw unspecified values."
        },
        "field": {
          "type": "string",
          "description": "The name of the field that is used for the renderer."
        },
        "legendOptions": {
          "type": "object",
          "description": "A legend containing one title, which is a string describing the renderer in the legend.",
          "$ref": "#/definitions/rendererLegendOptions_schema.json"
        },
        "normalizationField": {
          "type": "string",
          "description": "Used when normalizationType is field. The string value indicating the attribute field by which the data value is normalized."
        },
        "normalizationTotal": {
          "type": "number",
          "description": "Used when normalizationType is percent-of-total, this number property contains the total of all data values."
        },
        "normalizationType": {
          "type": "string",
          "description": "Determine how the data was normalized.",
          "enum": [
            "esriNormalizeByField",
            "esriNormalizeByLog",
            "esriNormalizeByPercentOfTotal"
          ]
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "rasterClassBreaksRenderer"
          ]
        }
      },
      "required": [
        "colorClassBreakInfos",
        "field",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "rasterClassBreaksRenderer",
            "code": {
              "renderer": {
                "type": "rasterClassBreaksRenderer",
                "field": "Value",
                "colorClassBreakInfos": [
                  {
                    "classMinValue": 11,
                    "classMaxValue": 27.8,
                    "label": "11 - 27.8",
                    "color": [
                      245,
                      245,
                      19,
                      255
                    ]
                  },
                  {
                    "classMinValue": 27.8,
                    "classMaxValue": 44.6,
                    "label": "27.6 - 44.6",
                    "color": [
                      250,
                      201,
                      18,
                      255
                    ]
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "rasterStretchRenderer_schema.json": {
      "title": "Raster Stretch Renderer",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Displays continuous raster cell values across a gradual ramp of colors. Use this renderer to draw a single band of continuous data. This renderer works well when you have a large range of values to display, such as with imagery or scientific data.",
      "properties": {
        "colorRamp": {
          "type": "object",
          "$ref": "#/definitions/colorRamp_schema.json"
        },
        "computeGamma": {
          "type": "boolean",
          "description": "Indicates if gamma values should be computed by default."
        },
        "dra": {
          "type": "boolean",
          "description": "Indicates if Dynamic Range Adjustment should be applied."
        },
        "gamma": {
          "type": "array",
          "description": "The list of Gamma value(s).",
          "items": {
            "type": "number"
          }
        },
        "max": {
          "type": "number",
          "description": "The current maximum output value."
        },
        "maxPercent": {
          "type": "number",
          "description": "The current maximum percent value."
        },
        "min": {
          "type": "number",
          "description": "The current minimum output value."
        },
        "minPercent": {
          "type": "number",
          "description": "The current minimum percent value."
        },
        "numberOfStandardDeviations": {
          "type": "integer",
          "description": "The number of standard deviations for standard deviation stretch."
        },
        "sigmoidStrengthLevel": {
          "type": "number",
          "description": "Set this from (1 to 6) to adjust the curvature of Sigmoid curve used in color stretch."
        },
        "statistics": {
          "type": "array",
          "description": "The custom raster stretch statistics.",
          "items": {
            "type": "array",
            "items": {
              "type": "number",
              "minItems": 4,
              "maxItems": 4
            }
          }
        },
        "stretchType": {
          "type": "string",
          "description": "The stretch types for stretch raster function.",
          "enum": [
            "none",
            "standardDeviation",
            "histogramEqualization",
            "minMax",
            "percentClip",
            "sigmoid"
          ]
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "rasterStretch"
          ]
        },
        "useGamma": {
          "type": "boolean",
          "description": "Indicates if the renderer applies Gamma stretch."
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "additionalInformation": "For each `stretchType` there are specific sets of requirements that are as follows: \u003cbr\u003e`none`: does not require other parameters.\u003cbr\u003e`standardDeviation`: requires numberOfStandardDeviations, statistics, or dra.\u003cbr\u003e`histogramEqualization`: requires the source dataset to have histograms or additional dra.\u003cbr\u003e`minMax`: requires statistics or dra.\u003cbr\u003e`percentClip`: requires minPercent, maxPercent, and dra.\u003cbr\u003e`sigmoid`: does not require other parameters. Optionally, set the sigmoidStrengthLevel (1 to 6) to adjust the curvature of Sigmoid curve used in color stretch.",
        "examples": [
          {
            "code": {
              "renderer": {
                "type": "rasterStretch",
                "stretchType": "minMax",
                "statistics": [
                  [
                    -6.621397972106934,
                    337.17144775390625,
                    10.955521397698623,
                    20.044026002479463
                  ]
                ],
                "dra": false,
                "useGamma": true,
                "gamma": [
                  1
                ],
                "computeGamma": false
              }
            }
          }
        ]
      }
    },
    "rasterUniqueValueRenderer_schema.json": {
      "title": "Raster UniqueValue Renderer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Defines the color of each raster cell based on an attribute. This is done by using unique colors to represent cells with equal attribute values.",
      "properties": {
        "authoringInfo": {
          "type": "object",
          "description": "An object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific overridable settings so that next time it is accessed via the UI, their selections are remembered. Non-authoring clients can ignore it.",
          "$ref": "#/definitions/authoringInfo_schema.json"
        },
        "colorUniqueValueInfos": {
          "type": "array",
          "description": "Unique value infos.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/colorUniqueValueInfo_schema.json"
          }
        },
        "defaultColor": {
          "description": "The defaultColor on the renderer that get assigned to features with no value or features that do not fall within the configured data.",
          "$ref": "#/definitions/color_schema.json"
        },
        "defaultLabel": {
          "type": "string",
          "description": "Default label for the default symbol used to draw unspecified values."
        },
        "field": {
          "type": "string",
          "description": "The name of the field that is used for the renderer."
        },
        "legendOptions": {
          "type": "object",
          "description": "A legend containing one title, which is a string describing the renderer in the legend.",
          "$ref": "#/definitions/rendererLegendOptions_schema.json"
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "rasterUniqueValueRenderer"
          ]
        }
      },
      "required": [
        "colorUniqueValueInfos",
        "field",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "rasterUniqueValueRenderer",
            "code": {
              "renderer": {
                "type": "rasterUniqueValueRenderer",
                "field": "ClassName",
                "colorUniqueValueInfos": [
                  {
                    "values": [
                      "Open Water"
                    ],
                    "label": "Open Water",
                    "description": "Open Water",
                    "color": [
                      71,
                      107,
                      161,
                      255
                    ]
                  },
                  {
                    "values": [
                      "Perennial Snow/Ice"
                    ],
                    "label": "Perennial Snow/Ice",
                    "description": "Perennial Snow/Ice",
                    "color": [
                      209,
                      222,
                      250,
                      255
                    ]
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "simpleRenderer_schema.json": {
      "title": "Simple Renderer",
      "type": "object",
      "description": "A simple renderer is a renderer that uses one symbol only.",
      "properties": {
        "authoringInfo": {
          "type": "object",
          "description": "An object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific overridable settings so that next time it is accessed via the UI, their selections are remembered. Non-authoring clients can ignore it.",
          "$ref": "#/definitions/authoringInfo_schema.json"
        },
        "description": {
          "type": "string",
          "description": "Description of the renderer."
        },
        "label": {
          "type": "string",
          "description": "The text string that is displayed in the table of contents."
        },
        "symbol": {
          "type": "object",
          "description": "An object that represents how all features will be drawn.",
          "$ref": "#/definitions/symbol3D_schema.json"
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "simple"
          ]
        },
        "visualVariables": {
          "type": "array",
          "description": "An array of objects used to set rendering properties.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/visualVariable_schema.json"
          }
        }
      },
      "required": [
        "symbol",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Simple Renderer",
            "description": "",
            "code": {
              "renderer": {
                "type": "simple",
                "symbol": {
                  "type": "PointSymbol3D",
                  "symbolLayers": [
                    {
                      "type": "Icon",
                      "resource": {
                        "primitive": "circle"
                      },
                      "material": {
                        "color": [
                          255,
                          255,
                          255
                        ]
                      },
                      "size": 12
                    }
                  ]
                }
              }
            }
          }
        ]
      }
    },
    "uniqueValueFromStyleRenderer_schema.json": {
      "title": "UniqueValueFromStyle Renderer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "This is a special version of UniqueValue Renderer, which loads uniqueValue infos from a style definition.",
      "properties": {
        "defaultLabel": {
          "type": "string",
          "description": "Default string for the default symbol used to draw unspecified values."
        },
        "defaultSymbol": {
          "description": "The defaultSymbol on the renderer that get assigned to features with no value or features that do not fall within the configured data.",
          "$ref": "#/definitions/symbol3D_schema.json"
        },
        "field1": {
          "type": "string",
          "description": "String value specifying the first field used to render matching values."
        },
        "styleName": {
          "type": "string",
          "description": "A registered web style name. Can not be used in conjunction with styleUrl."
        },
        "styleUrl": {
          "type": "string",
          "description": "URL that points to the web style definition. Can not be used in conjunction with styleName.",
          "format": "uri"
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "uniqueValue"
          ]
        },
        "visualVariables": {
          "type": "array",
          "description": "An array of visualVariable objects used for continuous color or size, simple, and unique values with feature opacity.",
          "items": {
            "$ref": "#/definitions/visualVariable_schema.json"
          }
        }
      },
      "oneOf": [
        {
          "required": [
            "type",
            "styleName"
          ]
        },
        {
          "required": [
            "type",
            "styleUrl"
          ]
        }
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "UniqueValueFromStyle Renderer",
            "code": {
              "renderer": {
                "type": "uniqueValue",
                "styleName": "EsriRealisticTreesStyle",
                "field1": "genus",
                "visualVariables": [
                  {
                    "type": "sizeInfo",
                    "field": "height",
                    "axis": "height",
                    "valueUnit": "feet"
                  },
                  {
                    "type": "sizeInfo",
                    "field": "diameter",
                    "axis": "widthAndDepth",
                    "valueUnit": "feet"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "uniqueValueRenderer_schema.json": {
      "title": "UniqueValue Renderer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "A unique value renderer symbolizes based on the value of an attribute.",
      "properties": {
        "authoringInfo": {
          "type": "object",
          "description": "An object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific overridable settings so that next time it is accessed via the UI, their selections are remembered. Non-authoring clients can ignore it.",
          "$ref": "#/definitions/authoringInfo_schema.json"
        },
        "backgroundFillSymbol": {
          "type": "object",
          "description": "Used for polygon features. It can only be used for bivariate types and size rendering.",
          "$ref": "#/definitions/polygonSymbol3D_schema.json"
        },
        "defaultLabel": {
          "type": "string",
          "description": "Default label for the default symbol used to draw unspecified values."
        },
        "defaultSymbol": {
          "description": "The defaultSymbol on the renderer that get assigned to features with no value or features that do not fall within the configured data.",
          "$ref": "#/definitions/symbol3D_schema.json"
        },
        "field1": {
          "type": "string",
          "description": "Attribute field renderer uses to match values."
        },
        "field2": {
          "type": "string",
          "description": "If needed, specify an additional attribute field the renderer uses to match values."
        },
        "field3": {
          "type": "string",
          "description": "If needed, specify an additional attribute field the renderer uses to match values."
        },
        "fieldDelimiter": {
          "type": "string",
          "description": "String inserted between the values if multiple attribute fields are specified.",
          "default": ", "
        },
        "legendOptions": {
          "type": "object",
          "description": "A legend containing one title, which is a string describing the renderer in the legend.",
          "$ref": "#/definitions/rendererLegendOptions_schema.json"
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "uniqueValue"
          ]
        },
        "uniqueValueInfos": {
          "type": "array",
          "description": "An array of uniqueValueInfo objects.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/uniqueValueInfo_schema.json"
          }
        },
        "valueExpression": {
          "type": "string",
          "description": "An [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to either a string or a number."
        },
        "valueExpressionTitle": {
          "type": "string",
          "description": "The title identifying and describing the associated [Arcade](https://developers.arcgis.com/arcade/) expression as defined in the `valueExpression` property."
        },
        "visualVariables": {
          "type": "array",
          "description": "An array of objects used to set rendering properties.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/visualVariable_schema.json"
          }
        }
      },
      "required": [
        "type",
        "uniqueValueInfos"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "UniqueValue",
            "description": "",
            "code": {
              "renderer": {
                "type": "uniqueValue",
                "field1": "COUNTRY",
                "uniqueValueInfos": [
                  {
                    "value": "US",
                    "label": "US",
                    "symbol": {
                      "type": "PointSymbol3D",
                      "symbolLayers": [
                        {
                          "type": "Icon",
                          "resource": {
                            "primitive": "circle"
                          },
                          "material": {
                            "color": [
                              253,
                              127,
                              111
                            ]
                          },
                          "size": 12
                        }
                      ]
                    }
                  },
                  {
                    "value": "Canada",
                    "label": "Canada",
                    "symbol": {
                      "type": "PointSymbol3D",
                      "symbolLayers": [
                        {
                          "type": "Icon",
                          "resource": {
                            "primitive": "circle"
                          },
                          "material": {
                            "color": [
                              126,
                              176,
                              213
                            ]
                          },
                          "size": 12
                        }
                      ]
                    }
                  },
                  {
                    "value": "Brazil",
                    "label": "Brazil",
                    "symbol": {
                      "type": "PointSymbol3D",
                      "symbolLayers": [
                        {
                          "type": "Icon",
                          "resource": {
                            "primitive": "circle"
                          },
                          "material": {
                            "color": [
                              178,
                              224,
                              97
                            ]
                          },
                          "size": 12
                        }
                      ]
                    }
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "uniqueValueInfo_schema.json": {
      "title": "uniqueValueInfo",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Info item for the Unique Value Renderer. Its symbol gets selected if the feature\u0027s field matches its value.",
      "properties": {
        "description": {
          "type": "string",
          "description": "String value used to describe the drawn symbol."
        },
        "label": {
          "type": "string",
          "description": "String value used to label the drawn symbol."
        },
        "symbol": {
          "type": "object",
          "description": "An object used to display the value.",
          "$ref": "#/definitions/symbol3D_schema.json"
        },
        "value": {
          "type": "string",
          "description": "String value indicating the unique value."
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "uniqueValueInfo",
            "code": {
              "uniqueValueInfo": {
                "value": "Pacific",
                "label": "Pacific region",
                "description": "The Pacific region description",
                "symbol": {
                  "type": "PointSymbol3D",
                  "symbolLayers": [
                    {
                      "type": "Icon",
                      "resource": {
                        "primitive": "circle"
                      },
                      "material": {
                        "color": [
                          255,
                          255,
                          255
                        ]
                      },
                      "size": 12
                    }
                  ]
                }
              }
            }
          }
        ]
      }
    },
    "elevationInfo_schema.json": {
      "title": "elevationInfo",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Elevation info defines how features are aligned to ground or other layers.",
      "properties": {
        "featureExpression": {
          "type": "object",
          "description": "\u003cem\u003eDeprecated with 1.8, use `featureExpressionInfo` instead\u003c/em\u003e. `{\"value\":0}` ignores geometry z-values.",
          "properties": {
            "value": {
              "type": "number",
              "enum": [
                0
              ]
            }
          },
          "minProperties": 1,
          "additionalProperties": false
        },
        "featureExpressionInfo": {
          "type": "object",
          "description": "An object that defines an expression for per-feature elevation. If not set, geometry.z values are used for elevation. `unit` is applied to the resulting expression value.",
          "$ref": "#/definitions/featureExpressionInfo_schema.json"
        },
        "mode": {
          "type": "string",
          "description": "Determines how the service elevation values are combined with the elevation of the scene.",
          "enum": [
            "relativeToGround",
            "absoluteHeight",
            "onTheGround",
            "relativeToScene"
          ]
        },
        "offset": {
          "type": "number",
          "description": "Offset is always added to the result of the above logic except for onTheGround where offset is ignored."
        },
        "unit": {
          "type": "string",
          "description": "A string value indicating the unit for the values in elevationInfo. Applies to both `offset` and `featureExpressionInfo`. Defaults to `meter` if not set. \u003ca href\u003d\"#unit\"\u003e\u003csup\u003e1\u003c/sup\u003e\u003c/a\u003e",
          "default": "meter"
        }
      },
      "required": [
        "mode"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "additionalInformation": "[ElevationInfo](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#elevationInfo) in ArcGIS API for JavaScript.\u003cbr\u003e\u003ca id\u003d\"unit\"\u003e\u003csup\u003e1\u003c/sup\u003e\u003c/a\u003eSupported units: `foot`, `kilometer`, `meter`, `mile`, `us-foot`, `yard`",
        "examples": [
          {
            "code": {
              "elevationInfo": {
                "mode": "relativeToGround",
                "offset": 200,
                "featureExpressionInfo": {
                  "expression": "$feature.ELEVATION_FOOT"
                },
                "unit": "foot"
              }
            }
          }
        ]
      }
    },
    "featureExpressionInfo_schema.json": {
      "title": "featureExpressionInfo",
      "type": "object",
      "description": "An object that defines an expression for per-feature elevation.",
      "properties": {
        "expression": {
          "type": "string",
          "description": "An [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to a number.",
          "minLength": 1
        },
        "title": {
          "type": "string",
          "description": "Title of the expression.",
          "minLength": 1
        }
      },
      "required": [
        "expression"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Zero expression",
            "description": "Do not use geometry.z values",
            "code": {
              "featureExpressionInfo": {
                "expression": "0"
              }
            }
          },
          {
            "title": "Expression with field name",
            "description": "Elevation from field value without geometry.z",
            "code": {
              "featureExpressionInfo": {
                "expression": "$feature.ELEVATION_FOOT"
              }
            }
          }
        ]
      }
    },
    "extent_schema.json": {
      "title": "extent",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "This object defines the bounding geometry given the lower-left and upper-right corners of the bounding box. A [spatial reference](spatialReference.md) is also required.",
      "properties": {
        "spatialReference": {
          "type": "object",
          "description": "An object used to specify the spatial reference of the given geometry.",
          "$ref": "#/definitions/spatialReference_schema.json"
        },
        "xmax": {
          "type": "number",
          "description": "A numeric value indicating the top-right X-coordinate of an extent envelope."
        },
        "xmin": {
          "description": "A numeric value indicating the bottom-left X-coordinate of an extent envelope.",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "enum": [
                "NaN"
              ]
            }
          ]
        },
        "ymax": {
          "type": "number",
          "description": "A numeric value indicating the top-right Y-coordinate of an extent envelope."
        },
        "ymin": {
          "type": "number",
          "description": "A numeric value indicating the bottom-left Y-coordinate of an extent envelope."
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "extent",
            "code": {
              "extent": {
                "xmin": 13871520.850500003,
                "ymin": 3910293.086000003,
                "xmax": 14574034.873400003,
                "ymax": 4686306.161399998,
                "spatialReference": {
                  "wkid": 102100,
                  "latestWkid": 3857
                }
              }
            }
          }
        ]
      }
    },
    "featureReduction_select_schema.json": {
      "title": "Feature Reduction: Selection",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Feature reduction of type \u0027selection\u0027 declutters the screen by hiding features that would otherwise intersect with other features on screen. The default behavior of this feature reduction type is to select features by depth order, i.e. hide all features that would otherwise be overlapped by at least one other feature which is closer to the viewer.",
      "properties": {
        "type": {
          "type": "string",
          "description": "A string value indicating the feature reduction type.",
          "enum": [
            "selection"
          ]
        }
      },
      "esriDocumentation": {
        "additionalInformation": "This feature reduction type is only supported for point symbols with non-draped icon symbol layers at the moment.",
        "examples": [
          {
            "title": "featureReduction of type \u0027selection\u0027",
            "code": {
              "featureReduction": {
                "type": "selection"
              }
            }
          }
        ]
      }
    },
    "pointCloudFilter_schema.json": {
      "title": "PointCloud Filter",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Filters applied to the pointCloud which will hide a point.",
      "oneOf": [
        {
          "$ref": "#/definitions/pointCloudBitfieldFilter_schema.json"
        },
        {
          "$ref": "#/definitions/pointCloudReturnFilter_schema.json"
        },
        {
          "$ref": "#/definitions/pointCloudValueFilter_schema.json"
        }
      ]
    },
    "pointCloudBitfieldFilter_schema.json": {
      "title": "PointCloud Bitfield Filter",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Filters points based on the value of the specified bitfield attribute.",
      "properties": {
        "field": {
          "type": "string",
          "description": "The name of the field that is used for the filter."
        },
        "requiredClearBits": {
          "type": "array",
          "description": "List ALL bit numbers that must cleared (\u003d0) for the point to be kept. bit 0 is LSB.",
          "items": {
            "type": "number"
          }
        },
        "requiredSetBits": {
          "type": "array",
          "description": " List ALL bit numbers that must set (\u003d1) for the point to be kept. bit 0 is LSB.",
          "items": {
            "type": "number"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "pointCloudBitfieldFilter"
          ]
        }
      },
      "anyOf": [
        {
          "required": [
            "requiredClearBits"
          ]
        },
        {
          "required": [
            "requiredSetBits"
          ]
        }
      ],
      "required": [
        "field",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "PointCloud Bitfield Filter",
            "description": "",
            "code": {
              "filters": [
                {
                  "type": "pointCloudBitfieldFilter",
                  "field": "USAGE",
                  "requiredClearBits": [
                    0
                  ],
                  "requiredSetBits": [
                    2,
                    3
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "pointCloudReturnFilter_schema.json": {
      "title": "PointCloud Return Filter",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Filters points based on the value of the return number/return count.",
      "properties": {
        "field": {
          "type": "string",
          "description": "The name of the field that is used for the filter."
        },
        "includedReturns": {
          "type": "array",
          "description": "All points with at least one specified return status will be kept. Status values: `last`, `firstOfMany`, `lastOfMany`, `single`",
          "items": {
            "type": "string",
            "enum": [
              "last",
              "firstOfMany",
              "lastOfMany",
              "single"
            ]
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "pointCloudReturnFilter"
          ]
        }
      },
      "required": [
        "field",
        "includedReturns",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "PointCloud Return Filter",
            "description": "",
            "code": {
              "filters": [
                {
                  "type": "pointCloudReturnFilter",
                  "field": "USAGE",
                  "includedReturns": [
                    "firstOfMany",
                    "single"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "pointCloudValueFilter_schema.json": {
      "title": "PointCloud Value Filter",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Filters points based on the value of an specified attribute.",
      "properties": {
        "field": {
          "type": "string",
          "description": "The name of the field that is used for the filter."
        },
        "mode": {
          "type": "string",
          "description": "Defines if values should be included or excluded.",
          "enum": [
            "exclude",
            "include"
          ]
        },
        "type": {
          "type": "string",
          "description": "Filters points based on the value of an specified attribute.",
          "enum": [
            "pointCloudValueFilter"
          ]
        },
        "values": {
          "type": "array",
          "description": "list of values",
          "items": {
            "type": "number"
          }
        }
      },
      "required": [
        "field",
        "mode",
        "type",
        "values"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "PointCloud Value Filter",
            "description": "",
            "code": {
              "filters": [
                {
                  "type": "pointCloudValueFilter",
                  "field": "USAGE",
                  "values": [
                    1,
                    3,
                    7
                  ],
                  "mode": "include"
                }
              ]
            }
          }
        ]
      }
    },
    "rangeInfo_schema.json": {
      "title": "Range Information",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Range Information",
      "properties": {
        "currentRangeExtent": {
          "type": "array",
          "description": "Contains the min and max values within which the features are visible.",
          "items": {
            "type": "number"
          },
          "minItems": 2,
          "maxItems": 2
        },
        "field": {
          "type": "string",
          "description": "Field name to used for the range."
        },
        "fullRangeExtent": {
          "type": "array",
          "description": "Contains the min and max values of all the features for this rangeInfo.",
          "items": {
            "type": "number"
          },
          "minItems": 2,
          "maxItems": 2
        },
        "name": {
          "type": "string",
          "description": "A unique name that can be referenced by webMap.activeRanges."
        },
        "type": {
          "type": "string",
          "description": "Type of range object.",
          "enum": [
            "rangeInfo"
          ]
        }
      },
      "required": [
        "field",
        "name",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "rangeInfo",
            "schema": "layerDefinition_schema.json",
            "code": {
              "layerDefinition": {
                "rangeInfos": [
                  {
                    "type": "rangeInfo",
                    "name": "floors",
                    "field": "floor",
                    "currentRangeExtent": [
                      -2,
                      10
                    ],
                    "fullRangeExtent": [
                      -2,
                      100
                    ]
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "source_schema.json": {
      "title": "source",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Contains [dynamicDataLayer](dynamicDataLayer_source.md) object and [dynamicMapLayer](dynamicDataLayer_source.md) object. If the service supports dynamic layers, the [layerDefinition\u0027s ](layerDefinition.md) source property must be specified.",
      "oneOf": [
        {
          "$ref": "#/definitions/dynamicDataLayer_source_schema.json"
        },
        {
          "$ref": "#/definitions/dynamicMapLayer_source_schema.json"
        }
      ]
    },
    "dynamicDataLayer_source_schema.json": {
      "title": "Dynamic data layer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "A dynamic data layer derived from a registered workspace. More information on this can be found in the [ArcGIS REST API help](http://resources.arcgis.com/en/help/rest/apiref/layersource.html).",
      "properties": {
        "dataSource": {
          "type": "object",
          "description": "The layer\u0027s data source.",
          "$ref": "#/definitions/dataSource_schema.json"
        },
        "fields": {
          "type": "array",
          "description": "An array of objects specifying information about an attribute field.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/field_schema.json"
          },
          "uniqueItems": true
        },
        "type": {
          "type": "string",
          "description": "A string value indicating the type.",
          "enum": [
            "dataLayer"
          ]
        }
      },
      "required": [
        "dataSource",
        "type"
      ],
      "additionalProperties": false
    },
    "dataSource_schema.json": {
      "title": "dataSource",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "This object applies if the [layerDefinition](layerDefinition.md) source is set to `DynamicDataLayer`.",
      "oneOf": [
        {
          "$ref": "#/definitions/joinTableDataSource_schema.json"
        },
        {
          "$ref": "#/definitions/queryTableDataSource_schema.json"
        },
        {
          "$ref": "#/definitions/rasterDataSource_schema.json"
        },
        {
          "$ref": "#/definitions/tableDataSource_schema.json"
        }
      ]
    },
    "joinTableDataSource_schema.json": {
      "title": "Join Table DataSource",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Join Table data source is the result of a join operation. Nested joins are supported. To use nested joins, set either leftTableSource or rightTableSource to be a joinTable.",
      "properties": {
        "joinType": {
          "type": "string",
          "description": "The type of join (left outer or left inner).",
          "enum": [
            "esriLeftOuterJoin",
            "esriLeftInnerJoin"
          ]
        },
        "leftTableKey": {
          "type": "string",
          "description": "Field name from the left table."
        },
        "leftTableSource": {
          "type": "object",
          "description": "The left source. If the leftTableSource is a table, the resulting joinTable is a table. If the leftTableSource is a layer, the resulting joinTable is a layer.",
          "$ref": "#/definitions/source_schema.json"
        },
        "rightTableKey": {
          "type": "string",
          "description": "Field name from the right table."
        },
        "rightTableSource": {
          "type": "object",
          "description": "The right table source.",
          "$ref": "#/definitions/source_schema.json"
        },
        "type": {
          "type": "string",
          "description": "String value indicating the type for the dataSource.",
          "enum": [
            "joinTable"
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Join Table DataSource",
            "code": {
              "dataSource": {
                "type": "joinTable",
                "leftTableSource": {
                  "type": "mapLayer",
                  "mapLayerId": 0
                },
                "rightTableSource": {
                  "type": "dataLayer",
                  "dataSource": {
                    "type": "table",
                    "workspaceId": "MAP",
                    "dataSourceName": "MAP.user1.TaxLots",
                    "gdbVersion": "MAP.Version1"
                  }
                },
                "leftTableKey": "STATE_FIPS",
                "rightTableKey": "FIPS",
                "joinType": "esriLeftOuterJoin"
              }
            }
          }
        ]
      }
    },
    "queryTableDataSource_schema.json": {
      "title": "Query Table DataSource",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Query table data source is a layer/table that is defined by a SQL query.",
      "properties": {
        "geometryType": {
          "type": "string",
          "description": "The geometry type. When querying a table that does not have a geometry column, do not include geometryType.",
          "enum": [
            "esriGeometryPoint",
            "esriGeometryMultipoint",
            "esriGeometryPolyline",
            "esriGeometryPolygon"
          ]
        },
        "oidFields": {
          "type": "string",
          "description": "Comma separated list of identifier fields. There are only certain field types that can be used as a unique identifier. These field types include integer, string, GUID, and date. If a single integer field is specified, map server uses the values in that field directly to uniquely identify all features and rows returned from a queryTable. However, if a single string field or a group of fields is used as the unique identifier, map server maps those unique values to an integer."
        },
        "query": {
          "type": "string",
          "description": "The SQL query."
        },
        "spatialReference": {
          "type": "object",
          "description": "The spatial reference of the geometry column. When querying a table that does not have a geometry column, do not include spatialReference.",
          "$ref": "#/definitions/spatialReference_schema.json"
        },
        "type": {
          "type": "string",
          "description": "String value indicating the type for the dataSource.",
          "enum": [
            "queryTable"
          ]
        },
        "workspaceId": {
          "type": "string",
          "description": "The unique string value used to identify the datasource\u0027s workspace."
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Query Table dataSource",
            "code": {
              "dataSource": {
                "type": "queryTable",
                "workspaceId": "SqlMAP",
                "oidFields": "taxlotid",
                "query": "SELECT * FROM TaxLots",
                "geometryType": "esriGeometryPolygon",
                "spatialReference": {
                  "wkid": 4326
                }
              }
            }
          }
        ]
      }
    },
    "rasterDataSource_schema.json": {
      "title": "Raster DataSource",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Raster data source is a file-based raster that resides in a registered raster workspace.",
      "properties": {
        "dataSourceName": {
          "type": "string",
          "description": "The raster datasource\u0027s name."
        },
        "type": {
          "type": "string",
          "description": "String value indicating the type for the dataSource.",
          "enum": [
            "raster"
          ]
        },
        "workspaceId": {
          "type": "string",
          "description": "The unique string value used to identify the datasource\u0027s workspace."
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Raster DataSource",
            "code": {
              "dataSource": {
                "type": "raster",
                "workspaceId": "rasterWS",
                "dataSourceName": "NewOrleans.tif"
              }
            }
          }
        ]
      }
    },
    "tableDataSource_schema.json": {
      "title": "Table DataSource",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Table data source is a table, feature class, or raster that resides in a registered workspace (either a folder or geodatabase). In the case of a geodatabase, if versioned, use version to switch to an alternate geodatabase version. If version is empty or missing, the registered geodatabase version will be used.",
      "properties": {
        "dataSourceName": {
          "type": "string",
          "description": "The fully-qualified string value used to specify where the dataSource is derived."
        },
        "gdbVersion": {
          "type": "string",
          "description": "If applicable, the value indicating the version of the geodatabase."
        },
        "type": {
          "type": "string",
          "description": "String value indicating the type for the dataSource. The value for a Table DataSource is `table`.",
          "enum": [
            "table"
          ]
        },
        "workspaceId": {
          "type": "string",
          "description": "The unique string value used to identify the datasource\u0027s workspace."
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Table DataSource",
            "code": {
              "dataSource": {
                "type": "table",
                "workspaceId": "MyDatabaseWorkspaceIDSSR2",
                "dataSourceName": "ss6.gdb.Lakes"
              }
            }
          }
        ]
      }
    },
    "dynamicMapLayer_source_schema.json": {
      "title": "Dynamic map layer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "A dynamic map layer refers to a layer in the current map service. More information on this can be found in the [ArcGIS REST API help](http://resources.arcgis.com/en/help/rest/apiref/layersource.html).",
      "properties": {
        "gdbVersion": {
          "type": "string",
          "description": "If applicable, specify this to use an alternate geodatabase version."
        },
        "mapLayerId": {
          "type": "integer",
          "description": "The current map layer\u0027s id."
        },
        "type": {
          "type": "string",
          "description": "A string value indicating the type.",
          "enum": [
            "mapLayer"
          ]
        }
      },
      "required": [
        "mapLayerId",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "dynamicMapLayer",
            "code": {
              "source": {
                "type": "mapLayer",
                "mapLayerId": 3,
                "gdbVersion": "SDE.dynamicLayers"
              }
            }
          }
        ]
      }
    },
    "type_schema.json": {
      "title": "type",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Contains information about an attribute field.",
      "properties": {
        "domains": {
          "type": "object",
          "description": "A comma-delimited series of domain objects for each domain in the type.",
          "patternProperties": {
            ".*": {
              "type": "object",
              "$ref": "#/definitions/domain_schema.json"
            }
          }
        },
        "id": {
          "description": "A unique string or numerical ID for the type.",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            }
          ]
        },
        "name": {
          "type": "string",
          "description": "A user-friendly name for the type."
        },
        "templates": {
          "type": "array",
          "description": "Defined as a property of the layer definition when there are no types defined; otherwise, templates are defined as properties of the types.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/template_schema.json"
          },
          "uniqueItems": true
        }
      },
      "required": [
        "id"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "types",
            "code": {
              "types": {
                "name": "Active",
                "domains": {
                  "status": {
                    "type": "inherited"
                  },
                  "hazardous_issue": {
                    "type": "inherited"
                  },
                  "severity": {
                    "type": "inherited"
                  }
                },
                "templates": [
                  {
                    "name": "Active",
                    "description": "",
                    "prototype": {
                      "attributes": {
                        "status": "1"
                      }
                    },
                    "drawingTool": "esriFeatureEditToolPoint"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "template_schema.json": {
      "title": "template",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Templates describe features that can be created in a layer. They are generally used with feature collections and editable web-based CSV layers. Templates are not used with ArcGIS feature services as these already have templates defined in the service. They are also defined as properties of the layer definition when there are no defined types. Otherwise, templates are defined as properties of the types.",
      "properties": {
        "description": {
          "type": "string",
          "description": "A string value containing a detailed description of the template."
        },
        "drawingTool": {
          "type": "string",
          "description": "An optional string that can define a client-side drawing tool to be used with this feature.",
          "enum": [
            "esriFeatureEditToolAutoCompletePolygon",
            "esriFeatureEditToolPolygon",
            "esriFeatureEditToolTriangle",
            "esriFeatureEditToolRectangle",
            "esriFeatureEditToolLeftArrow",
            "esriFeatureEditToolRightArrow",
            "esriFeatureEditToolEllipse",
            "esriFeatureEditToolUpArrow",
            "esriFeatureEditToolDownArrow",
            "esriFeatureEditToolCircle",
            "esriFeatureEditToolFreehand",
            "esriFeatureEditToolLine",
            "esriFeatureEditToolNone",
            "esriFeatureEditToolText",
            "esriFeatureEditToolPoint"
          ]
        },
        "name": {
          "type": "string",
          "description": "A string containing a user-friendly name for the template."
        },
        "prototype": {
          "type": "object",
          "description": "A feature object representing a prototypical feature for the template.",
          "$ref": "#/definitions/feature_schema.json"
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "additionalInformation": "drawingTool strings: esriFeatureEditToolPolygon, esriFeatureEditToolTriangle, esriFeatureEditToolRectangle, esriFeatureEditToolLeftArrow, esriFeatureEditToolRightArrow, esriFeatureEditToolEllipse, esriFeatureEditToolUpArrow, esriFeatureEditToolDownArrow, esriFeatureEditToolCircle, esriFeatureEditToolFreehand, esriFeatureEditToolLine, esriFeatureEditToolText, esriFeatureEditToolPoint",
        "examples": [
          {
            "title": "template",
            "code": {
              "template": {
                "drawingTool": "esriFeatureEditToolFreehand",
                "description": "Groomed cross-country skiing trails",
                "name": "X-country skiing",
                "prototype": {
                  "attributes": {
                    "VISIBLE": 1,
                    "TITLE": "Cross-country skiing",
                    "TYPEID": 5
                  }
                }
              }
            }
          }
        ]
      }
    },
    "popupInfo_schema.json": {
      "title": "popupInfo",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Defines the look and feel of popup windows when a user clicks or queries a feature.",
      "properties": {
        "description": {
          "description": "A string that appears in the body of the popup window as a description. It is also possible to specify the description as HTML-formatted content.",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "expressionInfos": {
          "type": "array",
          "description": "List of Arcade expressions added to the pop-up.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/popupExpressionInfo_schema.json"
          }
        },
        "fieldInfos": {
          "type": "array",
          "description": "Array of fieldInfo information properties. This information is provided by the service layer definition.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/fieldInfo_schema.json"
          }
        },
        "layerOptions": {
          "type": "object",
          "description": "Additional options that can be defined for the popup layer.",
          "$ref": "#/definitions/popupLayerOptions_schema.json"
        },
        "mediaInfos": {
          "type": "array",
          "description": "Array of various mediaInfo to display. Can be of type `image`, `piechart`, `barchart`, `columnchart`, or `linechart`. The order given is the order in which it displays.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/mediaInfo_schema.json"
          }
        },
        "popupElements": {
          "type": "array",
          "description": "An array of popupElement objects that represent an ordered list of popup elements.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/popupElement_schema.json"
          }
        },
        "relatedRecordsInfo": {
          "type": "object",
          "description": "Indicates whether to enable related records if they exist on a layer.",
          "$ref": "#/definitions/relatedRecordsInfo_schema.json"
        },
        "showAttachments": {
          "type": "boolean",
          "description": "Indicates whether attachments will be loaded for feature layers that have attachments."
        },
        "title": {
          "type": "string",
          "description": "A string that appears at the top of the popup window as a title."
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "popupInfo",
            "code": {
              "popupInfo": {
                "title": "Postcode status",
                "fieldInfos": [
                  {
                    "fieldName": "expression/expr1",
                    "visible": true,
                    "format": {
                      "digitSeparator": true,
                      "places": 0
                    }
                  },
                  {
                    "fieldName": "expression/expr2",
                    "visible": true
                  },
                  {
                    "fieldName": "ID",
                    "label": "ID",
                    "tooltip": "Identifier",
                    "visible": true,
                    "format": {
                      "places": 0,
                      "digitSeparator": true
                    },
                    "stringFieldOption": "textbox"
                  },
                  {
                    "fieldName": "relationships/0/Status",
                    "label": "Status",
                    "isEditable": false,
                    "visible": true,
                    "stringFieldOption": "textbox"
                  },
                  {
                    "fieldName": "relationships/2/Postcode",
                    "label": "Postcode",
                    "isEditable": false,
                    "visible": false,
                    "stringFieldOption": "textbox"
                  }
                ],
                "showAttachments": true,
                "relatedRecordsInfo": {
                  "showRelatedRecords": true,
                  "orderByFields": [
                    {
                      "field": "relationships/0/Identifier",
                      "order": "asc"
                    },
                    {
                      "field": "relationships/1/Status",
                      "order": "desc"
                    }
                  ]
                },
                "mediaInfos": [
                  {
                    "title": "Chart stats",
                    "type": "barchart",
                    "caption": "For a better idea...",
                    "value": {
                      "fields": [
                        "relationships/0/Pledge"
                      ],
                      "tooltipField": "relationships/2/Official"
                    }
                  },
                  {
                    "type": "barchart",
                    "title": "{pop2000} / 2 \u003d {expression/expr4}",
                    "value": {
                      "fields": [
                        "expression/expr4",
                        "pop2000"
                      ]
                    }
                  }
                ],
                "popupElements": [
                  {
                    "type": "text"
                  },
                  {
                    "type": "fields"
                  },
                  {
                    "type": "media"
                  },
                  {
                    "type": "attachments"
                  }
                ],
                "expressionInfos": [
                  {
                    "name": "expr1",
                    "title": "Population (Expr)",
                    "expression": "$feature.pop2000",
                    "returnType": "number"
                  },
                  {
                    "name": "expr2",
                    "title": "Name (Abbr) (Expr)",
                    "expression": "$feature.state_name + \u0027 (\u0027 + $feature.state_abbr + \u0027)\u0027",
                    "returnType": "string"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "popupExpressionInfo_schema.json": {
      "title": "popupExpressionInfo",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Arcade expression added to the pop-up.",
      "properties": {
        "expression": {
          "type": "string",
          "description": "The Arcade expression."
        },
        "name": {
          "type": "string",
          "description": "Unique identifier for the expression."
        },
        "returnType": {
          "type": "string",
          "description": "Return type of the Arcade expression, can be number or string. Defaults to string value. Number values are assumed to be `double`. This can be determined by the authoring client by executing the expression using a sample feature(s), although it can be corrected by the user. Knowing the returnType allows the authoring client to present fields in relevant contexts. For example, numeric fields in numeric contexts such as charts.",
          "enum": [
            "number",
            "string"
          ]
        },
        "title": {
          "type": "string",
          "description": "Title of the expression."
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "code": {
              "expressionInfos": [
                {
                  "name": "expr1",
                  "title": "Population (Expr)",
                  "expression": "$feature.pop2000",
                  "returnType": "number"
                },
                {
                  "name": "expr2",
                  "title": "Name (Abbr) (Expr)",
                  "expression": "$feature.state_name + \u0027 (\u0027 + $feature.state_abbr + \u0027)\u0027",
                  "returnType": "string"
                }
              ]
            }
          }
        ]
      }
    },
    "fieldInfo_schema.json": {
      "title": "fieldInfo",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Defines how a field in the dataset participates (or does not participate) in a popup window.",
      "properties": {
        "fieldName": {
          "type": "string",
          "description": "A string containing the field name as defined by the service. Anywhere that a fieldname is referenced as `{field-name} in popupInfo, an Arcade expression can also be referenced as `{expression/\u003cexpression-name\u003e}`."
        },
        "format": {
          "type": "object",
          "description": "A format object used with numerical or date fields to provide more detail about how the value should be displayed in a popup window.",
          "$ref": "#/definitions/format_schema.json"
        },
        "isEditable": {
          "type": "boolean",
          "description": "A Boolean determining whether users can edit this field. Not applicable to Arcade expressions."
        },
        "label": {
          "type": "string",
          "description": "A string containing the field alias. Not applicable to Arcade expressions as `title` is used instead."
        },
        "stringFieldOption": {
          "type": "string",
          "description": "A string determining what type of input box editors see when editing the field. Applies only to string fields. Not applicable to Arcade expressions.",
          "enum": [
            "textbox",
            "textarea",
            "richtext"
          ]
        },
        "tooltip": {
          "type": "string",
          "description": "A string providing an editing hint for editors of the field. Not applicable to Arcade expressions."
        },
        "visible": {
          "type": "boolean",
          "description": "A Boolean determining whether the field is visible in the popup window."
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "fieldInfo",
            "code": {
              "fieldInfo": {
                "fieldName": "relationships/2/Postcode",
                "label": "Postcode",
                "isEditable": false,
                "visible": false,
                "stringFieldOption": "textbox"
              }
            }
          }
        ]
      }
    },
    "format_schema.json": {
      "title": "format",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The format object can be used with numerical or date fields to provide more detail about how values should be displayed in popup windows.",
      "properties": {
        "dateFormat": {
          "type": "string",
          "description": "A string used with date fields to specify how the date should appear in popup windows.",
          "enum": [
            "shortDate",
            "shortDateLE",
            "longMonthDayYear",
            "dayShortMonthYear",
            "longDate",
            "shortDateShortTime",
            "shortDateLEShortTime",
            "shortDateShortTime24",
            "shortDateLEShortTime24",
            "shortDateLongTime",
            "shortDateLELongTime",
            "shortDateLongTime24",
            "shortDateLELongTime24",
            "longMonthYear",
            "shortMonthYear",
            "year"
          ]
        },
        "digitSeparator": {
          "type": "boolean",
          "description": "A Boolean used with numerical fields. A value of true allows the number to have a digit (or thousands) separator when the value appears in popup windows. Depending on the locale, this separator is a decimal point or a comma. A value of false means that no separator will be used."
        },
        "places": {
          "type": "integer",
          "description": "An integer used with numerical fields to specify the number of supported decimal places that should appear in popup windows. Any places beyond this value are rounded."
        }
      },
      "additionalProperties": false
    },
    "popupLayerOptions_schema.json": {
      "title": "Layer Options",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Additional options available for the popup layer.",
      "properties": {
        "showNoDataRecords": {
          "type": "boolean",
          "description": "Indicates whether or not the NoData records should be displayed."
        }
      }
    },
    "mediaInfo_schema.json": {
      "title": "mediaInfo",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Defines an image or a chart to be displayed in a popup window.",
      "properties": {
        "caption": {
          "type": "string",
          "description": "A string caption describing the media."
        },
        "refreshInterval": {
          "type": "number",
          "description": "Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled. If the property does not exist, it\u0027s equivalent to having a value of 0. Only applicable when `type` is set to `image`.",
          "default": 0
        },
        "title": {
          "description": "A string title for the media.",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "type": {
          "type": "string",
          "description": "A string defining the type of media.",
          "enum": [
            "image",
            "barchart",
            "columnchart",
            "linechart",
            "piechart"
          ]
        },
        "value": {
          "description": "A value object containing information about how the image should be retrieved or how the chart should be constructed.",
          "oneOf": [
            {
              "$ref": "#/definitions/value_schema.json"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "mediaInfo",
            "code": {
              "mediaInfo": {
                "title": "Chart stats",
                "type": "barchart",
                "caption": "For a better idea...",
                "value": {
                  "fields": [
                    "relationships/0/Pledge"
                  ],
                  "tooltipField": "relationships/2/Official"
                }
              }
            }
          }
        ]
      }
    },
    "value_schema.json": {
      "title": "value",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The value object contains information for popup windows about how images should be retrieved or charts constructed.",
      "properties": {
        "fields": {
          "type": "array",
          "description": "Used with charts. An array of strings, with each string containing the name of a field to display in the chart.",
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        },
        "linkURL": {
          "type": "string",
          "description": "Used with images. A string containing a URL to be launched in a browser when a user clicks the image."
        },
        "normalizeField": {
          "type": "string",
          "description": "Used with charts. An optional string containing the name of a field. The values of all fields in the chart will be normalized (divided) by the value of this field."
        },
        "sourceURL": {
          "type": "string",
          "description": "Used with images. A string containing the URL to the image."
        },
        "tooltipField": {
          "type": "string",
          "description": "String value indicating the tooltip for a chart specified from another field. This field is needed when related records are not sued. It is used for showing tooltips from another field in the same layer or related layer/table."
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "value",
            "code": {
              "value": {
                "fields": [
                  "relationships/0/Pledge"
                ],
                "tooltipField": "relationships/2/Official"
              }
            }
          }
        ]
      }
    },
    "popupElement_schema.json": {
      "title": "popupElement",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Popup elements allow users to author popups, using multiple elements such as tabular views, string description, media (charts and images), and attachments of the attributes and control the order in which they appear. Specifically, popupElements do the following: 1) provide the ability to explicitly add a field/ value table in addition to a description, 2) allow adding multiple description elements, and 3) allow a user to author and consume elements of a popup in the order of their choosing.",
      "properties": {
        "displayType": {
          "type": "string",
          "description": "This property applies to elements of type `attachments`. A string value indicating how to display the attachment. Possible values are, `preview`, and `list`. If `list` is specified, attachments show as links."
        },
        "fieldInfos": {
          "type": "array",
          "description": "This property applies to elements of type `fields`.  It is an array of [popupInfo.fieldInfo](fieldInfo.md) objects representing a field/value pair displayed as a table within the popupElement. If the `fieldInfos` property is not provided, the popupElement will display whatever is specified directly in the [popupInfo.fieldInfos](popupInfo.md) property.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/fieldInfo_schema.json"
          }
        },
        "mediaInfos": {
          "type": "array",
          "description": "This property applies to elements of type `media`. An array of [popupInfo.mediaInfo](popupInfo.md) objects representing an image or chart for display. If no `mediaInfos` property is provided, the popupElement will display whatever is specified in the [popupInfo.mediaInfo](popupInfo.md) property.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/mediaInfo_schema.json"
          }
        },
        "text": {
          "type": "string",
          "description": "This property applies to elements of type `text`. This is string value indicating the text to be displayed within the popupElement. If no `text` property is provided, the popupElement will display whatever is specified in the [popupInfo.description](popupInfo.md) property."
        },
        "type": {
          "type": "string",
          "description": "String value indicating which elements to use.",
          "enum": [
            "text",
            "fields",
            "media",
            "attachments"
          ]
        }
      },
      "esriDocumentation": {
        "additionalInformation": "Each popupElement has a `type` property. This string value indicates the type of popupElement used.",
        "examples": [
          {
            "title": "popupElement",
            "code": {
              "popupElements": [
                {
                  "type": "text",
                  "text": "Some descriptive text describing the popup."
                },
                {
                  "type": "fields",
                  "fieldInfos": []
                },
                {
                  "type": "media",
                  "mediaInfos": []
                },
                {
                  "type": "attachments",
                  "displayType": "list"
                }
              ]
            }
          }
        ]
      }
    },
    "relatedRecordsInfo_schema.json": {
      "title": "relatedRecordsInfo",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The sort in the popupInfo for the parent feature. This impacts the sorting order for the returned child records.",
      "properties": {
        "orderByFields": {
          "type": "array",
          "description": "Array of orderByFields objects indicating the field display order for the related records and whether they should be sorted in ascending \u003ccode\u003e\u0027asc\u0027\u003c/code\u003e or descending \u003ccode\u003e\u0027desc\u0027\u003c/code\u003e order.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/orderByFields_schema.json"
          }
        },
        "showRelatedRecords": {
          "type": "boolean",
          "description": "Required boolean value indicating whether to display related records. If \u003ccode\u003etrue\u003c/code\u003e, client should let the user navigate to the related records. Defaults to \u003ccode\u003etrue\u003c/code\u003e if the layer participates in a relationship AND the related layer/table has already been added to the scene (either as an operationalLayer or as a table)."
        }
      },
      "esriDocumentation": {
        "examples": [
          {
            "title": "relatedRecordsInfo",
            "code": {
              "relatedRecordsInfo": {
                "showRelatedRecords": true,
                "orderByFields": [
                  {
                    "field": "relationships/0/FieldName",
                    "order": "asc"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "orderByFields_schema.json": {
      "title": "orderByFields",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Object indicating the field display order for the related records and whether they should be sorted in ascending or descending order.",
      "properties": {
        "field": {
          "type": "string",
          "description": "The attribute value of the field selected that will drive the sorting of related records."
        },
        "order": {
          "type": "string",
          "description": "Set the ascending or descending sort order of the returned related records.",
          "enum": [
            "asc",
            "desc"
          ]
        }
      },
      "esriDocumentation": {
        "examples": [
          {
            "title": "orderByFields",
            "code": {
              "orderByFields": [
                {
                  "field": "relationships/0/FieldName",
                  "order": "asc"
                }
              ]
            }
          }
        ]
      }
    }
  }
}