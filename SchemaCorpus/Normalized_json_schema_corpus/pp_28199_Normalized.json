{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "orderItem",
  "id": "orderItem",
  "description": "An item on an order. The details of the order item are specified in the productSpecOrderDetails.",
  "type": "object",
  "required": [
    "objectType",
    "orderItemReference",
    "action",
    "quantity"
  ],
  "properties": {
    "objectType": {
      "type": "string",
      "enum": [
        "orderItem"
      ],
      "description": "The type of the object, orderItem."
    },
    "orderItemReference": {
      "type": "string",
      "description": "A reference number that can be used to refer to this order item.",
      "maxLength": 4
    },
    "action": {
      "type": "string",
      "enum": [
        "INSTALL",
        "CHANGE",
        "NO_CHANGE",
        "DELETE"
      ],
      "description": "The action to be taken for this order item (E.g. Install, Change)."
    },
    "quantity": {
      "type": "integer",
      "description": "The quantity for the order item.",
      "minimum": 1
    },
    "orderItemStatus": {
      "type": "string",
      "enum": [
        "ACKNOWLEDGED",
        "IN_PROGRESS",
        "CANCELLED",
        "COMPLETED",
        "REJECTED",
        "PENDING",
        "HELD",
        "FAILED",
        "PARTIAL"
      ],
      "description": "The status of the order."
    },
    "orderItemDetail": {
      "type": "object",
      "description": "The ordering representation of the product specification being ordered with this order item.",
      "oneOf": [
        {
          "$ref": "#/definitions/accessElineProductOrder"
        },
        {
          "$ref": "#/definitions/uniProductOrder"
        },
        {
          "$ref": "#/definitions/disconnectOrderItemDetail"
        }
      ]
    }
  },
  "definitions": {
    "accessElineProductOrder": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "accessElineProductOrder",
      "description": "An orderable representation of an Access Eline Product.",
      "type": "object",
      "required": [
        "objectType",
        "productSpecification",
        "uniReference"
      ],
      "properties": {
        "objectType": {
          "type": "string",
          "enum": [
            "accessElineProductOrder"
          ],
          "description": "The type of the object, Eline."
        },
        "sellerOvcId": {
          "type": "string",
          "description": "The circuit identifier that the Seller uses to refer to this OVC.",
          "maxLength": 45
        },
        "buyerOvcId": {
          "type": "string",
          "description": "The circuit identifier that the Partner/Access Provider (Buyer) uses to refer to this OVC.",
          "maxLength": 45
        },
        "productSpecification": {
          "$ref": "#/definitions/productSpecRef",
          "description": "A reference to the Partner/Access Provider (Seller) Product Specification (product catalog item) that the buyer is ordering."
        },
        "enniSvlanId": {
          "type": "integer",
          "description": "The S-VLAN ID to be used for this service.",
          "minimum": 0,
          "maximum": 4095
        },
        "ovcMaximumFrameSize": {
          "type": "integer",
          "description": "The maximum frame size provides the upper bounds on the length of an ingress frame . An integer greater or equal to 1526.",
          "minimum": 1526
        },
        "colorForwardingEnabled": {
          "type": "boolean",
          "description": "Color Forwarding is an OVC attribute defining the relationship between the color on an egress ENNI frame and the color of the corresponding ingress ENNI Frame or Service Frame.  For ordering, this attribute identifies if the Buyer requests Color Forwarding for this service"
        },
        "classOfServiceName": {
          "type": "string",
          "description": "The name of the service level for this Access Eline. (E.g. Gold).",
          "maxLength": 20
        },
        "enniReference": {
          "type": "object",
          "description": "A reference to an existing or ordered ENNI.",
          "oneOf": [
            {
              "$ref": "#/definitions/orderedEnniReference"
            },
            {
              "$ref": "#/definitions/existingEnniReference"
            }
          ]
        },
        "enniSiteContact": {
          "$ref": "#/definitions/contact",
          "description": "The primary site contact for the ENNI site."
        },
        "enniSiteAlternateContact": {
          "$ref": "#/definitions/contact",
          "description": "The secondary site contact for the ENNI site."
        },
        "enniIngressBandwidthProfile": {
          "$ref": "#/definitions/bandwidthProfile",
          "description": "The ingress bandwidth profile at the ENNI end of the OVC that implements the Access Eline."
        },
        "uniReference": {
          "type": "object",
          "description": "A reference to an existing or ordered UNI.",
          "oneOf": [
            {
              "$ref": "#/definitions/orderedUniReference"
            },
            {
              "$ref": "#/definitions/existingUniReference"
            }
          ]
        },
        "uniSiteContact": {
          "$ref": "#/definitions/contact",
          "description": "The primary site contact for the UNI site. The UNI site contacts are ONLY required when the UNI is NOT on the same Order as the Access Eline."
        },
        "uniSiteAlternateContact": {
          "$ref": "#/definitions/contact",
          "description": "The secondary site contact for the UNI site. The UNI site contacts are ONLY required when the UNI is NOT on the same Order as the Access Eline."
        },
        "uniIngressBandwidthProfile": {
          "$ref": "#/definitions/bandwidthProfile",
          "description": "The ingress bandwidth profile at the UNI end of the OVC that implements the Access Eline."
        }
      }
    },
    "productSpecRef": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "productSpecRef",
      "description": "A reference (by name, id or link) to a Product Specification.",
      "type": "object",
      "required": [
        "objectType"
      ],
      "properties": {
        "objectType": {
          "type": "string",
          "enum": [
            "productSpecRef"
          ],
          "description": "The type of the object, A Product Specification Reference."
        },
        "name": {
          "type": "string",
          "description": "The name a product (specification) is known by within an organization (e.g., Access EVPL 100).",
          "maxLength": 25
        },
        "code": {
          "type": "string",
          "description": "Unique identifier that an organization uses for a product (specification) in its internal systems that can refer to one or a set of products (e.g., AEVPL100).",
          "maxLength": 15
        },
        "productSpecification": {
          "$ref": "#/definitions/resourceReference",
          "description": "A reference to the Partner/Access Provider (Seller) Product Specification (product catalog item) that the buyer is ordering."
        }
      }
    },
    "resourceReference": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "resourceReference",
      "description": "A reference to a resource, including it\u0027s ID, type, and a link to retrieve the resource.",
      "type": "object",
      "required": [
        "objectType",
        "id",
        "type",
        "link"
      ],
      "properties": {
        "objectType": {
          "type": "string",
          "enum": [
            "resourceReference"
          ],
          "description": "The type of the object, resourceReference."
        },
        "id": {
          "type": "string",
          "description": "The resource\u0027s unique identifier.",
          "maxLength": 45
        },
        "type": {
          "type": "string",
          "description": "Specifies the type for the referenced resource.",
          "maxLength": 25
        },
        "link": {
          "$ref": "#/definitions/link",
          "description": "A link for accessing the resource."
        }
      }
    },
    "link": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "link",
      "description": "Specifies relationships between the current document and an external resource.",
      "type": "object",
      "required": [
        "objectType",
        "href",
        "rel"
      ],
      "properties": {
        "objectType": {
          "type": "string",
          "description": "The type of the object, link.",
          "maxLength": 25
        },
        "href": {
          "type": "string",
          "description": "A URL. Specifies the location of the linked document.",
          "maxLength": 255
        },
        "rel": {
          "type": "string",
          "description": "Specifies the relationship between the current document and the linked document.",
          "maxLength": 25
        },
        "title": {
          "type": "string",
          "description": "Provide additional / advisory information (expand on the meaning of the link).",
          "maxLength": 25
        },
        "method": {
          "type": "string",
          "enum": [
            "get",
            "post"
          ],
          "description": "Specifies how to send the data (e.g. get, post)."
        },
        "type": {
          "type": "string",
          "description": "Specifies the media type of the linked document.",
          "maxLength": 25
        }
      }
    },
    "orderedEnniReference": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "orderedEnniReference",
      "description": "A reference to an ordered ENNI. The ENNI is referenced on an Order by customer order number (PON), and order item reference.",
      "type": "object",
      "required": [
        "objectType",
        "orderItemReference"
      ],
      "properties": {
        "objectType": {
          "type": "string",
          "enum": [
            "orderedEnniReference"
          ],
          "description": "The type of the object, orderedEnniReference."
        },
        "orderId": {
          "type": "string",
          "description": "A unique identifier for an order.",
          "maxLength": 45
        },
        "buyerPurchaseOrderNumber": {
          "type": "string",
          "description": "The purchase order number for the order that contains the referenced ENNI. This is required if the ordered ENNI is not on the same order as the orderedUniReference.",
          "maxLength": 16
        },
        "orderItemReference": {
          "type": "string",
          "description": "A reference number that can be used to refer to the order item of ordered ENNI.",
          "maxLength": 4
        }
      }
    },
    "existingEnniReference": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "existingEnniReference",
      "description": "A reference to an existing ENNI.",
      "type": "object",
      "required": [
        "objectType",
        "sellerEnniId"
      ],
      "properties": {
        "objectType": {
          "type": "string",
          "enum": [
            "existingEnniReference"
          ],
          "description": "The type of the object, existingEnniReference."
        },
        "sellerEnniId": {
          "type": "string",
          "description": "The circuit identifier that the seller uses to refer to this ENNI.",
          "maxLength": 45
        },
        "buyerEnniId": {
          "type": "string",
          "description": "The circuit identifier that the buyer uses to refer to this ENNI.",
          "maxLength": 45
        }
      }
    },
    "contact": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "contact",
      "description": "Represents a contact.",
      "type": "object",
      "required": [
        "objectType",
        "name",
        "telephoneNumber"
      ],
      "properties": {
        "objectType": {
          "type": "string",
          "enum": [
            "contact"
          ],
          "description": "The type of the object, contact."
        },
        "name": {
          "type": "string",
          "description": "Identifies the name of the person or office.",
          "maxLength": 50
        },
        "telephoneNumber": {
          "type": "string",
          "description": "Identifies the telephone number (excluding extension) of the Contact.",
          "maxLength": 15
        },
        "telephoneNumberExt": {
          "type": "string",
          "description": "Identifies the telephone number extension of the Contact.",
          "maxLength": 6
        },
        "email": {
          "type": "string",
          "description": "Identifies the electronic mail address of the Contact.",
          "maxLength": 60
        }
      }
    },
    "bandwidthProfile": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "bandwidthProfile",
      "description": "Bandwidth Profile parameters. Properties that are not specified must be derivable from the Product that is being ordered, or by a Contract or Implementation Agreement between the Buyer and the Seller.",
      "type": "object",
      "required": [
        "objectType"
      ],
      "properties": {
        "objectType": {
          "type": "string",
          "enum": [
            "bandwidthProfile"
          ],
          "description": "The type of the object, bandwidthProfile."
        },
        "committedInformationRate": {
          "$ref": "#/definitions/informationRateQuantity",
          "description": "Defines the average rate in bits/s of Service or ENNI Frames up to which the network may deliver Service or Network Frames but without any performance objectives."
        },
        "committedBurstSize": {
          "type": "integer",
          "description": "Limits the maximum number of bytes available for a burst of Service or ENNI Frames sent at the EI speed to remain CIR- onformant. MUST be \u003e\u003d 12176.",
          "minimum": 12176
        },
        "excessInformationRate": {
          "$ref": "#/definitions/informationRateQuantity",
          "description": "If specified, defines the average rate in bits/s of Service or ENNI Frames up to which the network may deliver Service or Network Frames but without any performance objectives."
        },
        "excessBurstSize": {
          "type": "integer",
          "description": "If specified, limits the maximum number of bytes available for a burst of Service or ENNI Frames sent at the EI speed to remain EIR-conformant.",
          "minimum": 0
        },
        "colorMode": {
          "type": "string",
          "enum": [
            "COLOR_AWARE",
            "COLOR_BLIND"
          ],
          "description": "Color Mode parameter indicates whether the color-aware or color-blind property is employed by the Bandwidth Profile."
        },
        "couplingFlag": {
          "type": "boolean",
          "description": "The Coupling Flag allows the choice between two modes of operation of the Bandwidth Profile algorithm."
        }
      }
    },
    "informationRateQuantity": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "informationRateQuantity",
      "description": "A quantity to be used for specifying information rates.",
      "type": "object",
      "required": [
        "objectType",
        "amount",
        "units"
      ],
      "properties": {
        "objectType": {
          "type": "string",
          "enum": [
            "informationRateQuantity"
          ],
          "description": "The type of the object, bandwidthProfile."
        },
        "amount": {
          "type": "number",
          "description": "A quantity of something. Typically size, value, extent, or money."
        },
        "units": {
          "type": "string",
          "enum": [
            "Mbps",
            "Gbps"
          ],
          "description": "The unit of measure for the quantity."
        }
      }
    },
    "orderedUniReference": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "orderedUniReference",
      "description": "A reference to an ordered UNI. The UNI is referenced on an Order by customer order number (PON), and order item reference.",
      "type": "object",
      "required": [
        "objectType",
        "orderItemReference"
      ],
      "properties": {
        "objectType": {
          "type": "string",
          "enum": [
            "orderedUniReference"
          ],
          "description": "The type of the object, orderedUniReference."
        },
        "orderId": {
          "type": "string",
          "description": "An unique identifier for an order.",
          "maxLength": 45
        },
        "buyerPurchaseOrderNumber": {
          "type": "string",
          "description": "The purchase order number for the order that contains the referenced UNI. This is required if the ordered UNI is not on the same order as the orderedUniReference.",
          "maxLength": 16
        },
        "orderItemReference": {
          "type": "string",
          "description": "The order item reference for the UNI on the referenced order, or on the current order if a buyerPurchaseOrderNumber is not provided.",
          "maxLength": 4
        }
      }
    },
    "existingUniReference": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "existingUniReference",
      "description": "A reference to an existing UNI.",
      "type": "object",
      "required": [
        "objectType",
        "sellerUniId"
      ],
      "properties": {
        "objectType": {
          "type": "string",
          "enum": [
            "existingUniReference"
          ],
          "description": "The type of the object, existingUniReference."
        },
        "sellerUniId": {
          "type": "string",
          "description": "The circuit identifier that the seller uses to refer to this UNI.",
          "maxLength": 45
        },
        "buyerUniId": {
          "type": "string",
          "description": "The circuit identifier that the buyer uses to refer to this UNI.",
          "maxLength": 45
        }
      }
    },
    "uniProductOrder": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "uniProductOrder",
      "description": "An orderable representation of a UNI Product.",
      "type": "object",
      "required": [
        "objectType",
        "productSpecification"
      ],
      "properties": {
        "objectType": {
          "type": "string",
          "enum": [
            "uniProductOrder"
          ],
          "description": "The type of the object, uniProduct for an Order."
        },
        "sellerUniId": {
          "type": "string",
          "description": "The circuit identifier that the seller uses to refer to this UNI.",
          "maxLength": 45
        },
        "buyerUniId": {
          "type": "string",
          "description": "The circuit identifier that the buyer uses to refer to this UNI.",
          "maxLength": 45
        },
        "productSpecification": {
          "$ref": "#/definitions/productSpecRef",
          "description": "A reference to the Partner/Access Provider (Seller) Product Specification (product catalog item) that the buyer is ordering."
        },
        "physicalLayer": {
          "type": "string",
          "enum": [
            "10BASE_T",
            "100BASE_TX",
            "100BASE_FX",
            "1000BASE_T",
            "1000BASE_SX",
            "1000BASE_LX",
            "10GBASE_SR",
            "10GBASE_SW",
            "10GBASE_LR",
            "10GBASE_LW",
            "10GBASE_ER",
            "10GBASE_EW"
          ],
          "description": "The layer (layer 1) that provides transparent transmission of a bit stream over a circuit built from some physical communications medium."
        },
        "synchronousModeEnabled": {
          "type": "boolean",
          "description": "Identifies if the synchronous transmissions are to proceed at a constant rate."
        },
        "numberOfLinks": {
          "type": "integer",
          "description": "The number of links supporting the UNI.",
          "minimum": 1
        },
        "uniResiliency": {
          "type": "string",
          "enum": [
            "NONE",
            "2_LINK_ACTIVE_STANDBY",
            "ALL_ACTIVE",
            "OTHER"
          ],
          "description": "Indicates UNI resiliency and corresponding value."
        },
        "uniMaximumServiceFrameSize": {
          "type": "integer",
          "description": "Indicates the maximum service frame size that can be reliably processed at the UNI level. An integer greater or equal to 1522.",
          "minimum": 1522
        },
        "tokenShareEnabled": {
          "type": "boolean",
          "description": "Identifies whether a given UNI is capable of sharing tokens across Bandwidth Profile Flows in an Envelope. MEF valid values are Enabled or Disabled."
        },
        "allToOneBundlingEnabled": {
          "type": "boolean",
          "description": "All-to-One Bundling can be either Enabled or Disabled.  A value of True would equate to \u0027Enabled\u0027."
        },
        "linkOamEnabled": {
          "type": "boolean",
          "description": "Link OAM enables the operator to monitor and troubleshoot a single Ethernet link. For ordering, this is an optional parameter that may be requested."
        },
        "uniMegEnabled": {
          "type": "boolean",
          "description": "Request for monitoring of a UNI. For ordering, this is an optional parameter that may be requested."
        },
        "elmiEnabled": {
          "type": "boolean",
          "description": "Indicates the desire for management of the customer interface. For ordering, this is an optional parameter that may be requested."
        },
        "uniL2cpAddressSet": {
          "type": "string",
          "enum": [
            "CTA",
            "CTB",
            "CTB_2"
          ],
          "description": "Identifies the discard/pass action for all non-peered layer two control protocols. Enumeration: \u0027CTA\u0027, \u0027CTB\u0027 or \u0027CTB-2\u0027."
        },
        "uniL2cpPeerings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/layer2ControlProtocol"
          },
          "minItems": 1,
          "maxitems": 20,
          "uniqueItems": true,
          "description": "An array of Layer 2 Control Protocols to peer at the UNI."
        },
        "serviceSiteInformation": {
          "$ref": "#/definitions/serviceSiteInformation",
          "description": "The service site for the UNI."
        },
        "primarySiteContact": {
          "$ref": "#/definitions/contact",
          "description": "The primary site contact for the site."
        },
        "alternateSiteContact": {
          "$ref": "#/definitions/contact",
          "description": "The secondary site contact for the site."
        }
      }
    },
    "layer2ControlProtocol": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "layer2ControlProtocol",
      "description": "An identification of a specific Layer 2 Control Protocol.",
      "type": "object",
      "required": [
        "objectType",
        "destinationAddress",
        "protocolIdentifier"
      ],
      "properties": {
        "objectType": {
          "type": "string",
          "enum": [
            "layer2ControlProtocol"
          ],
          "description": "The type of the object, layer2ControlProtocol."
        },
        "destinationAddress": {
          "type": "string",
          "description": "The MAC Address used for the Layer 2 Control Protocol.",
          "maxLength": 17
        },
        "etherType": {
          "type": "string",
          "description": "A two-octet field in an Ethernet frame used to indicate which protocol is encapsulated in the payload of the frame.",
          "maxLength": 6
        },
        "subtype": {
          "type": "string",
          "description": "Subtype for Slow Protocols, in hexadecimal format.",
          "maxLength": 6
        },
        "linkId": {
          "type": "string",
          "description": "Link Identifier",
          "maxLength": 45
        }
      }
    },
    "serviceSiteInformation": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "serviceSiteInformation",
      "description": "Information about an ENNI or UNI service site.",
      "type": "object",
      "required": [
        "objectType",
        "siteAddress"
      ],
      "properties": {
        "objectType": {
          "type": "string",
          "enum": [
            "serviceSiteInformation"
          ],
          "description": "The type of the object, serviceSiteInformation."
        },
        "siteCompanyName": {
          "type": "string",
          "description": "The name of the company that is located at the Service location. This may be different from the name of the Customer that ordered services at that Service Site.",
          "maxLength": 25
        },
        "customerName": {
          "type": "string",
          "description": "The name of the end (retail) customer for the UNI.",
          "maxLength": 25
        },
        "siteAddressType": {
          "type": "string",
          "enum": [
            "FIELDED_ADDRESS",
            "FORMATTED_ADDRESS",
            "ADDRESS_REFERENCE",
            "GEOGRAPHIC_POINT"
          ]
        },
        "siteAddress": {
          "type": "object",
          "oneOf": [
            {
              "$ref": "#/definitions/formattedAddress"
            },
            {
              "$ref": "#/definitions/fieldedAddress"
            },
            {
              "$ref": "#/definitions/geographicPoint"
            },
            {
              "$ref": "#/definitions/addressReference"
            }
          ],
          "description": "A property address for the site. Either a Site Address, a Site Code or a Site Geographic Point must be specified.",
          "title": "Address"
        },
        "additionalSiteInformation": {
          "type": "string",
          "description": "Additional information about the Site. Equates to the ASR AAI field.",
          "maxLength": 100
        }
      }
    },
    "formattedAddress": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "formattedAddress",
      "description": "A structured textual way of describing how to find an address, using unformatted strings for the street address.",
      "type": "object",
      "required": [
        "objectType"
      ],
      "properties": {
        "objectType": {
          "type": "string",
          "enum": [
            "formattedAddress"
          ],
          "description": "The type of the object, formattedAddress."
        },
        "addressLine1": {
          "type": "string",
          "description": "A formatted address line that contains a non-fielded street address.",
          "maxLength": 60
        },
        "addressLine2": {
          "type": "string",
          "description": "A formatted address line that contains a non-fielded street address, sub-address (e.g. Suite number), etc.",
          "maxLength": 60
        },
        "locality": {
          "type": "string",
          "description": "A bounded locality within a city, town or shire principally of urban character.",
          "maxLength": 50
        },
        "city": {
          "type": "string",
          "description": "City that the address is in.",
          "maxLength": 50
        },
        "stateOrProvince": {
          "type": "string",
          "description": "The state or province that the address is in.",
          "maxLength": 50
        },
        "postcode": {
          "type": "string",
          "description": "A descriptor for a postal delivery area, used to speed and simplify the delivery of mail.",
          "maxLength": 6
        },
        "postcodeExtension": {
          "type": "string",
          "description": "The four-digit extension on an American postal code, what comes after the hyphen when specified.",
          "maxLength": 4
        },
        "country": {
          "type": "string",
          "description": "The country that the address is in.",
          "maxLength": 50
        }
      }
    },
    "fieldedAddress": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "fieldedAddress",
      "description": "A full representation of an address, as well as geocoding reference for the property.",
      "type": "object",
      "required": [
        "objectType"
      ],
      "properties": {
        "objectType": {
          "type": "string",
          "enum": [
            "fieldedAddress"
          ],
          "description": "The type of the object, fieldedAddress."
        },
        "streetNr": {
          "type": "string",
          "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses.",
          "maxLength": 10
        },
        "streetNrSuffix": {
          "type": "string",
          "description": "The suffix of the first street number (in a street number range) or the suffix for the street number if there is no range.",
          "maxLength": 10
        },
        "streetNrLast": {
          "type": "string",
          "description": "Last number in a range of street numbers allocated to an address.",
          "maxLength": 10
        },
        "streetName": {
          "type": "string",
          "description": "The name of the street or other street type.",
          "maxLength": 60
        },
        "streetType": {
          "type": "string",
          "description": "The type of street (e.g., Street, St., Road, Rd., Alley).",
          "maxLength": 25
        },
        "streetSuffix": {
          "type": "string",
          "description": "A modifier denoting a relative direction.",
          "maxLength": 2
        },
        "subUnitType": {
          "type": "string",
          "description": "The type of subunit (e.g., Flat, Suite, Tower, Unit).",
          "maxLength": 25
        },
        "subUnitNr": {
          "type": "string",
          "description": "The discriminator used for the subunit, often just a sumple number but may also be a range.",
          "maxLength": 10
        },
        "levelType": {
          "type": "string",
          "description": "Describes level types within a building (e.g., Floor).",
          "maxLength": 25
        },
        "levelNr": {
          "type": "string",
          "description": "Used where a level type may be repeated (e.g., BASEMENT 1, BASEMENT 2).",
          "maxLength": 25
        },
        "buildingName": {
          "type": "string",
          "description": "Allows for buildings with well-known names to be used in an address.",
          "maxLength": 60
        },
        "privateStreetName": {
          "type": "string",
          "description": "Private streets internal to a property (e.g., a university) with an internal name not recorded by the land title office.",
          "maxLength": 60
        },
        "locality": {
          "type": "string",
          "description": "A bounded locality within a city, town or shire principally of urban character.",
          "maxLength": 50
        },
        "city": {
          "type": "string",
          "description": "The city that the address is in.",
          "maxLength": 50
        },
        "stateOrProvince": {
          "type": "string",
          "description": "The state or province that the address is in.",
          "maxLength": 50
        },
        "postcode": {
          "type": "string",
          "description": "A descriptor for a postal delivery area, used to speed and simplify the delivery of mail.",
          "maxLength": 6
        },
        "postcodeExtension": {
          "type": "string",
          "description": "The four-digit extension on an American postal code, what comes after the hyphen when specified.",
          "maxLength": 4
        },
        "country": {
          "type": "string",
          "description": "The country that the address is in.",
          "maxLength": 50
        }
      }
    },
    "geographicPoint": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "geographicPoint",
      "description": "Specifies a particular point on earth based upon geo coding information. Provides the means for quantitative description of the spatial characteristics of features, including dimension, position, size, shape, and orientation. Most commonly used for position (location).",
      "type": "object",
      "required": [
        "objectType",
        "latitude",
        "longitude"
      ],
      "properties": {
        "objectType": {
          "type": "string",
          "enum": [
            "geographicPoint"
          ],
          "description": "The type of the object, geographicPoint."
        },
        "latitude": {
          "type": "string",
          "description": "Latitude of the point in decimal degrees format.",
          "maxLength": 10
        },
        "longitude": {
          "type": "string",
          "description": "Longitude of the point in decimal degrees format.",
          "maxLength": 10
        }
      }
    },
    "addressReference": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "addressReference",
      "description": "This represents a reference to an address. The reference should be an address id from an address inventory, a geocoded reference from a geospatial system, etc.",
      "type": "object",
      "required": [
        "objectType"
      ],
      "properties": {
        "objectType": {
          "type": "string",
          "enum": [
            "addressReference"
          ],
          "description": "The type of the object, addressReference."
        },
        "referenceType": {
          "type": "string",
          "description": "The type of the reference.",
          "maxLength": 25
        },
        "reference": {
          "type": "string",
          "description": "The reference can be used to identify an address.",
          "maxLength": 60
        }
      }
    },
    "disconnectOrderItemDetail": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "disconnectOrderItemDetail",
      "description": "A request by an organization (buyer) to  another ogranization (seller) to disconnect an existing order.",
      "type": "object",
      "required": [
        "objectType",
        "sellerServiceOrEndpointId"
      ],
      "properties": {
        "objectType": {
          "type": "string",
          "enum": [
            "disconnectOrderItemDetail"
          ],
          "description": "The type of the object, disconnectOrderItem."
        },
        "sellerNetworkIdentifier": {
          "type": "string",
          "description": "One of the following Seller-assigned values may be included: OVC Identifier, EVC Identifier, UNI Identifier, ENNI Identifier.",
          "maxLength": 45
        },
        "buyerNetworkIdentifier": {
          "type": "string",
          "description": "One of the following Buyer-assigned values may be included: Buyer OVC Identifier, Buyer EVC Identifier, Buyer UNI Identifier, Buyer ENNI Identifier.",
          "maxLength": 45
        }
      }
    }
  }
}