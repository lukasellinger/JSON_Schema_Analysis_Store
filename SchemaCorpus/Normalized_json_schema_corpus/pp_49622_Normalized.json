{
  "type": "object",
  "$schema": "http://json-schema.org/draft-03/schema",
  "$license": [
    "http://www.apache.org/licenses/LICENSE-2.0"
  ],
  "id": "#",
  "javaType": "org.apache.streams.pipl.api.BasicSearchRequest",
  "extends": {
    "$ref": "#/definitions/SearchRequest.json"
  },
  "properties": {
    "email": {
      "type": "string",
      "description": "Email address."
    },
    "phone": {
      "type": "string",
      "description": "Home/work/mobile phone number. We’ll try to parse the number using libphonenumber."
    },
    "username": {
      "type": "string",
      "description": "Username/screen-name, minimum 3 characters. There’s an advanced option to search by username or user-id at a specific service like superman@facebook."
    },
    "user_id": {
      "type": "string",
      "description": "Unique ID in a supported service, must include the service name."
    },
    "url": {
      "type": "string",
      "description": "Profile URL in a supported service. This URL will be parsed to a username or user_id object."
    },
    "first_name": {
      "type": "string",
      "description": "First name, minimum 2 characters."
    },
    "last_name": {
      "type": "string",
      "description": "Last name, minimum 2 characters."
    },
    "middle_name": {
      "type": "string",
      "description": "Middle name or middle initial."
    },
    "raw_name": {
      "type": "string",
      "description": "Full Name. Use this parameter if the accurate name parts (first/middle/last) are not available, this parameter will only be used in absence of first_name and last_name."
    },
    "country": {
      "type": "string",
      "description": "A two-letter, Alpha-2 ISO-3166 country code."
    },
    "state": {
      "type": "string",
      "description": "A United States, Canada, Great Britain or Australia state code. If a US state is provided and no country specified, we’ll assume the country to be US."
    },
    "city": {
      "type": "string",
      "description": "City."
    },
    "street": {
      "type": "string",
      "description": "Street."
    },
    "house": {
      "type": "string",
      "description": "House number."
    },
    "zipcode": {
      "type": "string",
      "description": "ZIP Code."
    },
    "raw_address": {
      "type": "string",
      "description": "Full Address. Use this parameter if the accurate address parts (country/state/city…) are not available."
    },
    "age": {
      "type": "string",
      "description": "String, an exact (YY) or approximate (YY-YY) age."
    }
  },
  "definitions": {
    "SearchRequest.json": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-03/schema",
      "$license": [
        "http://www.apache.org/licenses/LICENSE-2.0"
      ],
      "javaType": "org.apache.streams.pipl.api.SearchRequest",
      "properties": {
        "key": {
          "type": "string",
          "description": "Your API key, this is our way to identify you and authorize your call."
        },
        "pretty": {
          "type": "boolean",
          "description": "Indicates whether you want the response to be \"pretty-printed\" (with indentation)."
        },
        "minimum_probability": {
          "type": "number",
          "description": "0 – 1. The minimum acceptable probability for inferred data."
        },
        "infer_persons": {
          "type": "boolean",
          "description": "whether the API should return persons made up solely from data inferred by statistical analysis from your search query."
        },
        "minimum_match": {
          "type": "number",
          "description": "0 – 1. The minimum required match score for possible persons to be returned."
        },
        "show_sources": {
          "type": "string",
          "description": "true/false/all/matching. all - all sources are shown. matching or true - only sources from the person. false - don’t show sources."
        },
        "hide_sponsored": {
          "type": "boolean",
          "description": "Whether to omit results marked \"sponsored\" (when additional data from this source is available behind a website paywall)."
        },
        "live_feeds": {
          "type": "boolean",
          "description": "Whether to use live data sources."
        },
        "match_requirements": {
          "type": "string",
          "description": "A condition to specify what fields you must get back. Responses not meeting the criteria will return empty and won’t be charged."
        },
        "source_category_requirements": {
          "type": "string",
          "description": "A condition to specify what source categories you must get back. Responses with no persons that meet the criteria will return empty and won’t be charged."
        },
        "callback": {
          "type": "string",
          "description": "For JSONP support in JavaScript applications. Only alphanumeric characters and underscores are allowed"
        },
        "top_match": {
          "type": "boolean",
          "description": "\"top_match\u003dtrue\" returns the best high-ranking Person match to your search. The API will only return a highly probable Person OR a No Match (when no highly probable profile is found). It never returns a Possible Persons’ response."
        }
      }
    }
  }
}