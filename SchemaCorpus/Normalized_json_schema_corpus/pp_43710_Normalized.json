{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "id": "choiceSet.json",
  "title": "Definitions: Choice, Composite, List, Independents.",
  "description": "Schemas in #/definitions detect or validate keys/objects used in describing Choice, Composite, List, Independents (Sections 3.2.7 and 3.2.8).",
  "definitions": {
    "itemsDetected": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Definition: items",
      "description": "True when the object includes items key and value of items is an array containing at least 1 item, which can be a specificResource, an externalWebResource, a uri, a textualBody or another choice/set (Sections 3.2.7 and 3.2.8).",
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "minItems": 1,
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/specificResource.json_definitions_specificeResourceDetected"
              },
              {
                "$ref": "#/definitions/bodyTarget.json_definitions_externalWebResourceDetected"
              },
              {
                "$ref": "#/definitions/bodyTarget.json_definitions_textualBodyFound"
              },
              {
                "$ref": "#/definitions/id.json_definitions_stringUri"
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/choiceOrSetTypeDefinition"
                  },
                  {
                    "$ref": "#/definitions/itemsDetected"
                  }
                ]
              }
            ]
          }
        }
      },
      "required": [
        "items"
      ]
    },
    "choiceTypeDefinition": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Definition: Choice type",
      "description": "True when object has type key and object\u0027s type is \u0027Choice\u0027 (Section 3.2.7)",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Choice"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "compositeTypeDefinition": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Definition: Composite type",
      "description": "True when object has type key and object\u0027s type is \u0027Composite\u0027 (Section 3.2.7)",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Composite"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "listTypeDefinition": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Definition: List type",
      "description": "True when object has type key and object\u0027s type is \u0027List\u0027 (Section 3.2.7)",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "List"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "independentsTypeDefinition": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Definition: Independents type",
      "description": "True when object has type key and object\u0027s type is \u0027Independents\u0027 (Section 3.2.7)",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Independents"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "choiceOrSetTypeDefinition": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Definition: Choice or Set type",
      "description": "True when object has type key and object\u0027s type is any of \u0027Choice\u0027, \u0027Composite\u0027, \u0027List\u0027, \u0027Independents\u0027 (Section 3.2.7)",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Choice",
            "Composite",
            "List",
            "Independents"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "choiceDetected": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Detection: Choice",
      "description": "True when object\u0027s type is \u0027Choice\u0027 and the object has an items array (Section 3.2.7)",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/choiceTypeDefinition"
        },
        {
          "$ref": "#/definitions/itemsDetected"
        }
      ]
    },
    "compositeDetected": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Detection: Composite",
      "description": "True when object\u0027s type is \u0027Composite\u0027 and the object has an items array (Section 3.2.8)",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/compositeTypeDefinition"
        },
        {
          "$ref": "#/definitions/itemsDetected"
        }
      ]
    },
    "listDetected": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Detection: List",
      "description": "True when object\u0027s type is \u0027List\u0027 and the object has an items array (Section 3.2.7)",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/listTypeDefinition"
        },
        {
          "$ref": "#/definitions/itemsDetected"
        }
      ]
    },
    "independentsDetected": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Detection: Independents",
      "description": "True when object\u0027s type is \u0027Independents\u0027 and the object has an items array (Section 3.2.7)",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/independentsTypeDefinition"
        },
        {
          "$ref": "#/definitions/itemsDetected"
        }
      ]
    },
    "choiceOrSetDetected": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Detection: Choice or Set",
      "description": "True when object\u0027s type is one of Choice, Composite, List or Independents and the object has an items array (Section 3.2.7)",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/choiceOrSetTypeDefinition"
        },
        {
          "$ref": "#/definitions/itemsDetected"
        }
      ]
    },
    "choiceSetWithValue": {
      "allOf": [
        {
          "$ref": "#/definitions/choiceOrSetDetected"
        },
        {
          "required": [
            "value"
          ]
        }
      ]
    },
    "choiceSetWithSource": {
      "allOf": [
        {
          "$ref": "#/definitions/choiceOrSetDetected"
        },
        {
          "required": [
            "source"
          ]
        }
      ]
    },
    "choiceSetWithPurpose": {
      "allOf": [
        {
          "$ref": "#/definitions/choiceOrSetDetected"
        },
        {
          "required": [
            "purpose"
          ]
        }
      ]
    },
    "specificResource.json_definitions_specificeResourceDetected": {
      "title": "Detection: Specific Resource",
      "description": "True when object has exactly 1 source value and at least one of purpose, selector, state, styleClass, renderedVia, scope (Section 4)",
      "type": "object",
      "$ref": "#/definitions/specificResource.json_definitions_sourceDetected",
      "anyOf": [
        {
          "$ref": "#/definitions/otherProperties.json_definitions_purposeRecognizedIfPresent",
          "required": [
            "purpose"
          ]
        },
        {
          "$ref": "#/definitions/specificResource.json_definitions_selectorDetected"
        },
        {
          "$ref": "#/definitions/specificResource.json_definitions_stateDetected"
        },
        {
          "$ref": "#/definitions/specificResource.json_definitions_styleClassDetected"
        },
        {
          "$ref": "#/definitions/specificResource.json_definitions_renderedViaDetected"
        },
        {
          "$ref": "#/definitions/specificResource.json_definitions_scopeDetected"
        }
      ]
    },
    "specificResource.json_definitions_sourceDetected": {
      "title": "Detection: source",
      "description": "True when object has exactly 1 source key value and that value is of format uri or an External Web Resource (Section 4) - NB, the Specific Resource is closer in hierarchy to the External Web Resource than a Choice or Set; the items of a Choice or Set may be Specific Resources, but the source of a Specific Resource may not be a Choice or Set.",
      "type": "object",
      "properties": {
        "source": {
          "type": [
            "string",
            "object"
          ],
          "oneOf": [
            {
              "$ref": "#/definitions/id.json_definitions_stringUri"
            },
            {
              "$ref": "#/definitions/bodyTarget.json_definitions_externalWebResourceDetected"
            }
          ]
        }
      },
      "required": [
        "source"
      ]
    },
    "id.json_definitions_stringUri": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "type": "string",
      "format": "uri"
    },
    "bodyTarget.json_definitions_externalWebResourceDetected": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Definition: External Web Resource",
      "description": "True when the object is an External Web Resource, i.e., includes an id that is of format uri but does not contain source (Specific Resource) keys (Sections 3.2.1, 3.2.4, 4).",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/id.json_definitions_idValueFound"
        }
      ],
      "not": {
        "anyOf": [
          {
            "required": [
              "source"
            ]
          },
          {
            "required": [
              "target"
            ]
          }
        ]
      }
    },
    "id.json_definitions_idValueFound": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/id.json_definitions_arraySingleStringUri"
        }
      }
    },
    "id.json_definitions_arraySingleStringUri": {
      "oneOf": [
        {
          "$ref": "#/definitions/id.json_definitions_stringUri"
        },
        {
          "type": "array",
          "minItems": 1,
          "maxItems": 1,
          "items": {
            "$ref": "#/definitions/id.json_definitions_stringUri"
          }
        }
      ]
    },
    "otherProperties.json_definitions_purposeRecognizedIfPresent": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Validation: purpose value",
      "description": "True when the body has 0 or more purpose property values (Section 3.3.5)",
      "type": "object",
      "properties": {
        "purpose": {
          "oneOf": [
            {
              "$ref": "#/definitions/annotations.json_definitions_motivationList"
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "$ref": "#/definitions/annotations.json_definitions_motivationList"
              }
            }
          ]
        }
      }
    },
    "annotations.json_definitions_motivationList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Definitions: list of motivation and purposes",
      "description": "List of motivations and purposes as defined in the model (Section 3.3.5).",
      "type": "string",
      "enum": [
        "assessing",
        "bookmarking",
        "classifying",
        "commenting",
        "describing",
        "editing",
        "highlighting",
        "identifying",
        "linking",
        "moderating",
        "questioning",
        "replying",
        "tagging"
      ]
    },
    "specificResource.json_definitions_selectorDetected": {
      "title": "Detection: selector type",
      "description": "True when object tested has selector(s) that is(are) recognized as being one or more of the selectors described in the model (Section 4.2)",
      "type": "object",
      "$ref": "#/definitions/specificResource.json_definitions_selectorDefined",
      "required": [
        "selector"
      ]
    },
    "specificResource.json_definitions_selectorDefined": {
      "title": "Definition: selector",
      "description": "True when object tested has no selector, or has selector identified by uri, or has selector(s) with value matching one or more of the selectors described in the model (Section 4.2)",
      "type": "object",
      "properties": {
        "selector": {
          "oneOf": [
            {
              "$ref": "#/definitions/id.json_definitions_stringUri"
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "$ref": "#/definitions/id.json_definitions_idValueFound"
                },
                {
                  "$ref": "#/definitions/specificResource.json_definitions_fragmentSelectorDetected"
                },
                {
                  "$ref": "#/definitions/specificResource.json_definitions_cssSelectorDetected"
                },
                {
                  "$ref": "#/definitions/specificResource.json_definitions_xpathSelectorDetected"
                },
                {
                  "$ref": "#/definitions/specificResource.json_definitions_textQuoteSelectorDetected"
                },
                {
                  "$ref": "#/definitions/specificResource.json_definitions_textPositionSelectorDetected"
                },
                {
                  "$ref": "#/definitions/specificResource.json_definitions_dataPositionSelectorDetected"
                },
                {
                  "$ref": "#/definitions/specificResource.json_definitions_rangeSelectorDetected"
                },
                {
                  "$ref": "#/definitions/specificResource.json_definitions_svgSelectorDetected"
                }
              ]
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/id.json_definitions_stringUri"
                  },
                  {
                    "type": "object",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/id.json_definitions_idValueFound"
                      },
                      {
                        "$ref": "#/definitions/specificResource.json_definitions_fragmentSelectorDetected"
                      },
                      {
                        "$ref": "#/definitions/specificResource.json_definitions_cssSelectorDetected"
                      },
                      {
                        "$ref": "#/definitions/specificResource.json_definitions_xpathSelectorDetected"
                      },
                      {
                        "$ref": "#/definitions/specificResource.json_definitions_textQuoteSelectorDetected"
                      },
                      {
                        "$ref": "#/definitions/specificResource.json_definitions_textPositionSelectorDetected"
                      },
                      {
                        "$ref": "#/definitions/specificResource.json_definitions_dataPositionSelectorDetected"
                      },
                      {
                        "$ref": "#/definitions/specificResource.json_definitions_rangeSelectorDetected"
                      },
                      {
                        "$ref": "#/definitions/specificResource.json_definitions_svgSelectorDetected"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "specificResource.json_definitions_fragmentSelectorDetected": {
      "title": "Detection: fragment selector",
      "description": "True when object is a fragment selelctor (Section 4.2.1)",
      "allOf": [
        {
          "$ref": "#/definitions/specificResource.json_definitions_fragmentSelectorTypeDetected"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": "string"
            },
            "conformsTo": {
              "type": "string",
              "format": "uri"
            }
          },
          "required": [
            "value"
          ]
        }
      ]
    },
    "specificResource.json_definitions_fragmentSelectorTypeDetected": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "FragmentSelector"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "specificResource.json_definitions_cssSelectorDetected": {
      "title": "Detection: CssSelector selector",
      "description": "True when object is a CssSelector selelctor (Section 4.2.2)",
      "allOf": [
        {
          "$ref": "#/definitions/specificResource.json_definitions_cssSelectorTypeDetected"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": "string"
            }
          },
          "required": [
            "value"
          ]
        }
      ]
    },
    "specificResource.json_definitions_cssSelectorTypeDetected": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "CssSelector"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "specificResource.json_definitions_xpathSelectorDetected": {
      "title": "Detection: XPath selector",
      "description": "True when object is a XPath selelctor (Section 4.2.3)",
      "allOf": [
        {
          "$ref": "#/definitions/specificResource.json_definitions_xpathSelectorTypeDetected"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": "string"
            }
          },
          "required": [
            "value"
          ]
        }
      ]
    },
    "specificResource.json_definitions_xpathSelectorTypeDetected": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "XPathSelector"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "specificResource.json_definitions_textQuoteSelectorDetected": {
      "title": "Detection: text quote selector",
      "description": "True when object is a text quote selelctor (Section 4.2.4)",
      "allOf": [
        {
          "$ref": "#/definitions/specificResource.json_definitions_textQuoteSelectorTypeDetected"
        },
        {
          "type": "object",
          "properties": {
            "exact": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "suffix": {
              "type": "string"
            }
          },
          "required": [
            "exact"
          ]
        }
      ]
    },
    "specificResource.json_definitions_textQuoteSelectorTypeDetected": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "TextQuoteSelector"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "specificResource.json_definitions_textPositionSelectorDetected": {
      "title": "Definition: text position selector",
      "description": "True when object is a text position selelctor (Section 4.2.5)",
      "allOf": [
        {
          "$ref": "#/definitions/specificResource.json_definitions_textPositionSelectorTypeDetected"
        },
        {
          "type": "object",
          "properties": {
            "start": {
              "type": "integer",
              "minimum": 0
            },
            "end": {
              "type": "integer",
              "minimum": 0
            }
          },
          "required": [
            "start",
            "end"
          ]
        }
      ]
    },
    "specificResource.json_definitions_textPositionSelectorTypeDetected": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "TextPositionSelector"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "specificResource.json_definitions_dataPositionSelectorDetected": {
      "title": "Definition: data position selector",
      "description": "True when object is a data position selelctor (Section 4.2.5)",
      "allOf": [
        {
          "$ref": "#/definitions/specificResource.json_definitions_dataPositionSelectorTypeDetected"
        },
        {
          "type": "object",
          "properties": {
            "start": {
              "type": "integer",
              "minimum": 0
            },
            "end": {
              "type": "integer",
              "minimum": 0
            }
          },
          "required": [
            "start",
            "end"
          ]
        }
      ]
    },
    "specificResource.json_definitions_dataPositionSelectorTypeDetected": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "DataPositionSelector"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "specificResource.json_definitions_rangeSelectorDetected": {
      "title": "Detection: range selector",
      "description": "True when object is a range selelctor (Section 4.2.9)",
      "allOf": [
        {
          "$ref": "#/definitions/specificResource.json_definitions_rangeSelectorTypeDetected"
        },
        {
          "type": "object",
          "patternProperties": {
            "^(startSelector|endSelector)$": {
              "type": "object",
              "oneOf": [
                {
                  "$ref": "#/definitions/specificResource.json_definitions_fragmentSelectorDetected"
                },
                {
                  "$ref": "#/definitions/specificResource.json_definitions_cssSelectorDetected"
                },
                {
                  "$ref": "#/definitions/specificResource.json_definitions_xpathSelectorDetected"
                },
                {
                  "$ref": "#/definitions/specificResource.json_definitions_textQuoteSelectorDetected"
                },
                {
                  "$ref": "#/definitions/specificResource.json_definitions_textPositionSelectorDetected"
                },
                {
                  "$ref": "#/definitions/specificResource.json_definitions_dataPositionSelectorDetected"
                },
                {
                  "$ref": "#/definitions/specificResource.json_definitions_svgSelectorDetected"
                }
              ]
            }
          },
          "required": [
            "startSelector",
            "endSelector"
          ]
        }
      ]
    },
    "specificResource.json_definitions_rangeSelectorTypeDetected": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "RangeSelector"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "specificResource.json_definitions_svgSelectorDetected": {
      "title": "Detection: svg selector",
      "description": "True when object is a svg selelctor (Section 4.2.7)",
      "allOf": [
        {
          "$ref": "#/definitions/specificResource.json_definitions_svgSelectorTypeDetected"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": "string"
            },
            "id": {
              "$ref": "#/definitions/id.json_definitions_arraySingleStringUri"
            }
          },
          "oneOf": [
            {
              "required": [
                "value"
              ]
            },
            {
              "required": [
                "id"
              ]
            }
          ]
        }
      ]
    },
    "specificResource.json_definitions_svgSelectorTypeDetected": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "SvgSelector"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "specificResource.json_definitions_stateDetected": {
      "title": "Detection: state type",
      "description": "True when object tested has state(s) that is(are) recognized as being one or more of the states described in the model (Section 4.3)",
      "type": "object",
      "$ref": "#/definitions/specificResource.json_definitions_stateDefined",
      "required": [
        "state"
      ]
    },
    "specificResource.json_definitions_stateDefined": {
      "title": "Definition: state",
      "description": "True when object tested has state with value matching one or more of the state classes described in the model (Section 4.3)",
      "type": "object",
      "properties": {
        "state": {
          "oneOf": [
            {
              "$ref": "#/definitions/id.json_definitions_stringUri"
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "$ref": "#/definitions/id.json_definitions_idValueFound"
                },
                {
                  "$ref": "#/definitions/specificResource.json_definitions_timeStateDetected"
                },
                {
                  "$ref": "#/definitions/specificResource.json_definitions_requestHeaderStateDetected"
                }
              ]
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/id.json_definitions_stringUri"
                  },
                  {
                    "type": "object",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/id.json_definitions_idValueFound"
                      },
                      {
                        "$ref": "#/definitions/specificResource.json_definitions_timeStateDetected"
                      },
                      {
                        "$ref": "#/definitions/specificResource.json_definitions_requestHeaderStateDetected"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "specificResource.json_definitions_timeStateDetected": {
      "title": "Detection: time state",
      "description": "True when object is a time state (Section 4.3.1)",
      "allOf": [
        {
          "$ref": "#/definitions/specificResource.json_definitions_timeStateTypeDetected"
        },
        {
          "type": "object",
          "properties": {
            "sourceDate": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              ]
            },
            "sourceDateStart": {
              "type": "string",
              "format": "date-time"
            },
            "sourceDateEnd": {
              "type": "string",
              "format": "date-time"
            },
            "cached": {
              "type": "string",
              "format": "uri"
            }
          },
          "oneOf": [
            {
              "required": [
                "sourceDate"
              ]
            },
            {
              "required": [
                "sourceDateStart",
                "sourceDateEnd"
              ]
            }
          ],
          "not": {
            "required": [
              "sourceDate",
              "sourceDateStart",
              "sourceDateEnd"
            ]
          }
        }
      ]
    },
    "specificResource.json_definitions_timeStateTypeDetected": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "TimeState"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "specificResource.json_definitions_requestHeaderStateDetected": {
      "title": "Detection: request header state",
      "description": "True when object is a request header state (Section 4.3.2)",
      "allOf": [
        {
          "$ref": "#/definitions/specificResource.json_definitions_requestHeaderStateTypeDetected"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": "string"
            }
          },
          "required": [
            "value"
          ]
        }
      ]
    },
    "specificResource.json_definitions_requestHeaderStateTypeDetected": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "HttpRequestState"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "specificResource.json_definitions_styleClassDetected": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Collate: styleClass key with qualifying body/target classes",
      "description": "Supports implementation check of styleClass (if/when) used on Specific Resources (Sections 4.4)",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/specificResource.json_definitions_styleClassDefinition"
        },
        {
          "required": [
            "styleClass"
          ]
        }
      ]
    },
    "specificResource.json_definitions_styleClassDefinition": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Definition: styleClass property value",
      "description": "True when the object has no styleClass property or has a styleClass property that appears with source and that is a string value or array of string values (Section 4.4)",
      "properties": {
        "styleClass": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          ]
        }
      },
      "dependencies": {
        "styleClass": [
          "source"
        ]
      }
    },
    "specificResource.json_definitions_renderedViaDetected": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Collate: renderedVia key with qualifying body/target classes",
      "description": "Supports implementation check of renderedVia (if/when) used on Specific Resources (Sections 4.4)",
      "allOf": [
        {
          "$ref": "#/definitions/specificResource.json_definitions_sourceDetected"
        },
        {
          "required": [
            "renderedVia"
          ]
        },
        {
          "$ref": "#/definitions/specificResource.json_definitions_renderedViaDefinition"
        }
      ]
    },
    "specificResource.json_definitions_renderedViaDefinition": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Definition: renderedVia property value",
      "description": "True when the body/target has no renderedVia property or has a valid renderedVia property (Section 4.5)",
      "type": "object",
      "properties": {
        "renderedVia": {
          "oneOf": [
            {
              "$ref": "#/definitions/id.json_definitions_arraySingleStringUri"
            },
            {
              "$ref": "#/definitions/id.json_definitions_idValueFound"
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/id.json_definitions_arraySingleStringUri"
                  },
                  {
                    "$ref": "#/definitions/id.json_definitions_idValueFound"
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "specificResource.json_definitions_scopeDetected": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Collate: scope key with qualifying body/target classes",
      "description": "Supports implementation check of scope (if/when) used on Specific Resource Body (Sections 4.6)",
      "allOf": [
        {
          "required": [
            "scope"
          ]
        },
        {
          "$ref": "#/definitions/specificResource.json_definitions_scopeDefinition"
        }
      ]
    },
    "specificResource.json_definitions_scopeDefinition": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Definition: scope property value",
      "description": "True when the body/target has no scope property or has a valid scope property (Section 4.6)",
      "type": "object",
      "properties": {
        "scope": {
          "oneOf": [
            {
              "$ref": "#/definitions/id.json_definitions_stringUri"
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "$ref": "#/definitions/id.json_definitions_stringUri"
              }
            }
          ]
        }
      }
    },
    "bodyTarget.json_definitions_textualBodyFound": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Definition: Embedded Textual Body",
      "description": "True when the object is an Embedded Textual Body, i.e., includes the value key (Section 3.2.4).",
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      },
      "required": [
        "value"
      ]
    }
  }
}