{
  "$schema": "http://json-schema.org/draft-04/schema",
  "title": "Mesh",
  "type": "object",
  "description": "A set of primitives to be rendered.  A node can contain one mesh.  A node\u0027s transform places the mesh in the scene.",
  "allOf": [
    {
      "$ref": "#/definitions/glTFChildOfRootProperty.schema.json"
    }
  ],
  "properties": {
    "primitives": {
      "type": "array",
      "description": "An array of primitives, each defining geometry to be rendered with a material.",
      "items": {
        "$ref": "#/definitions/mesh.primitive.schema.json"
      },
      "minItems": 1
    },
    "weights": {
      "type": "array",
      "description": "Array of weights to be applied to the Morph Targets.",
      "items": {
        "type": "number"
      },
      "minItems": 1
    },
    "name": {},
    "extensions": {},
    "extras": {}
  },
  "required": [
    "primitives"
  ],
  "definitions": {
    "glTFChildOfRootProperty.schema.json": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "glTF Child of Root Property",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/glTFProperty.schema.json"
        }
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The user-defined name of this object.",
          "gltf_detailedDescription": "The user-defined name of this object.  This is not necessarily unique, e.g., an accessor and a buffer could have the same name, or two accessors could even have the same name."
        }
      }
    },
    "glTFProperty.schema.json": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "glTF Property",
      "type": "object",
      "properties": {
        "extensions": {
          "$ref": "#/definitions/extension.schema.json"
        },
        "extras": {
          "$ref": "#/definitions/extras.schema.json"
        }
      }
    },
    "extension.schema.json": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "Extension",
      "type": "object",
      "description": "Dictionary object with extension-specific objects.",
      "properties": {},
      "additionalProperties": {
        "type": "object"
      }
    },
    "extras.schema.json": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "Extras",
      "description": "Application-specific data."
    },
    "mesh.primitive.schema.json": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "Mesh Primitive",
      "type": "object",
      "description": "Geometry to be rendered with the given material.",
      "allOf": [
        {
          "$ref": "#/definitions/glTFProperty.schema.json"
        }
      ],
      "properties": {
        "attributes": {
          "type": "object",
          "description": "A dictionary object, where each key corresponds to mesh attribute semantic and each value is the index of the accessor containing attribute\u0027s data.",
          "minProperties": 1,
          "additionalProperties": {
            "$ref": "#/definitions/glTFid.schema.json"
          }
        },
        "indices": {
          "allOf": [
            {
              "$ref": "#/definitions/glTFid.schema.json"
            }
          ],
          "description": "The index of the accessor that contains the indices.",
          "gltf_detailedDescription": "The index of the accessor that contains mesh indices.  When this is not defined, the primitives should be rendered without indices using `drawArrays()`.  When defined, the accessor must contain indices: the `bufferView` referenced by the accessor should have a `target` equal to 34963 (ELEMENT_ARRAY_BUFFER); `componentType` must be 5121 (UNSIGNED_BYTE), 5123 (UNSIGNED_SHORT) or 5125 (UNSIGNED_INT), the latter may require enabling additional hardware support; `type` must be `\"SCALAR\"`. For triangle primitives, the front face has a counter-clockwise (CCW) winding order."
        },
        "material": {
          "allOf": [
            {
              "$ref": "#/definitions/glTFid.schema.json"
            }
          ],
          "description": "The index of the material to apply to this primitive when rendering."
        },
        "mode": {
          "description": "The type of primitives to render.",
          "default": 4,
          "gltf_detailedDescription": "The type of primitives to render. All valid values correspond to WebGL enums.",
          "anyOf": [
            {
              "enum": [
                0
              ],
              "description": "POINTS"
            },
            {
              "enum": [
                1
              ],
              "description": "LINES"
            },
            {
              "enum": [
                2
              ],
              "description": "LINE_LOOP"
            },
            {
              "enum": [
                3
              ],
              "description": "LINE_STRIP"
            },
            {
              "enum": [
                4
              ],
              "description": "TRIANGLES"
            },
            {
              "enum": [
                5
              ],
              "description": "TRIANGLE_STRIP"
            },
            {
              "enum": [
                6
              ],
              "description": "TRIANGLE_FAN"
            },
            {
              "type": "integer"
            }
          ]
        },
        "targets": {
          "type": "array",
          "description": "An array of Morph Targets, each  Morph Target is a dictionary mapping attributes (only `POSITION`, `NORMAL`, and `TANGENT` supported) to their deviations in the Morph Target.",
          "items": {
            "type": "object",
            "minProperties": 1,
            "additionalProperties": {
              "$ref": "#/definitions/glTFid.schema.json"
            },
            "description": "A dictionary object specifying attributes displacements in a Morph Target, where each key corresponds to one of the three supported attribute semantic (`POSITION`, `NORMAL`, or `TANGENT`) and each value is the index of the accessor containing the attribute displacements\u0027 data."
          },
          "minItems": 1
        },
        "extensions": {},
        "extras": {}
      },
      "gltf_webgl": "`drawElements()` and `drawArrays()`",
      "required": [
        "attributes"
      ]
    },
    "glTFid.schema.json": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "glTF Id",
      "type": "integer",
      "minimum": 0
    }
  }
}