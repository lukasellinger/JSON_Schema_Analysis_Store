{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://schemas.digitallinguistics.io/Phoneme-5.0.0.json",
  "title": "Phoneme",
  "type": "object",
  "description": "An object representing a single phoneme in a language, and its allophones.",
  "required": [
    "ipa"
  ],
  "additionalProperties": true,
  "properties": {
    "type": {
      "title": "Type",
      "type": "string",
      "const": "Phoneme",
      "readOnly": true,
      "description": "The type of object. Must be set to `Phoneme`."
    },
    "airstream": {
      "title": "Airstream Mechanism",
      "type": "string",
      "description": "The airstream mechanism used to pronounce this Phoneme. `Pulmonic` (egressive) sounds are created by pushing air out of the lungs. `Ejective` sounds are glottalic egressive sounds where the air column is compressed by upward movement of the glottis. `Implosive` sounds are glottalic ingressives where air is pulled in by a downward movement of the glottis. `Click` sounds, i.e. lingual / velaric ingressive sounds, pull air in with a downward movement of the tongue.",
      "enum": [
        "click",
        "ejective",
        "implosive",
        "ingressive",
        "pulmonic"
      ],
      "default": "pulmonic"
    },
    "allophones": {
      "title": "Allophones",
      "type": "array",
      "uniqueItems": true,
      "description": "A list of allophones of this phoneme, following the same format as for Phoneme objects.",
      "items": {
        "title": "Allophone",
        "type": "object",
        "$ref": "#",
        "description": "An allophone of this phoneme. Allophones are formatted exactly the same way as Phoneme objects."
      }
    },
    "backness": {
      "title": "Backness",
      "type": "string",
      "description": "Describes the backness of a vowel.",
      "enum": [
        "front",
        "near-front",
        "central",
        "near-back",
        "back"
      ]
    },
    "bibliography": {
      "title": "Bibliography",
      "type": "array",
      "uniqueItems": true,
      "description": "A collection of citations to bibliographic sources about this phoneme",
      "items": {
        "title": "Citation",
        "type": "object",
        "$ref": "#/definitions/Citation-1.0.0.json",
        "description": "A citation to a bibliographic source about this phoneme"
      }
    },
    "features": {
      "title": "Features",
      "type": "array",
      "uniqueItems": true,
      "description": "A list of the phonemically distinctive features of this Phoneme. These are what are listed under `diacritics` in the IPA chart. For example, if a language distinguishes between a palatalized `/t/` and a plain `/t/`, the first should include the feature `palatalized` and the second `plain` (or no features). Note that most features are also a manner of articulation as well, so it up to the linguist to decide when a given phonetic detail is a manner, or when it is a feature (i.e. a diacritic). For example, a language might distinguish phonemically between a palatal plosive `/c/` and a palatalized plosive `/tʲ/`. The first would list `palatal` as its place of articulation, while the second would list `palatalized` as a distinctive feature. Do not include features here if they are already used for manner, unless your analysis is that this feature is *both* a manner and a feature of this phoneme, e.g. a palatalized palatal stop. This field is used primarily for consonants, but may also apply to vowels as well (e.g. the `close` and `open` features).",
      "items": {
        "title": "Feature",
        "type": "string",
        "description": "A phonemically distinctive feature, taken from the set of features (diacritics) in the IPA chart.",
        "enum": [
          "advanced",
          "advanced tongue root",
          "affricativized",
          "alveolar",
          "apical",
          "aspirated",
          "breathy",
          "centralized",
          "close",
          "creaky",
          "dental",
          "fortis",
          "fricativized",
          "labialized",
          "laminal",
          "lateral release",
          "lax",
          "lenis",
          "lightly aspirated",
          "linguolabial",
          "lowered",
          "mid-centralized",
          "nasal release",
          "nasalized",
          "no release",
          "non-syllabic",
          "open",
          "palatalized",
          "pharyngealized",
          "plain",
          "raised",
          "retracted",
          "retracted tongue root",
          "retroflexed",
          "rhotic",
          "rounded",
          "sibilant",
          "syllabic",
          "tense",
          "unrounded",
          "velarized",
          "voiced",
          "voiceless",
          "weakly aspirated"
        ]
      }
    },
    "height": {
      "title": "Height",
      "type": "string",
      "description": "The height of a vowel",
      "enum": [
        "close",
        "near-close",
        "close-mid",
        "mid",
        "open-mid",
        "near-open",
        "open"
      ]
    },
    "ipa": {
      "title": "IPA Transcription",
      "type": "string",
      "minLength": 1,
      "description": "The IPA representation of this phoneme / allophone. Transcriptions of phonemes should contain only the phonemically contrastive sounds. Transcriptions of allophones should contain only the regularly-conditioned alternations."
    },
    "length": {
      "title": "Length",
      "type": "string",
      "description": "The length of this phoneme, whether for consonants (e.g. `short` vs. `geminate`) or vowels",
      "enum": [
        "extra short",
        "short",
        "half long",
        "long",
        "extra long",
        "geminate"
      ]
    },
    "manner": {
      "title": "Manner of Articulation",
      "type": "string",
      "description": "The manner of articulation, for consonants. Only one manner of articulation may be listed. Additional manners must be listed under the `features` attribute. For example, the lateral fricative `ɬ` might have a `manner` set to `fricative` and a feature `lateral`, or vice versa, depending on the linguist’s analysis.",
      "enum": [
        "affricate",
        "approximate",
        "flap",
        "fricative",
        "lateral",
        "nasal",
        "plosive",
        "tap",
        "trill"
      ]
    },
    "notes": {
      "title": "Notes",
      "type": "array",
      "uniqueItems": true,
      "description": "Notes about this Phoneme",
      "items": {
        "title": "Note",
        "type": "object",
        "$ref": "#/definitions/Note-5.0.0.json",
        "description": "A Note about this Phoneme"
      }
    },
    "place": {
      "title": "Place of Articulation",
      "type": "string",
      "description": "The place of articulation for consonants. Only one place of articulation may be listed. Additional places must be listed as features under the `features` attribute. For example, a palatalized alveolar `/tʲ/` would list `alveolar` under `manner`, and `palatalized` under `features`.",
      "enum": [
        "bilabial",
        "labiodental",
        "labiovelar",
        "dental",
        "alveolar",
        "lateral",
        "post-alveolar",
        "alveo-palatal",
        "palato-alveolar",
        "retroflex",
        "palatal",
        "velar",
        "uvular",
        "pharyngeal",
        "glottal",
        "epiglottal"
      ]
    },
    "rounding": {
      "title": "Rounding",
      "type": "string",
      "description": "A description of the roundedness of a vowel. Only one type of roundedness may be listed. Rounded vowels may be listed as simply `rounded`, or more specifically as `protruded` or `compressed`.",
      "enum": [
        "compressed",
        "protruded",
        "rounded",
        "unrounded"
      ]
    },
    "tags": {
      "title": "Tags",
      "type": "object",
      "$ref": "#/definitions/Tags-2.1.0.json",
      "description": "A set of tags for this phoneme"
    },
    "target1": {
      "title": "Diphthong / Triphthong Target 1",
      "type": "object",
      "$ref": "#",
      "description": "For diphthongs or triphthongs, this should be a Phoneme object representing the features of the first target in the pronunciation of the diphthong/triphthong."
    },
    "target2": {
      "title": "Diphthong / Triphthong Target 2",
      "type": "object",
      "$ref": "#",
      "description": "For diphthongs or thriphthongs, this should be a Phoneme object representing the features of the second target in the pronunciation of the diphthong/triphthong."
    },
    "target3": {
      "title": "Triphthong Target 3",
      "type": "object",
      "$ref": "#",
      "description": "For triphthongs, this should be a Phoneme object representing the features of the third target in the pronunciation of the triphthong."
    },
    "tone": {
      "title": "Tone",
      "type": "string",
      "description": "An abstract representation of the tone of this phoneme, e.g. `H`, `13`, `falling`, etc."
    },
    "voicing": {
      "title": "Voicing",
      "type": "string",
      "description": "Whether the phoneme is voiced, voiceless, or partially voiced",
      "enum": [
        "semivoiced",
        "voiced",
        "voiceless"
      ]
    }
  },
  "examples": [
    {
      "airstream": "pulmonic",
      "ipa": "t",
      "manner": "plosive",
      "place": "alveolar",
      "voicing": "voiceless"
    },
    {
      "airstream": "pulmonic",
      "ipa": "t͡ʃ",
      "manner": "affricate",
      "place": "post-alveolar",
      "voicing": "voiceless"
    },
    {
      "airstream": "ejective",
      "ipa": "t͡ʃˀ",
      "manner": "affricate",
      "place": "post-alveolar",
      "voicing": "voiceless"
    }
  ],
  "definitions": {
    "Citation-1.0.0.json": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Citation",
      "type": "object",
      "description": "A citation to a bibliographic source. Citation objects consist of an optional `pages` property which indicates the relevant page numbers within the cited publication, and either a `citationKey` field or a `bibliographicSource` field. If the `citationKey` field is used, it contains a reference to the citation key of a bibliographic source stored elsewhere. If the `bibliographicSource` field is used, it contains an entire bibliographicSource. This allows developers to dereference their bibliographies, if they choose to.",
      "allOf": [
        {
          "properties": {
            "pages": {
              "title": "Pages",
              "type": "string",
              "description": "The relevant page numbers within the cited publication"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "citationKey"
              ],
              "properties": {
                "citationKey": {
                  "title": "Citation Key",
                  "$ref": "#/definitions/Abbreviation-2.1.0.json",
                  "description": "The citation key for the bibliographic source being reference. Must be a valid Abbreviation."
                }
              }
            },
            {
              "required": [
                "bibliographicSource"
              ],
              "properties": {
                "bibliographicSource": {
                  "title": "Bibliographic Source",
                  "$ref": "#/definitions/BibliographicSource-1.0.0.json",
                  "description": "The bibliographic source being referenced."
                }
              }
            }
          ]
        }
      ],
      "examples": [
        {
          "citationKey": "Hieber2018",
          "pages": "1-15"
        }
      ]
    },
    "Abbreviation-2.1.0.json": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Abbreviation",
      "type": "string",
      "pattern": "^[(a-z)|(A-Z)|(0-9)]+$",
      "description": "A human-readable abbreviation, containing on letters `a-z`, `A-Z`, and numbers `0-9` (no spaces allowed).",
      "examples": [
        "chiti",
        "ctm"
      ]
    },
    "BibliographicSource-1.0.0.json": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Bibliographic Source",
      "type": "object",
      "description": "A bibliographic source, such as a book or journal article",
      "$comment": "This is a top-level database object",
      "required": [
        "title"
      ],
      "additionalProperties": true,
      "definitions": {
        "person": {
          "title": "Person",
          "type": "object",
          "description": "An object representing a Person",
          "additionalProperties": false,
          "properties": {
            "firstName": {
              "title": "First Name",
              "type": "string",
              "description": "The first name(s) of this author"
            },
            "lastName": {
              "title": "Last Name",
              "type": "string",
              "description": "The last name(s) of this author"
            }
          }
        }
      },
      "properties": {
        "id": {
          "title": "ID",
          "description": "A unique database identifier for this bibliographic source"
        },
        "type": {
          "title": "Type",
          "type": "string",
          "const": "BibliographicSource",
          "readOnly": true,
          "description": "The type of object. Must be set to `BibliographicSource`."
        },
        "authors": {
          "title": "Authors",
          "type": "array",
          "uniqueItems": true,
          "description": "An array of authors for this bibliographic source",
          "items": {
            "title": "Author",
            "type": "object",
            "$ref": "#/definitions/BibliographicSource-1.0.0.json_definitions_person",
            "description": "A Person object representing an author"
          }
        },
        "citationKey": {
          "title": "Citation Key",
          "$ref": "#/definitions/Abbreviation-2.1.0.json",
          "description": "A citation key which must be a valid Abbreviation. This field can be used by bibliographic reference management software like Mendeley or Zotero to store the citation key for a source."
        },
        "city": {
          "title": "City",
          "type": "string",
          "description": "The city in which this bibliographic source was published"
        },
        "doi": {
          "title": "Digital Object Identifier (DOI)",
          "type": "string",
          "pattern": "^10.\\d{4,9}/[-._;()/:A-Za-z0-9]+$",
          "description": "The Digtial Object Identifier (DOI) for this publication. This should be just the DOI itself, not a URL, and should not include the `doi:` prefix (e.g. `10.1075/cal.20.02hie` not `https://doi.org/10.1075/cal.20.02hie` or `doi:10.1075/cal.20.02hie`)."
        },
        "edition": {
          "title": "Edition",
          "type": "integer",
          "minimum": 1,
          "description": "The edition of this publication, formatted as an integer"
        },
        "editors": {
          "title": "Editors",
          "type": "array",
          "uniqueItems": true,
          "description": "An array of editors for this bibliographic source",
          "items": {
            "title": "Editor",
            "type": "object",
            "$ref": "#/definitions/BibliographicSource-1.0.0.json_definitions_person",
            "description": "A Person object representing an editor"
          }
        },
        "issue": {
          "title": "Issue",
          "type": "string",
          "description": "The publication issue"
        },
        "link": {
          "title": "Link",
          "type": "string",
          "format": "uri",
          "description": "A link to a web page where this publication may be viewed or downloaded"
        },
        "pages": {
          "title": "Pages",
          "type": "string",
          "description": "The page numbers of this publication"
        },
        "publication": {
          "title": "Publication",
          "type": "string",
          "description": "The publication that this bibliographic source is published in"
        },
        "publicationType": {
          "title": "Publication Type",
          "type": "string",
          "description": "The type of publication",
          "enum": [
            "journal article",
            "book",
            "generic",
            "book section",
            "conference proceedings",
            "working paper",
            "report",
            "web page",
            "thesis",
            "magazine article",
            "newspaper article",
            "television broadcast",
            "encyclopedia article",
            "film"
          ]
        },
        "publisher": {
          "title": "Publisher (or Institution)",
          "type": "string",
          "description": "The name of the publisher of this soruce, or the institution where it was published"
        },
        "series": {
          "title": "Series",
          "type": "string",
          "description": "The series in which this publication was published"
        },
        "title": {
          "title": "Title",
          "type": "string",
          "minLength": 1,
          "description": "The title of this publication"
        },
        "translators": {
          "title": "Translators",
          "type": "array",
          "uniqueItems": true,
          "description": "An array of translators for this bibliographic source",
          "items": {
            "title": "Translator (Person)",
            "type": "object",
            "$ref": "#/definitions/BibliographicSource-1.0.0.json_definitions_person",
            "description": "A Person object representing a translator"
          }
        },
        "url": {
          "title": "JSON URL",
          "type": "string",
          "format": "uri",
          "description": "A URL for the JSON data for this bibliographic source"
        },
        "volume": {
          "title": "Volume",
          "type": "integer",
          "minimum": 1,
          "description": "The volume number for this publication"
        },
        "year": {
          "title": "Year",
          "type": "integer",
          "description": "The year this item was published. Use a positive integer for AD / ACE, and a negative integer for BC / BCE."
        }
      },
      "examples": [
        {
          "authors": [
            {
              "firstName": "Daniel W.",
              "lastName": "Hieber"
            }
          ],
          "citationKey": "Hieber2018",
          "city": "Amsterdam",
          "doi": "10.1075/cal.20.02hie",
          "editors": [
            {
              "firstName": "Kristel",
              "lastName": "Van Goethem"
            },
            {
              "firstName": "Muriel",
              "lastName": "Norde"
            },
            {
              "firstName": "Evie",
              "lastName": "Coussé"
            },
            {
              "firstName": "Gudrun",
              "lastName": "Vanderbauwhede"
            }
          ],
          "publication": "Category change from a constructional perspective",
          "publicationType": "book section",
          "publisher": "John Benjamins",
          "series": "Constructional approaches to language",
          "title": "Category genesis in Chitimacha",
          "type": "BibliographicSource",
          "url": "https://api.digitallinguistics.io/references/Hieber2018.json",
          "volume": 20,
          "year": 2018
        },
        {
          "authors": [
            {
              "firstName": "Daniel W.",
              "lastName": "Hieber"
            }
          ],
          "doi": "10.1515/lingty-2013-0013",
          "issue": "2",
          "link": "https://benjamins.com/catalog/cal.20.02hie",
          "pages": "15–46",
          "publication": "Linguistic Typology",
          "publicationType": "journal article",
          "title": "On linguistics, linguists, and our times: A linguist’s personal narrative reviewed",
          "type": "BibliographicSource",
          "url": "https://api.digitallinguistics.io/references/Hieber2013.json",
          "year": 2013
        }
      ]
    },
    "BibliographicSource-1.0.0.json_definitions_person": {
      "title": "Person",
      "type": "object",
      "description": "An object representing a Person",
      "additionalProperties": false,
      "properties": {
        "firstName": {
          "title": "First Name",
          "type": "string",
          "description": "The first name(s) of this author"
        },
        "lastName": {
          "title": "Last Name",
          "type": "string",
          "description": "The last name(s) of this author"
        }
      }
    },
    "Note-5.0.0.json": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Note",
      "type": "object",
      "description": "A note about this resource. Notes may also include `type` and `language` attributes.",
      "required": [
        "text"
      ],
      "additionalProperties": false,
      "properties": {
        "type": {
          "title": "Type",
          "type": "string",
          "const": "Note",
          "readOnly": true,
          "description": "The type of object. Must be set to `Note`."
        },
        "dateCreated": {
          "title": "Date Created",
          "type": "string",
          "description": "The date and optionally time that this note was created",
          "oneOf": [
            {
              "format": "date"
            },
            {
              "format": "date-time"
            }
          ]
        },
        "dateModified": {
          "title": "Date Modified",
          "type": "string",
          "description": "The date and optionally time that this note was last modified",
          "oneOf": [
            {
              "format": "date"
            },
            {
              "format": "date-time"
            }
          ]
        },
        "language": {
          "title": "Note Language",
          "type": "string",
          "description": "A language code or language name of the language that this note is written in. Assumed to be English if not otherwise specified."
        },
        "noteType": {
          "title": "Note Type",
          "type": "string",
          "description": "The type of Note. Required for notes on Lexemes."
        },
        "source": {
          "title": "Source (Person - Database Reference)",
          "type": "object",
          "$ref": "#/definitions/DatabaseReference-4.3.0.json",
          "referenceType": "Person",
          "description": "A database reference to a Person object describing the person who is the source of the information in this Note. This is not necessarily the person who wrote it. For example, a linguist could make a note based on something that a speaker reports, in which case the speaker should be listed as the source."
        },
        "tags": {
          "title": "Tags",
          "type": "object",
          "$ref": "#/definitions/Tags-2.1.0.json",
          "description": "A set of tags that apply to this Note. Useful for tagging notes that need review or responses, or marking a note as resolved."
        },
        "text": {
          "title": "Note Text",
          "type": "string",
          "minLength": 1,
          "description": "The text of the note itself"
        }
      },
      "examples": [
        {
          "dateCreated": "2018-10-31T18:00:09.433Z",
          "dateModified": "2018-10-31T18:00:23.691Z",
          "language": "swa",
          "source": {
            "abbreviation": "DWH"
          },
          "text": "Msemaji huyu ni Janet Kerubo Momanyi.",
          "type": "Note"
        },
        {
          "dateCreated": "2018-10-31T18:00:09.433Z",
          "dateModified": "2018-10-31T18:00:23.691Z",
          "language": "eng",
          "noteType": "encyclopedic",
          "source": {
            "name": "Morris Swadesh"
          },
          "text": "Box turtles are known for eating strawberries.",
          "type": "Note"
        }
      ]
    },
    "DatabaseReference-4.3.0.json": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Database Reference",
      "type": "object",
      "description": "A reference to an item in a database, used when you wish to store an item separately in the database (following a relational database model), rather than inline. A disadvantage of this approach is that it often requires making multiple database calls. To avoid this, in most cases the actual object can be used instead of a database reference. For example, instead of making a reference to a separate Person file, you can simply include the Person object directly in place of the database reference. This is useful when you don\u0027t want to deal with cross references and multiple database calls. In this case, it is often a good idea to include just a minimal set of data. For a person, for example, you might include just the ID, abbreviation, family name, and given name. This prevents you from having to replicate all of the data about that Person each time it is used.",
      "additionalProperties": true,
      "properties": {
        "type": {
          "title": "Type",
          "type": "string",
          "const": "DatabaseReference",
          "readOnly": true,
          "description": "The type of object. Must be set to `DatabaseReference`."
        },
        "abbreviation": {
          "title": "Referenced Abbreviation",
          "type": "string",
          "$ref": "#/definitions/Abbreviation-2.1.0.json",
          "description": "The abbreviation of the referenced database item."
        },
        "id": {
          "title": "Referenced ID",
          "description": "The ID of the referenced database item"
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "description": "If the reference database item is a media item, use this field for the name of the referenced file."
        },
        "index": {
          "title": "Referenced Index",
          "type": "integer",
          "minimum": 1,
          "description": "The index of the referenced database item. Indexes should start at 1 rather than 0 to increase human readability."
        },
        "key": {
          "title": "Referenced Key",
          "type": "string",
          "pattern": "^[^\\s]+$",
          "description": "The key of the referenced database item"
        },
        "name": {
          "title": "Name",
          "$ref": "#/definitions/MultiLangString-5.0.0.json",
          "description": "The name of the referenced database item, optionally in multiple languages."
        },
        "referenceType": {
          "title": "Referenced Item Type",
          "type": "string",
          "description": "The type of database item being referenced",
          "enum": [
            "BibliographicReference",
            "Bundle",
            "Language",
            "Lexeme",
            "Location",
            "Media",
            "Morpheme",
            "Orthography",
            "Person",
            "Sense",
            "Text",
            "Utterance",
            "Word"
          ]
        },
        "url": {
          "title": "Referenced URL",
          "type": "string",
          "format": "uri",
          "description": "The URL of the referenced database item"
        }
      },
      "examples": [
        {
          "index": 2,
          "referenceType": "Utterance",
          "type": "DatabaseReference",
          "url": "https://api.digitallinguistics.io/languages/Chitimacha/texts/A1/utterances/2"
        },
        {
          "key": "Omoiseke",
          "name": "Ómoíséké ósokérété chíséese",
          "referenceType": "Text",
          "type": "DatabaseReference",
          "url": "https://api.digitallinguistics.io/languages/Gusii/texts/Omoiseke"
        }
      ]
    },
    "MultiLangString-5.0.0.json": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Multi-Language Text / String",
      "description": "A piece of text in multiple languages. This is typically used for analyses, database properties, and information in metalanguages rather than transcriptions or translations of data (for those, see the [Transcription](https://spec.digitallinguistics.github.io/schemas/Transcription.html) and [Translation](https://spec.digitallinguistics.github.io/schemas/Translation.html) schemas). For example, the part of speech for a lexeme might be given as both English *noun* and Spanish *nombre*. Each key must be a valid IETF language tag for a language (see the [IETF](https://www.w3.org/International/articles/language-tags/) reference page), and the value for that key must be the string of text in that language. **Note:** MultiLangStrings do not have a `type` property.\n\nIf the text is in only one language and that language is English, it may be represented as a simple string instead of an object. Thus instead of `gloss: { en: \"M.SG\" }` you can simply write `gloss: \"M.SG\"`.",
      "oneOf": [
        {
          "type": "object",
          "additionalProperties": false,
          "patternProperties": {
            "^(((en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((([A-Za-z]{2,3}(-([A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-([A-Za-z]{4}))?(-([A-Za-z]{2}|[0-9]{3}))?(-([A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-([0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(x(-[A-Za-z0-9]{1,8})+))?)|(x(-[A-Za-z0-9]{1,8})+))$": {
              "title": "Text",
              "type": "string",
              "description": "The string of text in the specified language"
            }
          }
        },
        {
          "type": "string"
        }
      ],
      "examples": [
        "man",
        {
          "en": "man",
          "fr": "homme"
        }
      ]
    },
    "Tags-2.1.0.json": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Tags",
      "type": "object",
      "description": "A tag is a piece of metadata that can be applied to almost any DLx object. The tags object contains a set of tags for this resource as pairs of attributes and values. For example, a researcher might tag a suffix with the attribute `person`, and a value of `3`, to indicate that the particular suffix is 3rd Person. If no value is needed, the value may also be set to `true` or `false` (but not `null`), however users are encouraged to use both attribute and value for every tag, since this helps identify the larger category that the tag value belongs to. Note: The Tags object does not have a `type` property.",
      "additionalProperties": {
        "title": "Tag",
        "description": "A single tag, as an attribute-value pair.",
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "boolean"
          },
          {
            "type": "number"
          }
        ]
      },
      "examples": [
        {
          "role": "subject",
          "activated": true
        },
        {
          "VOT": 0.012
        }
      ]
    }
  }
}