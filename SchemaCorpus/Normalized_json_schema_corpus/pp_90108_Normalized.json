{
  "title": "renderer",
  "type": "object",
  "$schema": "http://json-schema.org/draft-04/schema",
  "description": "The renderer object contains the drawing information for the operationalLayer. This is a list of links to all the renderer objects.",
  "oneOf": [
    {
      "$ref": "#/definitions/classBreaksRenderer_schema.json"
    },
    {
      "$ref": "#/definitions/pointCloudRenderers_schema.json"
    },
    {
      "$ref": "#/definitions/rasterRenderers_schema.json"
    },
    {
      "$ref": "#/definitions/simpleRenderer_schema.json"
    },
    {
      "$ref": "#/definitions/uniqueValueFromStyleRenderer_schema.json"
    },
    {
      "$ref": "#/definitions/uniqueValueRenderer_schema.json"
    }
  ],
  "definitions": {
    "classBreaksRenderer_schema.json": {
      "title": "ClassBreaks Renderer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "A class breaks renderer symbolizes based on the value of some numeric attribute. The classBreakInfo define the values at which the symbology changes.",
      "properties": {
        "authoringInfo": {
          "type": "object",
          "description": "An object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific overridable settings so that next time it is accessed via the UI, their selections are remembered. Non-authoring clients can ignore it.",
          "$ref": "#/definitions/authoringInfo_schema.json"
        },
        "backgroundFillSymbol": {
          "type": "object",
          "description": "Supported only for polygon features.",
          "$ref": "#/definitions/polygonSymbol3D_schema.json"
        },
        "classBreakInfos": {
          "type": "array",
          "description": "Array of classBreakInfo objects.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/classBreakInfo_schema.json"
          }
        },
        "defaultLabel": {
          "type": "string",
          "description": "Label for the default symbol used to draw unspecified values."
        },
        "defaultSymbol": {
          "type": "object",
          "description": "Symbol used when a value cannot be classified.",
          "$ref": "#/definitions/symbol3D_schema.json"
        },
        "field": {
          "type": "string",
          "description": "Attribute field used for renderer."
        },
        "legendOptions": {
          "type": "object",
          "description": "A legend containing one title, which is a string describing the renderer in the legend.",
          "$ref": "#/definitions/rendererLegendOptions_schema.json"
        },
        "minValue": {
          "type": "number",
          "description": "The minimum numeric data value needed to begin class breaks."
        },
        "normalizationField": {
          "type": "string",
          "description": "Used when normalizationType is field. The string value indicating the attribute field by which the data value is normalized."
        },
        "normalizationTotal": {
          "type": "number",
          "description": "Used when normalizationType is percent-of-total, this number property contains the total of all data values."
        },
        "normalizationType": {
          "type": "string",
          "description": "Determine how the data was normalized.",
          "enum": [
            "esriNormalizeByField",
            "esriNormalizeByLog",
            "esriNormalizeByPercentOfTotal"
          ]
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "classBreaks"
          ]
        },
        "valueExpression": {
          "type": "string",
          "description": "An [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to a number."
        },
        "valueExpressionTitle": {
          "type": "string",
          "description": "The title identifying and describing the associated [Arcade](https://developers.arcgis.com/arcade/) expression as defined in the `valueExpression` property."
        },
        "visualVariables": {
          "type": "array",
          "description": "An array of objects used to set rendering properties.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/visualVariable_schema.json"
          }
        }
      },
      "required": [
        "classBreakInfos",
        "type"
      ],
      "additionalProperties": false
    },
    "authoringInfo_schema.json": {
      "title": "authoringInfo",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The authoringInfo is an object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific overridable settings so that next time it is accessed via an authoring client, their selections are remembered. Non-authoring clients can ignore it. Properties for color/size/transparency sliders, theme selection, classification information, and additional properties are saved within this object.",
      "properties": {
        "classificationMethod": {
          "type": "string",
          "description": "Used for classed color or size. The default value is `esriClassifyManual`.",
          "enum": [
            "esriClassifyDefinedInterval",
            "esriClassifyNaturalBreaks",
            "esriClassifyEqualInterval",
            "esriClassifyQuantile",
            "esriClassifyStandardDeviation",
            "esriClassifyManual"
          ],
          "default": "esriClassifyManual"
        },
        "colorRamp": {
          "type": "object",
          "$ref": "#/definitions/colorRamp_schema.json"
        },
        "fields": {
          "type": "array",
          "description": "An array of string values representing field names used for creating predominance renderers.",
          "items": {
            "type": "string"
          }
        },
        "lengthUnit": {
          "type": "string",
          "description": "Unit used in user interfaces to display world/map sizes and distances",
          "enum": [
            "inches",
            "feet",
            "yards",
            "miles",
            "nautical-miles",
            "millimeters",
            "centimeters",
            "decimeters",
            "meters",
            "kilometers",
            "decimal-degrees"
          ]
        },
        "standardDeviationInterval": {
          "type": "number",
          "description": "Use this property if the classificationMethod is `esriClassifyStandardDeviation`.",
          "enum": [
            1,
            0.5,
            0.33,
            0.25
          ]
        },
        "type": {
          "type": "string",
          "description": "Used in case of classed renderers.",
          "enum": [
            "classedSize",
            "classedColor",
            "predominance",
            "univariateColorSize"
          ]
        },
        "visualVariables": {
          "type": "array",
          "description": "An array of visualVariable objects containing additional information needed when authoring the renderer.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/authoringInfo_visualVariable_schema.json"
          }
        }
      },
      "esriDocumentation": {
        "additionalInformation": "The authoringInfo object is not required with a renderer. It is only used if rendering was generated using the Scene Viewer rendering tools. All snippets provided below show a portion of what is contained within `authoringInfo`. Please refer to the sample snippets in the [authoringInfo visual variable](authoringInfo_visualVariable.md) object for additional help.",
        "examples": [
          {
            "title": "Classed Size Renderer (Option 1)",
            "code": {
              "authoringInfo": {
                "type": "classedSize",
                "classificationMethod": "esriClassifyNaturalBreaks"
              }
            }
          },
          {
            "title": "Classed Size Renderer (Option 2)",
            "code": {
              "authoringInfo": {
                "type": "classedSize",
                "classificationMethod": "esriClassifyStandardDeviation",
                "standardDeviationInterval": 0.5
              }
            }
          },
          {
            "title": "Classed Color Renderer (Option 1)",
            "code": {
              "authoringInfo": {
                "type": "classedColor",
                "classificationMethod": "esriClassifyNaturalBreaks"
              }
            }
          },
          {
            "title": "Classed Color Renderer (Option 2)",
            "code": {
              "authoringInfo": {
                "type": "classedColor",
                "classificationMethod": "esriClassifyStandardDeviation",
                "standardDeviationInterval": 0.5
              }
            }
          },
          {
            "title": "Predominance Renderer",
            "code": {
              "authoringInfo": {
                "type": "predominance",
                "fields": [
                  "COST",
                  "DOLLARS",
                  "PRICE"
                ]
              }
            }
          },
          {
            "title": "Univariate Color Size Renderer",
            "code": {
              "authoringInfo": {
                "type": "univariateColorSize",
                "visualVariables": [
                  {
                    "type": "sizeInfo",
                    "minSliderValue": 1,
                    "maxSliderValue": 1000
                  },
                  {
                    "type": "colorInfo",
                    "minSliderValue": 1,
                    "maxSliderValue": 1000,
                    "theme": "high-to-low"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "colorRamp_schema.json": {
      "title": "Color Ramp",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "A colorRamp object is used to specify a range of colors that are applied to a group of symbols.",
      "properties": {
        "algorithm": {
          "type": "string",
          "description": "Algorithm used for calculating the ramp.",
          "enum": [
            "esriHSVAlgorithm",
            "esriCIELabAlgorithm",
            "esriLabLChAlgorithm"
          ]
        },
        "colorRamps": {
          "type": "array",
          "description": "A multipart color ramp is defined by a list of constituent color ramps.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/colorRamp_schema.json"
          }
        },
        "fromColor": {
          "description": "Array representing the initial color to start the ramp from.",
          "$ref": "#/definitions/color_schema.json"
        },
        "toColor": {
          "description": "Array representing the final color to end the ramp with.",
          "$ref": "#/definitions/color_schema.json"
        },
        "type": {
          "type": "string",
          "description": "Value indicating the type of colorRamp.",
          "enum": [
            "algorithmic",
            "multipart"
          ]
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Algorithmic",
            "code": {
              "colorRamp": {
                "type": "algorithmic",
                "fromColor": [
                  115,
                  76,
                  0,
                  255
                ],
                "toColor": [
                  255,
                  25,
                  86,
                  255
                ],
                "algorithm": "esriHSVAlgorithm"
              }
            }
          },
          {
            "title": "Multipart",
            "code": {
              "colorRamp": {
                "type": "multipart",
                "colorRamps": [
                  {
                    "type": "algorithmic",
                    "fromColor": [
                      255,
                      0,
                      0,
                      255
                    ],
                    "toColor": [
                      255,
                      255,
                      0,
                      255
                    ],
                    "algorithm": "esriHSVAlgorithm"
                  },
                  {
                    "type": "algorithmic",
                    "fromColor": [
                      0,
                      255,
                      255,
                      255
                    ],
                    "toColor": [
                      0,
                      0,
                      255,
                      255
                    ],
                    "algorithm": "esriHSVAlgorithm"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "color_schema.json": {
      "title": "color",
      "type": "array",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Color is represented as a three or four-element array. The four elements represent values for red, green, blue, and alpha in that order. Values range from 0 through 255. If color is undefined for a symbol, the color value is null.",
      "items": {
        "type": "integer",
        "minimum": 0,
        "maximum": 255
      },
      "minItems": 3,
      "maxItems": 4,
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "color",
            "code": {
              "color": [
                13,
                38,
                68,
                255
              ]
            }
          }
        ]
      }
    },
    "authoringInfo_visualVariable_schema.json": {
      "title": "AuthoringInfo Visual Variable",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "This visual variable is different from `sizeInfo`, `colorInfo`, `transparencyInfo`, and `rotationInfo` as it is an array of visual variables pertaining specifically to authoringInfo and not directly on the [renderer](renderer.md).",
      "properties": {
        "endTime": {
          "description": "A Unix stamp. Both `startTime` or `endTime` can be fields. If this is the case, their names must be different.",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ]
        },
        "field": {
          "type": "string",
          "description": "The attribute field the user chose in the Smart Mapping gallery. Must be the same as in either `startTime` or `endTime`."
        },
        "maxSliderValue": {
          "type": "number",
          "description": "A numeric value indicating the maximum value displayed."
        },
        "minSliderValue": {
          "type": "number",
          "description": "A numeric value indicating the minimum value displayed."
        },
        "startTime": {
          "description": "A Unix time stamp. Both `startTime` or `endTime` can be fields. If this is the case, their names must be different.",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ]
        },
        "style": {
          "type": "string",
          "description": "(This property is used for comparison rendering). It is used to map the ratio between two numbers. It is possible to express that relationship as percentages, simple ratios, or an overall percentage.",
          "enum": [
            "percent",
            "ratio",
            "percentTotal"
          ]
        },
        "theme": {
          "type": "string",
          "description": "Theme to be used only when working with visual variables of type `colorInfo`. Default is `high-to-low`.",
          "enum": [
            "high-to-low",
            "above-and-below",
            "centered-on",
            "extremes"
          ]
        },
        "type": {
          "type": "string",
          "description": "A string value specifying the type of renderer\u0027s visual variable.",
          "enum": [
            "colorInfo",
            "sizeInfo",
            "transparencyInfo",
            "rotationInfo"
          ]
        },
        "units": {
          "type": "string",
          "description": "(This property is used only with age renderers.) Units for startTime and endTime.",
          "enum": [
            "seconds",
            "minutes",
            "hours",
            "days",
            "months",
            "years"
          ]
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Attribute Transparency",
            "description": "Allows displaying features with different levels of opacity.",
            "code": {
              "visualVariables": [
                {
                  "type": "transparencyInfo",
                  "minSliderValue": 0.0003,
                  "maxSliderValue": 23.8951
                }
              ]
            }
          },
          {
            "title": "Continuous Size Renderer",
            "description": "If a layer contains date values, it is possible to use a sequence of proportional symbols to view dates sequentially on a scene.",
            "code": {
              "visualVariables": [
                {
                  "type": "sizeInfo",
                  "minSliderValue": 1,
                  "maxSliderValue": 14928.5396
                }
              ]
            }
          },
          {
            "title": "Continuous Color Renderer",
            "description": "If a layer contains date values, it is possible to use color to view data sequentially from new to old or before and after a key date.",
            "code": {
              "visualVariables": [
                {
                  "type": "colorInfo",
                  "minSliderValue": 1,
                  "maxSliderValue": 14928.5396,
                  "theme": "high-to-low"
                }
              ]
            }
          },
          {
            "title": "Age-Size Renderer",
            "description": "If a layer contains date or time values, it is possible to use a sequence of proportional symbols to view the age of features. Age reflects the length of time (in seconds, minutes, hours, days, months, or years) from a start date or time to an end date or time.",
            "code": {
              "visualVariables": [
                {
                  "type": "sizeInfo",
                  "minSliderValue": -129.2625,
                  "maxSliderValue": 234.7374,
                  "units": "days",
                  "startTime": "DATE",
                  "endTime": 1471970511924,
                  "field": "DATE"
                }
              ]
            }
          },
          {
            "title": "Age-Color Renderer",
            "description": "If a layer contains date or time values, it is possible to use color to represent the age of features. Age reflects the length of time (in seconds, minutes, hours, days, months, or years) from a start date or time to an end date or time.",
            "code": {
              "visualVariables": [
                {
                  "type": "colorInfo",
                  "minSliderValue": -129.2625,
                  "maxSliderValue": 234.7374,
                  "units": "days",
                  "startTime": "DATE",
                  "endTime": 1471970511924,
                  "field": "DATE",
                  "theme": "high-to-low"
                }
              ]
            }
          },
          {
            "title": "Compare Renderer (special color renderer)",
            "description": "This style allows mapping the ratio between two numbers and expresses that relationship as percentages, simple ratios, or overall percentage.",
            "code": {
              "visualVariables": [
                {
                  "type": "colorInfo",
                  "minSliderValue": 0.0003858501658018686,
                  "maxSliderValue": 23.89513157894737,
                  "theme": "above-and-below",
                  "style": "ratio"
                }
              ]
            }
          },
          {
            "title": "Predominance Renderer",
            "description": "This style uses transparency to show the relative strength of the predominant attribute for each feature in the layer. The strength, or degree, of predominance is calculated as a percentage of the total value of all the attributes for a given feature.",
            "schema": "authoringInfo_schema.json",
            "code": {
              "authoringInfo": {
                "type": "predominance",
                "fields": [
                  "COST",
                  "DOLLARS",
                  "PRICE"
                ],
                "visualVariables": [
                  {
                    "type": "transparencyInfo",
                    "minSliderValue": 0,
                    "maxSliderValue": 100
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "polygonSymbol3D_schema.json": {
      "title": "PolygonSymbol3D",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "PolygonSymbol3D is used to render features with Polygon geometry in a 3D SceneView. Polygon features may also be rendered as points with icons or objects at the centroid of each polygon.",
      "properties": {
        "styleOrigin": {
          "$ref": "#/definitions/styleOrigin_schema.json"
        },
        "symbolLayers": {
          "type": "array",
          "description": "A Collection of Symbol3DLayer objects used to visualize the graphic or feature.",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/fillSymbol3DLayer_schema.json"
              },
              {
                "$ref": "#/definitions/extrudeSymbol3DLayer_schema.json"
              },
              {
                "$ref": "#/definitions/iconSymbol3DLayer_schema.json"
              },
              {
                "$ref": "#/definitions/objectSymbol3DLayer_schema.json"
              },
              {
                "description": "\u003cem\u003eDeprecated\u003c/em\u003e, use [fillSymbol3DLayer with outline](fillSymbol3DLayer.md) instead",
                "$ref": "#/definitions/lineSymbol3DLayer_schema.json"
              }
            ]
          }
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used.",
          "enum": [
            "PolygonSymbol3D"
          ]
        }
      },
      "required": [
        "symbolLayers",
        "type"
      ],
      "additionalProperties": false
    },
    "styleOrigin_schema.json": {
      "title": "styleOrigin",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The origin of the style from which the symbol was originally referenced. A reference to the style origin can be either by styleName or by styleUrl (but not both). It may be used to understand where a symbol was originally sourced from, but does not affect actual appearance or rendering of the symbol.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Identifies a symbol in the style by name."
        },
        "styleName": {
          "type": "string",
          "description": "A registered web style name, such as `EsriThematicShapesStyle`"
        },
        "styleUrl": {
          "description": "URL to a style definition.",
          "oneOf": [
            {
              "type": "string",
              "format": "uri",
              "description": "An absolute URL"
            },
            {
              "type": "string",
              "description": "A relative path starting with ./",
              "pattern": "^\\./.+$"
            }
          ]
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "styleName"
          ]
        },
        {
          "required": [
            "name",
            "styleUrl"
          ]
        }
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "styleOrigin",
            "schema": "pointSymbol3D_schema.json",
            "code": {
              "symbol": {
                "styleOrigin": {
                  "styleName": "EsriThematicTreesStyle",
                  "name": "Frangula"
                },
                "type": "PointSymbol3D",
                "symbolLayers": [
                  {
                    "type": "Object",
                    "resource": {
                      "href": "http://static.arcgis.com/arcgis/styleItems/ThematicTrees/web/resource/FrangulaAlnus.json"
                    },
                    "height": 100,
                    "material": {
                      "color": [
                        255,
                        0,
                        0
                      ]
                    }
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "fillSymbol3DLayer_schema.json": {
      "title": "FillSymbol3DLayer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "FillSymbol3DLayer is used to render the surfaces of flat 2D Polygon geometries and 3D volumetric meshes in a SceneView.",
      "properties": {
        "edges": {
          "type": "object",
          "description": "Specifies an edge visualization style. Only affects MeshSymbol3D.",
          "$ref": "#/definitions/edges_schema.json"
        },
        "enable": {
          "type": "boolean"
        },
        "material": {
          "$ref": "#/definitions/material_schema.json"
        },
        "outline": {
          "$ref": "#/definitions/outline_schema.json"
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used.",
          "enum": [
            "Fill"
          ]
        }
      },
      "required": [
        "material",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Fill SymbolLayer",
            "code": {
              "symbolLayers": [
                {
                  "type": "Fill",
                  "material": {
                    "color": [
                      255,
                      0,
                      0
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "edges_schema.json": {
      "title": "Edges",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Edges describe additional styles applied to visually important edges of 3D objects.",
      "oneOf": [
        {
          "$ref": "#/definitions/sketchEdges_schema.json"
        },
        {
          "$ref": "#/definitions/solidEdges_schema.json"
        }
      ]
    },
    "sketchEdges_schema.json": {
      "title": "Sketch Edges",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The sketch edge rendering configuration of a symbol layer. Edges of type `sketch` are rendered with a hand-drawn look in mind.",
      "properties": {
        "color": {
          "$ref": "#/definitions/color_schema.json"
        },
        "extensionLength": {
          "type": "number",
          "description": "A size in points by which to extend edges beyond their original end points."
        },
        "size": {
          "type": "number",
          "description": "Edge size in points, positive only",
          "minimum": 0
        },
        "transparency": {
          "type": "integer",
          "description": "The value has to lie between `100` (full transparency) and `0` (full opacity).",
          "minimum": 0,
          "maximum": 100
        },
        "type": {
          "type": "string",
          "description": "The type of edge visualization.",
          "enum": [
            "sketch"
          ]
        }
      },
      "required": [
        "color",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "edges",
            "code": {
              "edges": {
                "type": "sketch",
                "color": [
                  255,
                  0,
                  0
                ],
                "size": 0.75,
                "transparency": 10,
                "extensionLength": 5
              }
            }
          }
        ]
      }
    },
    "solidEdges_schema.json": {
      "title": "Solid Edges",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The solid edge rendering configuration of a symbol layer. Edges of type `solid` are rendered in a single color, unaffected by scene lighting.",
      "properties": {
        "color": {
          "$ref": "#/definitions/color_schema.json"
        },
        "extensionLength": {
          "type": "number",
          "description": "A size in points by which to extend edges beyond their original end points."
        },
        "size": {
          "type": "number",
          "description": "Edge size in points, positive only",
          "minimum": 0
        },
        "transparency": {
          "type": "integer",
          "description": "The value has to lie between `100` (full transparency) and `0` (full opacity).",
          "minimum": 0,
          "maximum": 100
        },
        "type": {
          "type": "string",
          "description": "The type of edge visualization.",
          "enum": [
            "solid"
          ]
        }
      },
      "required": [
        "color",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "edges",
            "code": {
              "edges": {
                "type": "solid",
                "color": [
                  255,
                  0,
                  0
                ],
                "size": 0.75,
                "transparency": 10,
                "extensionLength": 5
              }
            }
          }
        ]
      }
    },
    "material_schema.json": {
      "title": "Material",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The material used to shade the geometry.",
      "properties": {
        "color": {
          "$ref": "#/definitions/color_schema.json"
        },
        "colorMixMode": {
          "type": "string",
          "description": "Controls how symbolLayer or visualVariable color is applied onto the underlying geometry color/texture. This property only applies to FillSymbol3DLayer within MeshSymbol3D.\u003cbr\u003e\u003cul\u003e\u003cli\u003e`tint`: the feature\u0027s appearance (in terms of color) should be altered to match the symbol / visual variable color.\u003c/li\u003e\u003cli\u003e`replace`: the feature\u0027s color is replaced with the symbol / visual variable color.\u003c/li\u003e\u003cli\u003e`multiply`: the feature\u0027s color is multiplied with the symbol color.\u003c/li\u003e\u003c/ul\u003e",
          "enum": [
            "tint",
            "replace",
            "multiply"
          ],
          "default": "tint"
        },
        "transparency": {
          "type": "integer",
          "minimum": 0,
          "maximum": 100
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "material",
            "code": {
              "material": {
                "color": [
                  255,
                  0,
                  0
                ],
                "transparency": 20,
                "colorMixMode": "tint"
              }
            }
          }
        ]
      }
    },
    "outline_schema.json": {
      "title": "Outline",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The outline of the symbol layer.",
      "properties": {
        "color": {
          "$ref": "#/definitions/color_schema.json"
        },
        "size": {
          "type": "number",
          "description": "Outline size in points, positive only",
          "minimum": 0
        },
        "transparency": {
          "type": "integer",
          "description": "The value has to lie between `100` (full transparency) and `0` (full opacity).",
          "minimum": 0,
          "maximum": 100
        }
      },
      "required": [
        "color",
        "size"
      ],
      "additionalProperties": false
    },
    "extrudeSymbol3DLayer_schema.json": {
      "title": "ExtrudeSymbol3DLayer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "ExtrudeSymbol3DLayer is used to render Polygon geometries by extruding them upward from the ground, creating a 3D volumetric object.",
      "properties": {
        "edges": {
          "type": "object",
          "description": "Specifies an edge visualization style.",
          "$ref": "#/definitions/edges_schema.json"
        },
        "enable": {
          "type": "boolean"
        },
        "material": {
          "$ref": "#/definitions/material_schema.json"
        },
        "size": {
          "type": "number",
          "description": "Extrusion height in meters."
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used.",
          "enum": [
            "Extrude"
          ]
        }
      },
      "required": [
        "size",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Extrude SymbolLayer",
            "code": {
              "symbolLayer": {
                "type": "Extrude",
                "material": {
                  "color": [
                    255,
                    0,
                    0
                  ]
                },
                "size": 250
              }
            }
          }
        ]
      }
    },
    "iconSymbol3DLayer_schema.json": {
      "title": "IconSymbol3DLayer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "IconSymbol3DLayer is used to render Point geometries using a flat 2D icon (e.g. a circle) with a PointSymbol3D in a SceneView.",
      "properties": {
        "anchor": {
          "type": "string",
          "enum": [
            "center",
            "left",
            "right",
            "top",
            "bottom",
            "topLeft",
            "topRight",
            "bottomLeft",
            "bottomRight"
          ],
          "default": "center"
        },
        "enable": {
          "type": "boolean"
        },
        "material": {
          "$ref": "#/definitions/material_schema.json"
        },
        "outline": {
          "$ref": "#/definitions/outline_schema.json"
        },
        "resource": {
          "$ref": "#/definitions/iconSymbol3DLayer_resource_schema.json"
        },
        "size": {
          "type": "number",
          "description": "Icon size in points, positive only",
          "minimum": 0
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used.",
          "enum": [
            "Icon"
          ]
        }
      },
      "required": [
        "size",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Icon SymbolLayer",
            "code": {
              "symbolLayers": [
                {
                  "type": "Icon",
                  "resource": {
                    "primitive": "kite"
                  },
                  "material": {
                    "color": [
                      255,
                      255,
                      255
                    ]
                  },
                  "size": 12,
                  "anchor": "bottom",
                  "outline": {
                    "size": 1,
                    "color": [
                      0,
                      0,
                      0
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "iconSymbol3DLayer_resource_schema.json": {
      "title": "IconSymbol3DLayer Resource",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The shape (primitive) or image URL (href) used to visualize the features.",
      "properties": {
        "dataURI": {
          "type": "string",
          "description": "an image encoded as base64 string, starting with `data:image/`",
          "pattern": "^data:image/(.|\\n|\\r)+$"
        },
        "href": {
          "description": "URL to the returned image.",
          "oneOf": [
            {
              "type": "string",
              "description": "An absolute URL",
              "pattern": "^https?://.+$"
            },
            {
              "type": "string",
              "description": "A relative path starting with ./",
              "pattern": "^\\./.+$"
            }
          ]
        },
        "primitive": {
          "type": "string",
          "description": "Specifies the type of symbol used.",
          "enum": [
            "circle",
            "square",
            "cross",
            "x",
            "kite"
          ]
        }
      },
      "oneOf": [
        {
          "required": [
            "primitive"
          ]
        },
        {
          "required": [
            "href"
          ]
        },
        {
          "required": [
            "dataURI"
          ]
        }
      ],
      "additionalProperties": false
    },
    "objectSymbol3DLayer_schema.json": {
      "title": "ObjectSymbol3DLayer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "ObjectSymbol3DLayer is used to render Point geometries using a volumetric 3D shape (e.g., a sphere or cylinder) with a Symbol3D in a SceneView.",
      "properties": {
        "anchor": {
          "type": "string",
          "description": "The positioning of the object relative to the geometry.",
          "enum": [
            "center",
            "bottom",
            "origin",
            "top"
          ],
          "default": "origin"
        },
        "depth": {
          "type": "number",
          "description": "Object depth in meters, positive only",
          "minimum": 0
        },
        "enable": {
          "type": "boolean"
        },
        "heading": {
          "type": "number",
          "description": "Rotation angle around Z axis in degrees. At 0 degrees, the model points in the direction of the Y-axis. Positive values indicate clockwise rotation (when looked at from the top). [Detailed description](static/objectSymbolLayerOrientation.md)."
        },
        "height": {
          "type": "number",
          "description": "Object height in meters, positive only",
          "minimum": 0
        },
        "material": {
          "$ref": "#/definitions/material_schema.json"
        },
        "resource": {
          "$ref": "#/definitions/objectSymbol3DLayer_resource_schema.json"
        },
        "roll": {
          "type": "number",
          "description": "Rotation angle around Y axis in degrees. At 0 degrees, the model is level. A positive value lifts the left part and lowers the right part of the model. [Detailed description](static/objectSymbolLayerOrientation.md)."
        },
        "tilt": {
          "type": "number",
          "description": "Rotation angle around X axis in degrees. At 0 degrees, the model is level. A positive value lifts the front and lowers the back of the model. [Detailed description](static/objectSymbolLayerOrientation.md)."
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used.",
          "enum": [
            "Object"
          ]
        },
        "width": {
          "type": "number",
          "description": "Object width in meters, positive only",
          "minimum": 0
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "additionalInformation": "[Anchor and `origin`](https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-ObjectSymbol3DLayer.html#anchor) in ArcGIS API for JavaScript.",
        "examples": [
          {
            "title": "Object Symbol",
            "code": {
              "symbolLayers": [
                {
                  "type": "Object",
                  "resource": {
                    "primitive": "sphere"
                  },
                  "width": 50000,
                  "height": 50000,
                  "material": {
                    "color": [
                      128,
                      255,
                      0
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Object Symbol with 3-axis rotation",
            "code": {
              "symbolLayers": [
                {
                  "type": "Object",
                  "resource": {
                    "primitive": "diamond"
                  },
                  "width": 50000,
                  "height": 50000,
                  "material": {
                    "color": [
                      128,
                      255,
                      0
                    ]
                  },
                  "heading": 12,
                  "tilt": 10,
                  "roll": 5
                }
              ]
            }
          }
        ]
      }
    },
    "objectSymbol3DLayer_resource_schema.json": {
      "title": "ObjectSymbol3DLayer Resource",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The primitive shape (primitive) or external 3D model (href) used to visualize the points.",
      "properties": {
        "href": {
          "oneOf": [
            {
              "type": "string",
              "description": "An absolute URL",
              "pattern": "^https?://.+$"
            },
            {
              "type": "string",
              "description": "A relative path starting with ./",
              "pattern": "^\\./.+$"
            }
          ]
        },
        "primitive": {
          "type": "string",
          "enum": [
            "sphere",
            "cylinder",
            "cube",
            "cone",
            "invertedCone",
            "diamond",
            "tetrahedron"
          ]
        }
      },
      "oneOf": [
        {
          "required": [
            "primitive"
          ]
        },
        {
          "required": [
            "href"
          ]
        }
      ],
      "additionalProperties": false
    },
    "lineSymbol3DLayer_schema.json": {
      "title": "LineSymbol3DLayer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "LineSymbol3DLayer renders Polyline geometries using a flat 2D line with a LineSymbol3D in a 3D SceneView.",
      "properties": {
        "enable": {
          "type": "boolean"
        },
        "material": {
          "$ref": "#/definitions/material_schema.json"
        },
        "size": {
          "type": "number",
          "description": "Line width in points, positive only",
          "minimum": 0
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used.",
          "enum": [
            "Line"
          ]
        }
      },
      "required": [
        "size",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Line SymbolLayer",
            "code": {
              "symbolLayers": [
                {
                  "type": "Line",
                  "material": {
                    "color": [
                      255,
                      0,
                      0
                    ]
                  },
                  "size": 12
                }
              ]
            }
          }
        ]
      }
    },
    "classBreakInfo_schema.json": {
      "title": "classBreakInfo",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The classBreaksInfo object provides information about the class breaks associated with the renderer.",
      "properties": {
        "classMaxValue": {
          "type": "number",
          "description": "A numeric value used to specify the maximum value for a break."
        },
        "classMinValue": {
          "type": "number",
          "description": "A numeric value used to specify discontinuous class breaks. If this value is null or is missing, the map server will calculate the minimum value based on the preceding class\u0027 maximum value."
        },
        "description": {
          "type": "string",
          "description": "String value used to describe the drawn symbol."
        },
        "label": {
          "type": "string",
          "description": "String value used to label the drawn symbol."
        },
        "symbol": {
          "type": "object",
          "description": "An object used to display the value.",
          "$ref": "#/definitions/symbol3D_schema.json"
        }
      },
      "required": [
        "symbol"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "classBreak Info",
            "code": {
              "classBreakInfo": {
                "classMaxValue": 1000,
                "label": "10.0 - 1000.000000",
                "description": "10 to 1000",
                "symbol": {
                  "type": "PointSymbol3D",
                  "symbolLayers": [
                    {
                      "type": "Icon",
                      "resource": {
                        "primitive": "circle"
                      },
                      "material": {
                        "color": [
                          255,
                          255,
                          255
                        ]
                      },
                      "size": 12
                    }
                  ]
                }
              }
            }
          }
        ]
      }
    },
    "symbol3D_schema.json": {
      "title": "Symbol3D",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Symbol3D is the base class for all 3D symbols. It is used to render 2D Point, Polyline, and Polygon features in a FeatureLayer and 3D mesh features in a SceneLayer. All 3D symbols must be used in a SceneView instance; there is no support for 3D rendering in MapViews.",
      "oneOf": [
        {
          "$ref": "#/definitions/lineSymbol3D_schema.json"
        },
        {
          "$ref": "#/definitions/meshSymbol3D_schema.json"
        },
        {
          "$ref": "#/definitions/pointSymbol3D_schema.json"
        },
        {
          "$ref": "#/definitions/polygonSymbol3D_schema.json"
        },
        {
          "$ref": "#/definitions/styleSymbolReference_schema.json"
        }
      ]
    },
    "lineSymbol3D_schema.json": {
      "title": "LineSymbol3D",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "LineSymbol3D is used to render features with Polyline geometry in a 3D SceneView.",
      "properties": {
        "styleOrigin": {
          "$ref": "#/definitions/styleOrigin_schema.json"
        },
        "symbolLayers": {
          "type": "array",
          "description": "A Collection of Symbol3DLayer objects used to visualize the graphic or feature.",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/lineSymbol3DLayer_schema.json"
              },
              {
                "$ref": "#/definitions/pathSymbol3DLayer_schema.json"
              }
            ]
          }
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used.",
          "enum": [
            "LineSymbol3D"
          ]
        }
      },
      "required": [
        "symbolLayers",
        "type"
      ],
      "additionalProperties": false
    },
    "pathSymbol3DLayer_schema.json": {
      "title": "PathSymbol3DLayer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "PathSymbol3DLayer renders Polyline geometries using a volumetric 3D tube with a LineSymbol3D in a SceneView.",
      "properties": {
        "enable": {
          "type": "boolean"
        },
        "material": {
          "$ref": "#/definitions/material_schema.json"
        },
        "size": {
          "type": "number",
          "description": "Path size (diameter) in meters, positive only",
          "minimum": 0
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used.",
          "enum": [
            "Path"
          ]
        },
        "width": {
          "type": "number",
          "description": "Path width in meters"
        }
      },
      "oneOf": [
        {
          "required": [
            "type",
            "size"
          ]
        },
        {
          "required": [
            "type",
            "width"
          ]
        }
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Path SymbolLayer",
            "code": {
              "symbolLayers": [
                {
                  "type": "Path",
                  "material": {
                    "color": [
                      255,
                      0,
                      0
                    ]
                  },
                  "size": 12
                }
              ]
            }
          }
        ]
      }
    },
    "meshSymbol3D_schema.json": {
      "title": "MeshSymbol3D",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "MeshSymbol3D is used to render 3D mesh features in a SceneLayer in a 3D SceneView.",
      "properties": {
        "styleOrigin": {
          "$ref": "#/definitions/styleOrigin_schema.json"
        },
        "symbolLayers": {
          "type": "array",
          "description": "A Collection of Symbol3DLayer objects used to visualize the graphic or feature.",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/fillSymbol3DLayer_schema.json"
              }
            ]
          }
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used",
          "enum": [
            "MeshSymbol3D"
          ]
        }
      },
      "required": [
        "symbolLayers",
        "type"
      ],
      "additionalProperties": false
    },
    "pointSymbol3D_schema.json": {
      "title": "PointSymbol3D",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "PointSymbol3D is used to render features with Point geometry in a 3D SceneView.",
      "properties": {
        "callout": {
          "$ref": "#/definitions/callout_schema.json"
        },
        "styleOrigin": {
          "$ref": "#/definitions/styleOrigin_schema.json"
        },
        "symbolLayers": {
          "type": "array",
          "description": "A Collection of Symbol3DLayer objects used to visualize the graphic or feature.",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/iconSymbol3DLayer_schema.json"
              },
              {
                "$ref": "#/definitions/objectSymbol3DLayer_schema.json"
              }
            ]
          }
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of symbol used",
          "enum": [
            "PointSymbol3D"
          ]
        },
        "verticalOffset": {
          "$ref": "#/definitions/verticalOffset_schema.json"
        }
      },
      "required": [
        "symbolLayers",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Point Symbol 3D",
            "code": {
              "symbol": {
                "type": "PointSymbol3D",
                "symbolLayers": [
                  {
                    "width": 30000,
                    "height": 160000,
                    "resource": {
                      "primitive": "cylinder"
                    },
                    "type": "Object",
                    "material": {
                      "color": [
                        0,
                        255,
                        0
                      ]
                    }
                  }
                ]
              }
            }
          },
          {
            "title": "Icon Point Symbol with verticalOffset and leader line callout",
            "code": {
              "symbol": {
                "type": "PointSymbol3D",
                "symbolLayers": [
                  {
                    "size": 16,
                    "resource": {
                      "primitive": "circle"
                    },
                    "type": "Icon",
                    "material": {
                      "color": [
                        0,
                        255,
                        0
                      ]
                    }
                  }
                ],
                "callout": {
                  "type": "line",
                  "color": [
                    255,
                    255,
                    255
                  ],
                  "size": 0.75,
                  "border": {
                    "color": [
                      50,
                      50,
                      50
                    ]
                  }
                },
                "verticalOffset": {
                  "screenLength": 100,
                  "maxWorldLength": 600,
                  "minWorldLength": 10
                }
              }
            }
          }
        ]
      }
    },
    "callout_schema.json": {
      "title": "Callout",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Callout configuration for a symbol.",
      "properties": {
        "border": {
          "$ref": "#/definitions/border_schema.json"
        },
        "color": {
          "description": "The color of the line.",
          "$ref": "#/definitions/color_schema.json"
        },
        "size": {
          "type": "number",
          "description": "The width of the line in points.",
          "minimum": 0
        },
        "transparency": {
          "type": "integer",
          "description": "A value between `100` (full transparency) and `0` (full opacity).",
          "minimum": 0,
          "maximum": 100,
          "default": 0
        },
        "type": {
          "type": "string",
          "description": "The type of the callout. A callout of type `line` connects an offset symbol or label with its location.",
          "enum": [
            "line"
          ]
        }
      },
      "required": [
        "color",
        "size",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "additionalInformation": "[Callout3D](https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-callouts-Callout3D.html) in ArcGIS API for JavaScript.",
        "examples": [
          {
            "title": "leader line",
            "code": {
              "callout": {
                "type": "line",
                "size": 0.75,
                "color": [
                  255,
                  255,
                  255
                ],
                "transparency": 20,
                "border": {
                  "color": [
                    50,
                    50,
                    50
                  ],
                  "transparency": 50
                }
              }
            }
          }
        ]
      }
    },
    "border_schema.json": {
      "title": "border",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Optional border on the line that is used to improve the contrast of the line color against various background colors.",
      "properties": {
        "color": {
          "$ref": "#/definitions/color_schema.json"
        },
        "transparency": {
          "type": "integer",
          "description": "A value between `100` (full transparency) and `0` (full opacity).",
          "minimum": 0,
          "maximum": 100,
          "default": 0
        }
      },
      "required": [
        "color"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "border",
            "code": {
              "border": {
                "color": [
                  255,
                  255,
                  255
                ],
                "transparency": 50
              }
            }
          }
        ]
      }
    },
    "verticalOffset_schema.json": {
      "title": "verticalOffset",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Shifts the symbol along the vertical world axis by a given length. The length is set in screen space units.",
      "properties": {
        "maxWorldLength": {
          "type": "number",
          "description": "The maximum vertical symbol lift in world units. It acts as an upper bound to avoid lift becoming too big."
        },
        "minWorldLength": {
          "type": "number",
          "description": "The minimum vertical symbol lift in world units. It acts as a lower bound to avoid lift becoming too small.",
          "default": 0
        },
        "screenLength": {
          "type": "number",
          "description": "Maximal screen length of lift in points."
        }
      },
      "required": [
        "screenLength"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "verticalOffset",
            "code": {
              "verticalOffset": {
                "screenLength": 100,
                "maxWorldLength": 600,
                "minWorldLength": 10
              }
            }
          }
        ]
      }
    },
    "styleSymbolReference_schema.json": {
      "title": "StyleSymbolReference",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The StyleSymbolReference is used to reference a symbol from a portal styleItem",
      "properties": {
        "name": {
          "type": "string",
          "description": "Identifies a symbol in the style by name."
        },
        "styleName": {
          "type": "string",
          "description": "A registered web style name, such as `EsriThematicTreesStyle`"
        },
        "styleUrl": {
          "type": "string",
          "description": "URL to a style definition."
        },
        "type": {
          "type": "string",
          "description": "The type of the symbol",
          "enum": [
            "styleSymbolReference"
          ]
        }
      },
      "oneOf": [
        {
          "required": [
            "type",
            "name",
            "styleUrl"
          ]
        },
        {
          "required": [
            "type",
            "name",
            "styleName"
          ]
        }
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "code": {
              "symbol": {
                "type": "styleSymbolReference",
                "styleName": "EsriThematicTreesStyle",
                "name": "Frangula"
              }
            }
          }
        ]
      }
    },
    "rendererLegendOptions_schema.json": {
      "title": "Renderer Legend Options",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Options available for the renderer legend.",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title of the legend."
        }
      }
    },
    "visualVariable_schema.json": {
      "title": "visualVariable",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "An object used to set rendering options. Please see the individual visual variable for specific information on how it is used.",
      "oneOf": [
        {
          "$ref": "#/definitions/colorInfo_visualVariable_schema.json"
        },
        {
          "$ref": "#/definitions/rotationInfo_visualVariable_schema.json"
        },
        {
          "$ref": "#/definitions/sizeInfo_visualVariable_schema.json"
        },
        {
          "$ref": "#/definitions/transparencyInfo_visualVariable_schema.json"
        }
      ]
    },
    "colorInfo_visualVariable_schema.json": {
      "title": "ColorInfo Visual Variable",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The colorInfo visual variable defines how a continuous color ramp is applied to features based on the values of a numeric field attribute.",
      "properties": {
        "field": {
          "type": "string",
          "description": "Attribute field used for color rendering if no valueExpression is provided."
        },
        "legendOptions": {
          "type": "object",
          "$ref": "#/definitions/visualVariableLegendOptions_schema.json"
        },
        "normalizationField": {
          "type": "string",
          "description": "Attribute field used to normalize the data."
        },
        "stops": {
          "type": "array",
          "description": "An array of stop objects.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/colorStop_schema.json"
          }
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of visual variable.",
          "enum": [
            "colorInfo"
          ]
        },
        "valueExpression": {
          "type": "string",
          "description": "An [Arcade expression](https://developers.arcgis.com/arcade/) that computes a value in lieu of a value provided by an attribute `field`."
        },
        "valueExpressionTitle": {
          "type": "string",
          "description": "The title identifying and describing the associated [Arcade](https://developers.arcgis.com/arcade/) expression as defined in the `valueExpression` property."
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "colorInfo",
            "description": "Live sample web scene showing [use of the colorInfo visual variable](https://www.arcgis.com/home/webscene/viewer.html?webscene\u003ded2892fef34b43b8a5cc61c8ff890c6f).",
            "code": {
              "visualVariables": [
                {
                  "type": "colorInfo",
                  "field": "M086_07",
                  "stops": [
                    {
                      "value": -99,
                      "color": [
                        255,
                        252,
                        212,
                        255
                      ],
                      "label": "\u003c -99"
                    },
                    {
                      "value": 705950,
                      "color": [
                        177,
                        205,
                        194,
                        255
                      ]
                    },
                    {
                      "value": 1411999,
                      "color": [
                        98,
                        158,
                        176,
                        255
                      ],
                      "label": "1,411,999"
                    },
                    {
                      "value": 2578189,
                      "color": [
                        56,
                        98,
                        122,
                        255
                      ]
                    },
                    {
                      "value": 3744380,
                      "color": [
                        13,
                        38,
                        68,
                        255
                      ],
                      "label": "\u003e 3,744,380"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "visualVariableLegendOptions_schema.json": {
      "title": "Visual Variable Legend Options",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Options available for the legend for visual variables.",
      "properties": {
        "showLegend": {
          "type": "boolean",
          "description": "Indicates whether to show the color/size/opacity ramp in the legend."
        },
        "title": {
          "type": "string",
          "description": "The title of the legend."
        }
      }
    },
    "colorStop_schema.json": {
      "title": "colorStop",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "A colorStop object describes the renderer\u0027s color ramp with more specificity than just colors.",
      "properties": {
        "color": {
          "description": "A CSS color string or an array of rbga values. The color to place at the stop indicated by either a ratio or value.",
          "$ref": "#/definitions/color_schema.json"
        },
        "label": {
          "type": "string",
          "description": "Value if a label is needed on the legend for a stop."
        },
        "value": {
          "type": "number",
          "description": "The pixel intensity value. Describes the pixel intensity value that the color should be associated with. Just like in colorInfo, using value will ignore `maxPixelIntensity` and `minPixelIntensity` properties. It will actually set those properties to maximum and minimum values you set in the colorStops array. The hard values are converted to ratios to create the color gradient that is used in the heatmap calculations. Setting `minPixelIntensity` or `maxPixelIntensity`, after setting colorStops with values, removes the hard link between the color ramp and the pixel intensity values that were used to create it."
        }
      },
      "required": [
        "color",
        "value"
      ],
      "esriDocumentation": {
        "examples": [
          {
            "title": "colorStops",
            "code": {
              "stop": {
                "value": 8035,
                "color": [
                  255,
                  252,
                  212,
                  255
                ],
                "label": "\u003c 8,035"
              }
            }
          }
        ]
      }
    },
    "rotationInfo_visualVariable_schema.json": {
      "title": "RotationInfo Visual Variable",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The rotation visual variable defines how features rendered with marker symbols are rotated. The rotation value is determined by a value in a field or an Arcade expression calculating a value. Use either the `field` property or `valueExpression` when specifying rotation values.",
      "properties": {
        "axis": {
          "type": "string",
          "description": "Defines the rotation axis the visual variable should be applied to when rendering features with an ObjectSymbol3DLayer. [Detailed description](static/objectSymbolLayerOrientation.md).",
          "enum": [
            "heading",
            "tilt",
            "roll"
          ],
          "default": "heading"
        },
        "field": {
          "type": "string",
          "description": "Attribute field used for setting the rotation of a symbol if no `valueExpression` is provided."
        },
        "legendOptions": {
          "type": "object",
          "$ref": "#/definitions/visualVariableLegendOptions_schema.json"
        },
        "rotationType": {
          "type": "string",
          "description": "Defines the origin and direction of rotation depending on how the angle of rotation was measured. Possible values are `geographic` which rotates the symbol from the north in a clockwise direction and `arithmetic` which rotates the symbol from the east in a counter-clockwise direction.",
          "enum": [
            "geographic",
            "arithmetic"
          ],
          "default": "geographic"
        },
        "type": {
          "type": "string",
          "description": "A string value indicating the type of visual variable used for the renderer.",
          "enum": [
            "rotationInfo"
          ]
        },
        "valueExpression": {
          "type": "string",
          "description": "An [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to a number."
        },
        "valueExpressionTitle": {
          "type": "string",
          "description": "The title identifying and describing the associated [Arcade expression] (https://developers.arcgis.com/arcade/) as defined in the `valueExpression` property."
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "RotationInfo Visual Variable",
            "description": "Live sample web scene showing [use of the rotationInfo visual variable](https://www.arcgis.com/home/webscene/viewer.html?webscene\u003d30973f38dc5f4e019bf7f4926abd1571).",
            "code": {
              "visualVariables": [
                {
                  "type": "rotationInfo",
                  "rotationType": "geographic",
                  "field": "WIND_DIRECT"
                }
              ]
            }
          }
        ]
      }
    },
    "sizeInfo_visualVariable_schema.json": {
      "title": "SizeInfo Visual Variable",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The sizeInfo visual variable defines how size is applied to features based on the values of a numeric field attribute. The minimum and maximum values of the data should be indicated along with their respective size values. You must specify either `minSize` and `maxSize`, or `stops`, or `valueUnit` to construct the size ramp. All features with values falling in between the specified min and max data values (or stops) will be scaled proportionally between the provided min and max sizes.",
      "properties": {
        "axis": {
          "type": "string",
          "description": "Defines the axis the size visual variable should be applied to when rendering features with an ObjectSymbol3DLayer.",
          "enum": [
            "width",
            "height",
            "depth",
            "widthAndDepth",
            "all"
          ]
        },
        "field": {
          "type": "string",
          "description": "Attribute field used for size rendering if no valueExpression is provided."
        },
        "legendOptions": {
          "type": "object",
          "$ref": "#/definitions/visualVariableLegendOptions_schema.json"
        },
        "maxDataValue": {
          "type": "number",
          "description": "The maximum data value."
        },
        "maxSize": {
          "type": "number",
          "description": "Specifies the maximum size to be applied to the symbol. This is required if valueUnit is set to `unknown`."
        },
        "minDataValue": {
          "type": "number",
          "description": "The minimum data value."
        },
        "minSize": {
          "type": "number",
          "description": "Specifies the minimum size to be applied to the symbol. This is required if valueUnit is set to `unknown`."
        },
        "normalizationField": {
          "type": "string",
          "description": "Attribute field used to normalize the data."
        },
        "stops": {
          "type": "array",
          "description": "An array of objects that defines the thematic size ramp in a sequence of data or expression stops. At least two stops are required. The stops must be listed in ascending order based on the value of the `value` property in each stop. This property is required if `minDataValue`, `maxDataValue`, `minSize`, and `maxSize` are not defined.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/sizeStop_schema.json"
          }
        },
        "target": {
          "type": "string",
          "description": "Only used when sizeInfo is used for polygon outlines.",
          "enum": [
            "outline"
          ]
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of visual variable.",
          "enum": [
            "sizeInfo"
          ]
        },
        "useSymbolValue": {
          "type": "boolean",
          "description": "When setting a size visual variable on a renderer using an ObjectSymbol3DLayer, this property indicates whether to apply the value defined by the height, width, or depth properties to the corresponding axis of this visual variable instead of proportionally scaling this axis\u0027 value after other axes."
        },
        "valueExpression": {
          "type": "string",
          "description": "An [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to a number."
        },
        "valueExpressionTitle": {
          "type": "string",
          "description": "The title identifying and describing the associated [Arcade](https://developers.arcgis.com/arcade/) expression as defined in the `valueExpression` property."
        },
        "valueRepresentation": {
          "type": "string",
          "description": "Specifies how to apply the data value when mapping real-world sizes. See table below for supported values.",
          "enum": [
            "radius",
            "diameter",
            "area",
            "width",
            "distance"
          ]
        },
        "valueUnit": {
          "type": "string",
          "description": "A string value indicating the unit of measurement. Defaults to `meters` if not set.",
          "enum": [
            "unknown",
            "inches",
            "feet",
            "yards",
            "miles",
            "nautical-miles",
            "millimeters",
            "centimeters",
            "decimeters",
            "meters",
            "kilometers",
            "decimal-degrees"
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "sizeInfo",
            "description": "Live sample web scene showing [use of the sizeInfo visual variable](https://www.arcgis.com/home/webscene/viewer.html?webscene\u003ded2892fef34b43b8a5cc61c8ff890c6f).",
            "code": {
              "visualVariables": [
                {
                  "type": "sizeInfo",
                  "field": "Deaths",
                  "axis": "all",
                  "minSize": 6,
                  "maxSize": 37,
                  "minDataValue": 2814,
                  "maxDataValue": 121179
                }
              ]
            }
          },
          {
            "title": "sizeInfo with stops",
            "code": {
              "visualVariables": [
                {
                  "type": "sizeInfo",
                  "field": "Deaths",
                  "stops": [
                    {
                      "value": 2814,
                      "size": 6
                    },
                    {
                      "value": 121179,
                      "size": 37
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "sizeStop_schema.json": {
      "title": "sizeStop",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "A `sizeStop` object describes the size of the symbol at various values of the expression.",
      "properties": {
        "size": {
          "type": "number",
          "description": "Specifies the marker size to use for the specified value."
        },
        "value": {
          "type": "number",
          "description": "The value to be mapped to a size."
        }
      },
      "required": [
        "size",
        "value"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "code": {
              "stop": {
                "value": 0,
                "size": 255
              }
            }
          }
        ]
      }
    },
    "transparencyInfo_visualVariable_schema.json": {
      "title": "TransparencyInfo Visual Variable",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The transparencyInfo visual variable defines the transparency, or opacity, of each feature\u0027s symbol based on a numeric attribute field value.",
      "properties": {
        "field": {
          "type": "string",
          "description": "Attribute field used for setting the transparency of a feature if no `valueExpression` is provided."
        },
        "legendOptions": {
          "type": "object",
          "$ref": "#/definitions/visualVariableLegendOptions_schema.json"
        },
        "normalizationField": {
          "type": "string",
          "description": "Attribute field used to normalize the data."
        },
        "stops": {
          "type": "array",
          "description": "An array of transparencyStop objects.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/transparencyStop_schema.json"
          }
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of visual variable.",
          "enum": [
            "transparencyInfo"
          ]
        },
        "valueExpression": {
          "type": "string",
          "description": "An [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to a number."
        },
        "valueExpressionTitle": {
          "type": "string",
          "description": "The title identifying and describing the associated [Arcade](https://developers.arcgis.com/arcade/) expression as defined in the `valueExpression` property."
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "transparencyInfo",
            "description": "Live sample web scene showing [use of the transparencyInfo visual variable](https://www.arcgis.com/home/webscene/viewer.html?webscene\u003d593dc1e98a1d447fb09b09d486355ef0).",
            "code": {
              "visualVariables": [
                {
                  "type": "transparencyInfo",
                  "field": "strength",
                  "stops": [
                    {
                      "value": 21,
                      "transparency": 60
                    },
                    {
                      "value": 39,
                      "transparency": 10
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "transparencyStop_schema.json": {
      "title": "transparencyStop",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The transparencyStop object defines the thematic opacity ramp in a sequence of stops. At least two stops are required. The stops must be listed in ascending order based on the value of the `value` property in each stop.",
      "properties": {
        "label": {
          "type": "string",
          "description": "A string value used to label the stop in the legend."
        },
        "transparency": {
          "type": "integer",
          "description": "A numeric transparancy value for a stop ranging from 0-100, where 0 is opaque and 100 is 100% transparent.",
          "minimum": 0,
          "maximum": 100
        },
        "value": {
          "type": "number",
          "description": "The pixel intensity value. Describes the pixel intensity value that the color should be associated with."
        }
      },
      "required": [
        "transparency",
        "value"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "code": {
              "stop": {
                "value": 0,
                "transparency": 50
              }
            }
          }
        ]
      }
    },
    "pointCloudRenderers_schema.json": {
      "title": "PointCloud Renderers",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Renderers for PointCloud Layers.",
      "oneOf": [
        {
          "$ref": "#/definitions/pointCloudClassBreaksRenderer_schema.json"
        },
        {
          "$ref": "#/definitions/pointCloudRGBRenderer_schema.json"
        },
        {
          "$ref": "#/definitions/pointCloudStretchRenderer_schema.json"
        },
        {
          "$ref": "#/definitions/pointCloudUniqueValueRenderer_schema.json"
        }
      ]
    },
    "pointCloudClassBreaksRenderer_schema.json": {
      "title": "PointCloud ClassBreaks Renderer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "PointCloudClassBreaksRenderer defines the color of each point in a PointCloudLayer based on the value of a numeric attribute. Colors are assigned based on classes or ranges of data. Each point is assigned a symbol based on the class break in which the value of the attribute falls.",
      "properties": {
        "colorClassBreakInfos": {
          "type": "array",
          "description": "Each element in the array is an object that provides information about a class break associated with the renderer.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/colorClassBreakInfo_schema.json"
          }
        },
        "colorModulation": {
          "$ref": "#/definitions/colorModulationInfo_schema.json"
        },
        "field": {
          "type": "string",
          "description": "  The name of the field that is used for the renderer."
        },
        "fieldTransformType": {
          "type": "string",
          "description": "A transform that is applied to the field value before evaluating the renderer.",
          "enum": [
            "none",
            "lowFourBit",
            "highFourBit",
            "absoluteValue",
            "moduloTen"
          ]
        },
        "legendOptions": {
          "type": "object",
          "description": "A legend containing one title, which is a string describing the renderer in the legend.",
          "$ref": "#/definitions/rendererLegendOptions_schema.json"
        },
        "pointSizeAlgorithm": {
          "$ref": "#/definitions/pointSizeAlgorithm_schema.json"
        },
        "pointsPerInch": {
          "type": "number",
          "description": "Number of point to draw per display inch."
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "pointCloudClassBreaksRenderer"
          ]
        }
      },
      "required": [
        "colorClassBreakInfos",
        "field",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "pointSizeAlgorithm",
            "description": "",
            "code": {
              "renderer": {
                "type": "pointCloudClassBreaksRenderer",
                "pointSizeAlgorithm": {
                  "type": "pointCloudSplatAlgorithm",
                  "scaleFactor": 1,
                  "minSize": 4
                },
                "pointsPerInch": 10,
                "field": "ELEVATION",
                "colorClassBreakInfos": [
                  {
                    "classMinValue": 0,
                    "classMaxValue": 422.87,
                    "label": "406.59 - 422.87",
                    "description": "",
                    "color": [
                      87,
                      0,
                      252
                    ]
                  },
                  {
                    "classMinValue": 422.87,
                    "classMaxValue": 438.81,
                    "label": "422.87 - 438.81",
                    "description": "",
                    "color": [
                      89,
                      168,
                      253
                    ]
                  },
                  {
                    "classMinValue": 438.81,
                    "classMaxValue": 466.8,
                    "label": "438.81 - 466.8",
                    "description": "",
                    "color": [
                      109,
                      253,
                      219
                    ]
                  },
                  {
                    "classMinValue": 466.8,
                    "classMaxValue": 507.05,
                    "label": "466.8 - 507.05",
                    "description": "",
                    "color": [
                      221,
                      254,
                      96
                    ]
                  },
                  {
                    "classMinValue": 507.05,
                    "classMaxValue": 593.73,
                    "label": "507.05 - 593.73",
                    "description": "",
                    "color": [
                      254,
                      185,
                      5
                    ]
                  }
                ]
              }
            }
          },
          {
            "description": "",
            "code": {
              "renderer": {
                "type": "pointCloudClassBreaksRenderer",
                "pointsPerInch": 10.0,
                "field": "",
                "colorClassBreakInfos": [
                  {
                    "classMinValue": 0,
                    "classMaxValue": 422.87,
                    "label": "406.59 - 422.87",
                    "description": "",
                    "color": [
                      87.0,
                      0.0,
                      252.0
                    ]
                  },
                  {
                    "classMinValue": 422.87,
                    "classMaxValue": 438.81,
                    "label": "422.87 - 438.81",
                    "description": "",
                    "color": [
                      89.0,
                      168.0,
                      253.0
                    ]
                  },
                  {
                    "classMinValue": 438.81,
                    "classMaxValue": 466.8,
                    "label": "438.81 - 466.8",
                    "description": "",
                    "color": [
                      109.0,
                      253.0,
                      219.0
                    ]
                  },
                  {
                    "classMinValue": 466.8,
                    "classMaxValue": 507.05,
                    "label": "466.8 - 507.05",
                    "description": "",
                    "color": [
                      221.0,
                      254.0,
                      96.0
                    ]
                  },
                  {
                    "classMinValue": 507.05,
                    "classMaxValue": 593.73,
                    "label": "507.05 - 593.73",
                    "description": "",
                    "color": [
                      254.0,
                      185.0,
                      5.0
                    ]
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "colorClassBreakInfo_schema.json": {
      "title": "colorClassBreakInfo",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The classBreaksInfo object provides information about the class breaks associated with the renderer.",
      "properties": {
        "classMaxValue": {
          "type": "number",
          "description": "A numeric value used to specify the maximum value for a break."
        },
        "classMinValue": {
          "type": "number",
          "description": "A numeric value used to specify discontinuous class breaks. If this value is null or is missing, the map server will calculate the minimum value based on the preceding class\u0027 maximum value."
        },
        "color": {
          "$ref": "#/definitions/color_schema.json"
        },
        "description": {
          "type": "string",
          "description": "String value used to describe the class."
        },
        "label": {
          "type": "string",
          "description": "String value used to label the class."
        }
      },
      "required": [
        "classMaxValue",
        "classMinValue",
        "color"
      ],
      "additionalProperties": false
    },
    "colorModulationInfo_schema.json": {
      "title": "colorModulationInfo",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Indicates whether modulation should be used to render the point.",
      "properties": {
        "field": {
          "type": "string",
          "description": "the attribute to use as a source for the modulation amplitude"
        },
        "maxValue": {
          "type": "number",
          "description": "maximum value to compute modulation linear mapping"
        },
        "minValue": {
          "type": "number",
          "description": "minimum value to compute modulation linear mapping"
        }
      },
      "required": [
        "field",
        "maxValue",
        "minValue"
      ],
      "additionalProperties": false
    },
    "pointSizeAlgorithm_schema.json": {
      "title": "PointCloud Size Algorithm",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Size algorithms for point cloud performance.",
      "oneOf": [
        {
          "$ref": "#/definitions/pointCloudFixedSizeAlgorithm_schema.json"
        },
        {
          "$ref": "#/definitions/pointCloudSplatAlgorithm_schema.json"
        }
      ]
    },
    "pointCloudFixedSizeAlgorithm_schema.json": {
      "title": "PointCloud FixedSize Algorithm",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Render points with fixed real world or screen space size.",
      "properties": {
        "size": {
          "type": "number",
          "description": "Symbol size in real world units or display unit"
        },
        "type": {
          "type": "string",
          "enum": [
            "pointCloudFixedSizeAlgorithm"
          ]
        },
        "useRealWorldSymbolSizes": {
          "type": "boolean",
          "description": " If true symbol size is in meters, display unit (pt) otherwise"
        }
      },
      "required": [
        "size",
        "type"
      ],
      "additionalProperties": false
    },
    "pointCloudSplatAlgorithm_schema.json": {
      "title": "PointCloud Splat Algorithm",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Render points using sizes depending on point density.",
      "properties": {
        "minSize": {
          "type": "number",
          "description": "Minimum display space point size in points"
        },
        "scaleFactor": {
          "type": "number",
          "description": "Scale factor to applied to the computed point size (in real world)"
        },
        "type": {
          "type": "string",
          "enum": [
            "pointCloudSplatAlgorithm"
          ]
        }
      },
      "required": [
        "scaleFactor",
        "type"
      ],
      "additionalProperties": false
    },
    "pointCloudRGBRenderer_schema.json": {
      "title": "PointCloud RGB Renderer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "PointCloudRGBRenderer defines the color of each point in a PointCloudLayer based on the value of a color attribute.",
      "properties": {
        "colorModulation": {
          "description": "",
          "$ref": "#/definitions/colorModulationInfo_schema.json"
        },
        "field": {
          "type": "string",
          "description": "The name of the field that is used for the renderer."
        },
        "fieldTransformType": {
          "type": "string",
          "description": "A transform that is applied to the field value before evaluating the renderer.",
          "enum": [
            "none",
            "lowFourBit",
            "highFourBit",
            "absoluteValue",
            "moduloTen"
          ]
        },
        "pointSizeAlgorithm": {
          "description": "",
          "$ref": "#/definitions/pointSizeAlgorithm_schema.json"
        },
        "pointsPerInch": {
          "type": "number",
          "description": "Number of point to draw per display inch."
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "pointCloudRGBRenderer"
          ]
        }
      },
      "required": [
        "field",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "pointCloudRGBRenderer",
            "description": "",
            "code": {
              "renderer": {
                "type": "pointCloudRGBRenderer",
                "field": "RGB",
                "pointsPerInch": 10
              }
            }
          }
        ]
      }
    },
    "pointCloudStretchRenderer_schema.json": {
      "title": "PointCloud Stretch Renderer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "PointCloudStretchRenderer defines the color of each point in a PointCloudLayer based on the value of a numeric attribute. They allow you to easily map continuous color ramps to minimum and maximum data values of one of the layer\u0027s numeric attribute fields.",
      "properties": {
        "colorModulation": {
          "description": "",
          "$ref": "#/definitions/colorModulationInfo_schema.json"
        },
        "field": {
          "type": "string",
          "description": "The name of the field that is used for the renderer."
        },
        "fieldTransformType": {
          "type": "string",
          "description": "A transform that is applied to the field value before evaluating the renderer.",
          "enum": [
            "none",
            "lowFourBit",
            "highFourBit",
            "absoluteValue",
            "moduloTen"
          ]
        },
        "legendOptions": {
          "type": "object",
          "description": "A legend containing one title, which is a string describing the renderer in the legend.",
          "$ref": "#/definitions/rendererLegendOptions_schema.json"
        },
        "pointSizeAlgorithm": {
          "description": "",
          "$ref": "#/definitions/pointSizeAlgorithm_schema.json"
        },
        "pointsPerInch": {
          "type": "number",
          "description": "Number of points to draw per display inch."
        },
        "stops": {
          "type": "array",
          "description": "An array of color value pairs.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/colorStop_schema.json"
          }
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "pointCloudStretchRenderer"
          ]
        }
      },
      "required": [
        "field",
        "stops",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "pointCloudStretchRenderer",
            "description": "",
            "code": {
              "renderer": {
                "type": "pointCloudStretchRenderer",
                "pointSizeAlgorithm": {
                  "type": "pointCloudSplatAlgorithm",
                  "scaleFactor": 1,
                  "minSize": 4
                },
                "pointsPerInch": 10,
                "field": "Elevation",
                "stops": [
                  {
                    "value": 406.59,
                    "color": [
                      87,
                      0,
                      252,
                      255
                    ]
                  },
                  {
                    "value": 468.96999999999997,
                    "color": [
                      13,
                      253,
                      255,
                      255
                    ]
                  },
                  {
                    "value": 531.35,
                    "color": [
                      242,
                      254,
                      23,
                      255
                    ]
                  },
                  {
                    "value": 593.73,
                    "color": [
                      254,
                      21,
                      0,
                      255
                    ]
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "pointCloudUniqueValueRenderer_schema.json": {
      "title": "PointCloud UniqueValue Renderer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "PointCloudUniqueValueRenderer allows you to colorize points in a PointCloudLayer based on an attribute. This is done by using unique colors to represent points with equal attribute values.",
      "properties": {
        "colorModulation": {
          "description": "",
          "$ref": "#/definitions/colorModulationInfo_schema.json"
        },
        "colorUniqueValueInfos": {
          "type": "array",
          "description": "Unique value infos.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/colorUniqueValueInfo_schema.json"
          }
        },
        "field": {
          "type": "string",
          "description": "The name of the field that is used for the renderer."
        },
        "fieldTransformType": {
          "type": "string",
          "description": "A transform that is applied to the field value before evaluating the renderer.",
          "enum": [
            "none",
            "lowFourBit",
            "highFourBit",
            "absoluteValue",
            "moduloTen"
          ]
        },
        "legendOptions": {
          "type": "object",
          "description": "A legend containing one title, which is a string describing the renderer in the legend.",
          "$ref": "#/definitions/rendererLegendOptions_schema.json"
        },
        "pointSizeAlgorithm": {
          "description": "",
          "$ref": "#/definitions/pointSizeAlgorithm_schema.json"
        },
        "pointsPerInch": {
          "type": "number",
          "description": "Number of points to draw per display inch."
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "pointCloudUniqueValueRenderer"
          ]
        }
      },
      "required": [
        "colorUniqueValueInfos",
        "field",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "pointCloudUniqueValueRenderer",
            "description": "",
            "code": {
              "renderer": {
                "type": "pointCloudUniqueValueRenderer",
                "pointSizeAlgorithm": {
                  "type": "pointCloudFixedSizeAlgorithm",
                  "useRealWorldSymbolSizes": false,
                  "size": 4
                },
                "pointsPerInch": 10.0,
                "field": "CLASS_CODE",
                "colorUniqueValueInfos": [
                  {
                    "values": [
                      "1"
                    ],
                    "label": "1",
                    "description": "Unassigned",
                    "color": [
                      79,
                      112,
                      181
                    ]
                  },
                  {
                    "values": [
                      "2"
                    ],
                    "label": "2",
                    "description": "Ground",
                    "color": [
                      170,
                      183,
                      189
                    ]
                  },
                  {
                    "values": [
                      "3"
                    ],
                    "label": "3",
                    "description": "Low vegetation",
                    "color": [
                      247,
                      255,
                      188
                    ]
                  },
                  {
                    "values": [
                      "4"
                    ],
                    "label": "4",
                    "description": "Medium vegetation",
                    "color": [
                      241,
                      159,
                      106
                    ]
                  },
                  {
                    "values": [
                      "5"
                    ],
                    "label": "5",
                    "description": "High vegetation",
                    "color": [
                      211,
                      26,
                      18
                    ]
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "colorUniqueValueInfo_schema.json": {
      "title": "colorUniqueValueInfo",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "The colorUniqueValueInfo object matches a unique value with a specific color.",
      "properties": {
        "color": {
          "$ref": "#/definitions/color_schema.json"
        },
        "description": {
          "type": "string",
          "description": "String value used to describe the class."
        },
        "label": {
          "type": "string",
          "description": "String value used to label the class."
        },
        "values": {
          "type": "array",
          "description": "List of string or number values used to classifiy points.",
          "items": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          }
        }
      },
      "required": [
        "color",
        "values"
      ],
      "additionalProperties": false
    },
    "rasterRenderers_schema.json": {
      "title": "Raster Renderers",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Renderers for Raster Layers.",
      "oneOf": [
        {
          "$ref": "#/definitions/rasterClassBreaksRenderer_schema.json"
        },
        {
          "$ref": "#/definitions/rasterStretchRenderer_schema.json"
        },
        {
          "$ref": "#/definitions/rasterUniqueValueRenderer_schema.json"
        }
      ]
    },
    "rasterClassBreaksRenderer_schema.json": {
      "title": "Raster ClassBreaks Renderer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Defines the color of each raster cell based on the value of a numeric attribute. Colors are assigned based on classed ranges of data.",
      "properties": {
        "authoringInfo": {
          "type": "object",
          "description": "An object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific overridable settings so that next time it is accessed via the UI, their selections are remembered. Non-authoring clients can ignore it.",
          "$ref": "#/definitions/authoringInfo_schema.json"
        },
        "colorClassBreakInfos": {
          "type": "array",
          "description": "Each element in the array is an object that provides information about a class break associated with the renderer.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/colorClassBreakInfo_schema.json"
          }
        },
        "defaultColor": {
          "description": "The defaultColor on the renderer that get assigned to features with no value or features that do not fall within the configured data.",
          "$ref": "#/definitions/color_schema.json"
        },
        "defaultLabel": {
          "type": "string",
          "description": "Default label for the default symbol used to draw unspecified values."
        },
        "field": {
          "type": "string",
          "description": "The name of the field that is used for the renderer."
        },
        "legendOptions": {
          "type": "object",
          "description": "A legend containing one title, which is a string describing the renderer in the legend.",
          "$ref": "#/definitions/rendererLegendOptions_schema.json"
        },
        "normalizationField": {
          "type": "string",
          "description": "Used when normalizationType is field. The string value indicating the attribute field by which the data value is normalized."
        },
        "normalizationTotal": {
          "type": "number",
          "description": "Used when normalizationType is percent-of-total, this number property contains the total of all data values."
        },
        "normalizationType": {
          "type": "string",
          "description": "Determine how the data was normalized.",
          "enum": [
            "esriNormalizeByField",
            "esriNormalizeByLog",
            "esriNormalizeByPercentOfTotal"
          ]
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "rasterClassBreaksRenderer"
          ]
        }
      },
      "required": [
        "colorClassBreakInfos",
        "field",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "rasterClassBreaksRenderer",
            "code": {
              "renderer": {
                "type": "rasterClassBreaksRenderer",
                "field": "Value",
                "colorClassBreakInfos": [
                  {
                    "classMinValue": 11,
                    "classMaxValue": 27.8,
                    "label": "11 - 27.8",
                    "color": [
                      245,
                      245,
                      19,
                      255
                    ]
                  },
                  {
                    "classMinValue": 27.8,
                    "classMaxValue": 44.6,
                    "label": "27.6 - 44.6",
                    "color": [
                      250,
                      201,
                      18,
                      255
                    ]
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "rasterStretchRenderer_schema.json": {
      "title": "Raster Stretch Renderer",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Displays continuous raster cell values across a gradual ramp of colors. Use this renderer to draw a single band of continuous data. This renderer works well when you have a large range of values to display, such as with imagery or scientific data.",
      "properties": {
        "colorRamp": {
          "type": "object",
          "$ref": "#/definitions/colorRamp_schema.json"
        },
        "computeGamma": {
          "type": "boolean",
          "description": "Indicates if gamma values should be computed by default."
        },
        "dra": {
          "type": "boolean",
          "description": "Indicates if Dynamic Range Adjustment should be applied."
        },
        "gamma": {
          "type": "array",
          "description": "The list of Gamma value(s).",
          "items": {
            "type": "number"
          }
        },
        "max": {
          "type": "number",
          "description": "The current maximum output value."
        },
        "maxPercent": {
          "type": "number",
          "description": "The current maximum percent value."
        },
        "min": {
          "type": "number",
          "description": "The current minimum output value."
        },
        "minPercent": {
          "type": "number",
          "description": "The current minimum percent value."
        },
        "numberOfStandardDeviations": {
          "type": "integer",
          "description": "The number of standard deviations for standard deviation stretch."
        },
        "sigmoidStrengthLevel": {
          "type": "number",
          "description": "Set this from (1 to 6) to adjust the curvature of Sigmoid curve used in color stretch."
        },
        "statistics": {
          "type": "array",
          "description": "The custom raster stretch statistics.",
          "items": {
            "type": "array",
            "items": {
              "type": "number",
              "minItems": 4,
              "maxItems": 4
            }
          }
        },
        "stretchType": {
          "type": "string",
          "description": "The stretch types for stretch raster function.",
          "enum": [
            "none",
            "standardDeviation",
            "histogramEqualization",
            "minMax",
            "percentClip",
            "sigmoid"
          ]
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "rasterStretch"
          ]
        },
        "useGamma": {
          "type": "boolean",
          "description": "Indicates if the renderer applies Gamma stretch."
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "additionalInformation": "For each `stretchType` there are specific sets of requirements that are as follows: \u003cbr\u003e`none`: does not require other parameters.\u003cbr\u003e`standardDeviation`: requires numberOfStandardDeviations, statistics, or dra.\u003cbr\u003e`histogramEqualization`: requires the source dataset to have histograms or additional dra.\u003cbr\u003e`minMax`: requires statistics or dra.\u003cbr\u003e`percentClip`: requires minPercent, maxPercent, and dra.\u003cbr\u003e`sigmoid`: does not require other parameters. Optionally, set the sigmoidStrengthLevel (1 to 6) to adjust the curvature of Sigmoid curve used in color stretch.",
        "examples": [
          {
            "code": {
              "renderer": {
                "type": "rasterStretch",
                "stretchType": "minMax",
                "statistics": [
                  [
                    -6.621397972106934,
                    337.17144775390625,
                    10.955521397698623,
                    20.044026002479463
                  ]
                ],
                "dra": false,
                "useGamma": true,
                "gamma": [
                  1
                ],
                "computeGamma": false
              }
            }
          }
        ]
      }
    },
    "rasterUniqueValueRenderer_schema.json": {
      "title": "Raster UniqueValue Renderer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Defines the color of each raster cell based on an attribute. This is done by using unique colors to represent cells with equal attribute values.",
      "properties": {
        "authoringInfo": {
          "type": "object",
          "description": "An object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific overridable settings so that next time it is accessed via the UI, their selections are remembered. Non-authoring clients can ignore it.",
          "$ref": "#/definitions/authoringInfo_schema.json"
        },
        "colorUniqueValueInfos": {
          "type": "array",
          "description": "Unique value infos.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/colorUniqueValueInfo_schema.json"
          }
        },
        "defaultColor": {
          "description": "The defaultColor on the renderer that get assigned to features with no value or features that do not fall within the configured data.",
          "$ref": "#/definitions/color_schema.json"
        },
        "defaultLabel": {
          "type": "string",
          "description": "Default label for the default symbol used to draw unspecified values."
        },
        "field": {
          "type": "string",
          "description": "The name of the field that is used for the renderer."
        },
        "legendOptions": {
          "type": "object",
          "description": "A legend containing one title, which is a string describing the renderer in the legend.",
          "$ref": "#/definitions/rendererLegendOptions_schema.json"
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "rasterUniqueValueRenderer"
          ]
        }
      },
      "required": [
        "colorUniqueValueInfos",
        "field",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "rasterUniqueValueRenderer",
            "code": {
              "renderer": {
                "type": "rasterUniqueValueRenderer",
                "field": "ClassName",
                "colorUniqueValueInfos": [
                  {
                    "values": [
                      "Open Water"
                    ],
                    "label": "Open Water",
                    "description": "Open Water",
                    "color": [
                      71,
                      107,
                      161,
                      255
                    ]
                  },
                  {
                    "values": [
                      "Perennial Snow/Ice"
                    ],
                    "label": "Perennial Snow/Ice",
                    "description": "Perennial Snow/Ice",
                    "color": [
                      209,
                      222,
                      250,
                      255
                    ]
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "simpleRenderer_schema.json": {
      "title": "Simple Renderer",
      "type": "object",
      "description": "A simple renderer is a renderer that uses one symbol only.",
      "properties": {
        "authoringInfo": {
          "type": "object",
          "description": "An object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific overridable settings so that next time it is accessed via the UI, their selections are remembered. Non-authoring clients can ignore it.",
          "$ref": "#/definitions/authoringInfo_schema.json"
        },
        "description": {
          "type": "string",
          "description": "Description of the renderer."
        },
        "label": {
          "type": "string",
          "description": "The text string that is displayed in the table of contents."
        },
        "symbol": {
          "type": "object",
          "description": "An object that represents how all features will be drawn.",
          "$ref": "#/definitions/symbol3D_schema.json"
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "simple"
          ]
        },
        "visualVariables": {
          "type": "array",
          "description": "An array of objects used to set rendering properties.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/visualVariable_schema.json"
          }
        }
      },
      "required": [
        "symbol",
        "type"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "Simple Renderer",
            "description": "",
            "code": {
              "renderer": {
                "type": "simple",
                "symbol": {
                  "type": "PointSymbol3D",
                  "symbolLayers": [
                    {
                      "type": "Icon",
                      "resource": {
                        "primitive": "circle"
                      },
                      "material": {
                        "color": [
                          255,
                          255,
                          255
                        ]
                      },
                      "size": 12
                    }
                  ]
                }
              }
            }
          }
        ]
      }
    },
    "uniqueValueFromStyleRenderer_schema.json": {
      "title": "UniqueValueFromStyle Renderer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "This is a special version of UniqueValue Renderer, which loads uniqueValue infos from a style definition.",
      "properties": {
        "defaultLabel": {
          "type": "string",
          "description": "Default string for the default symbol used to draw unspecified values."
        },
        "defaultSymbol": {
          "description": "The defaultSymbol on the renderer that get assigned to features with no value or features that do not fall within the configured data.",
          "$ref": "#/definitions/symbol3D_schema.json"
        },
        "field1": {
          "type": "string",
          "description": "String value specifying the first field used to render matching values."
        },
        "styleName": {
          "type": "string",
          "description": "A registered web style name. Can not be used in conjunction with styleUrl."
        },
        "styleUrl": {
          "type": "string",
          "description": "URL that points to the web style definition. Can not be used in conjunction with styleName.",
          "format": "uri"
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "uniqueValue"
          ]
        },
        "visualVariables": {
          "type": "array",
          "description": "An array of visualVariable objects used for continuous color or size, simple, and unique values with feature opacity.",
          "items": {
            "$ref": "#/definitions/visualVariable_schema.json"
          }
        }
      },
      "oneOf": [
        {
          "required": [
            "type",
            "styleName"
          ]
        },
        {
          "required": [
            "type",
            "styleUrl"
          ]
        }
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "UniqueValueFromStyle Renderer",
            "code": {
              "renderer": {
                "type": "uniqueValue",
                "styleName": "EsriRealisticTreesStyle",
                "field1": "genus",
                "visualVariables": [
                  {
                    "type": "sizeInfo",
                    "field": "height",
                    "axis": "height",
                    "valueUnit": "feet"
                  },
                  {
                    "type": "sizeInfo",
                    "field": "diameter",
                    "axis": "widthAndDepth",
                    "valueUnit": "feet"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "uniqueValueRenderer_schema.json": {
      "title": "UniqueValue Renderer",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "A unique value renderer symbolizes based on the value of an attribute.",
      "properties": {
        "authoringInfo": {
          "type": "object",
          "description": "An object containing metadata about the authoring process for creating a renderer object. This allows the authoring clients to save specific overridable settings so that next time it is accessed via the UI, their selections are remembered. Non-authoring clients can ignore it.",
          "$ref": "#/definitions/authoringInfo_schema.json"
        },
        "backgroundFillSymbol": {
          "type": "object",
          "description": "Used for polygon features. It can only be used for bivariate types and size rendering.",
          "$ref": "#/definitions/polygonSymbol3D_schema.json"
        },
        "defaultLabel": {
          "type": "string",
          "description": "Default label for the default symbol used to draw unspecified values."
        },
        "defaultSymbol": {
          "description": "The defaultSymbol on the renderer that get assigned to features with no value or features that do not fall within the configured data.",
          "$ref": "#/definitions/symbol3D_schema.json"
        },
        "field1": {
          "type": "string",
          "description": "Attribute field renderer uses to match values."
        },
        "field2": {
          "type": "string",
          "description": "If needed, specify an additional attribute field the renderer uses to match values."
        },
        "field3": {
          "type": "string",
          "description": "If needed, specify an additional attribute field the renderer uses to match values."
        },
        "fieldDelimiter": {
          "type": "string",
          "description": "String inserted between the values if multiple attribute fields are specified.",
          "default": ", "
        },
        "legendOptions": {
          "type": "object",
          "description": "A legend containing one title, which is a string describing the renderer in the legend.",
          "$ref": "#/definitions/rendererLegendOptions_schema.json"
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of renderer used.",
          "enum": [
            "uniqueValue"
          ]
        },
        "uniqueValueInfos": {
          "type": "array",
          "description": "An array of uniqueValueInfo objects.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/uniqueValueInfo_schema.json"
          }
        },
        "valueExpression": {
          "type": "string",
          "description": "An [Arcade expression](https://developers.arcgis.com/arcade/) evaluating to either a string or a number."
        },
        "valueExpressionTitle": {
          "type": "string",
          "description": "The title identifying and describing the associated [Arcade](https://developers.arcgis.com/arcade/) expression as defined in the `valueExpression` property."
        },
        "visualVariables": {
          "type": "array",
          "description": "An array of objects used to set rendering properties.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/visualVariable_schema.json"
          }
        }
      },
      "required": [
        "type",
        "uniqueValueInfos"
      ],
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "UniqueValue",
            "description": "",
            "code": {
              "renderer": {
                "type": "uniqueValue",
                "field1": "COUNTRY",
                "uniqueValueInfos": [
                  {
                    "value": "US",
                    "label": "US",
                    "symbol": {
                      "type": "PointSymbol3D",
                      "symbolLayers": [
                        {
                          "type": "Icon",
                          "resource": {
                            "primitive": "circle"
                          },
                          "material": {
                            "color": [
                              253,
                              127,
                              111
                            ]
                          },
                          "size": 12
                        }
                      ]
                    }
                  },
                  {
                    "value": "Canada",
                    "label": "Canada",
                    "symbol": {
                      "type": "PointSymbol3D",
                      "symbolLayers": [
                        {
                          "type": "Icon",
                          "resource": {
                            "primitive": "circle"
                          },
                          "material": {
                            "color": [
                              126,
                              176,
                              213
                            ]
                          },
                          "size": 12
                        }
                      ]
                    }
                  },
                  {
                    "value": "Brazil",
                    "label": "Brazil",
                    "symbol": {
                      "type": "PointSymbol3D",
                      "symbolLayers": [
                        {
                          "type": "Icon",
                          "resource": {
                            "primitive": "circle"
                          },
                          "material": {
                            "color": [
                              178,
                              224,
                              97
                            ]
                          },
                          "size": 12
                        }
                      ]
                    }
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "uniqueValueInfo_schema.json": {
      "title": "uniqueValueInfo",
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "description": "Info item for the Unique Value Renderer. Its symbol gets selected if the feature\u0027s field matches its value.",
      "properties": {
        "description": {
          "type": "string",
          "description": "String value used to describe the drawn symbol."
        },
        "label": {
          "type": "string",
          "description": "String value used to label the drawn symbol."
        },
        "symbol": {
          "type": "object",
          "description": "An object used to display the value.",
          "$ref": "#/definitions/symbol3D_schema.json"
        },
        "value": {
          "type": "string",
          "description": "String value indicating the unique value."
        }
      },
      "additionalProperties": false,
      "esriDocumentation": {
        "examples": [
          {
            "title": "uniqueValueInfo",
            "code": {
              "uniqueValueInfo": {
                "value": "Pacific",
                "label": "Pacific region",
                "description": "The Pacific region description",
                "symbol": {
                  "type": "PointSymbol3D",
                  "symbolLayers": [
                    {
                      "type": "Icon",
                      "resource": {
                        "primitive": "circle"
                      },
                      "material": {
                        "color": [
                          255,
                          255,
                          255
                        ]
                      },
                      "size": 12
                    }
                  ]
                }
              }
            }
          }
        ]
      }
    }
  }
}