{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "id": "http://github.com/boutiques/boutiques-schema",
  "type": "object",
  "title": "Tool",
  "properties": {
    "name": {
      "minLength": 1,
      "description": "Tool name.",
      "type": "string"
    },
    "tool-version": {
      "minLength": 1,
      "description": "Tool version.",
      "type": "string"
    },
    "description": {
      "minLength": 1,
      "description": "Tool description.",
      "type": "string"
    },
    "command-line": {
      "minLength": 1,
      "description": "A string that describes the tool command line, where input and output values are identified by \"keys\". At runtime, command-line keys are substituted with flags and values.",
      "type": "string"
    },
    "container-image": {
      "type": "object",
      "allOf": [
        {
          "properties": {
            "working-directory": {
              "minLength": 1,
              "description": "Location from which this task must be launched within the container.",
              "type": "string"
            },
            "container-hash": {
              "minLength": 1,
              "description": "Hash for the given container.",
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "properties": {
                "type": {
                  "enum": [
                    "docker"
                  ]
                },
                "image": {
                  "minLength": 1,
                  "description": "Name of an image where the tool is installed and configured. Example: docker.io/neurodebian.",
                  "type": "string"
                },
                "index": {
                  "minLength": 1,
                  "description": "Index where the image is available.",
                  "default": "http://index.docker.io",
                  "type": "string"
                },
                "working-directory": {},
                "container-hash": {}
              },
              "required": [
                "type",
                "image"
              ],
              "additionalProperties": false,
              "description": "Object representing a docker container for the tool."
            },
            {
              "properties": {
                "type": {
                  "enum": [
                    "rootfs",
                    "singularity"
                  ]
                },
                "url": {
                  "minLength": 1,
                  "description": "URL where the image is available.",
                  "type": "string"
                },
                "working-directory": {},
                "container-hash": {}
              },
              "required": [
                "type",
                "url"
              ],
              "additionalProperties": false,
              "description": "Object representing a rootfs or singularity container for the tool."
            }
          ]
        }
      ]
    },
    "schema-version": {
      "type": "string",
      "description": "Version of the schema used.",
      "enum": [
        "0.4"
      ]
    },
    "walltime-estimate": {
      "type": "number",
      "description": "Estimated wall time of a task in seconds.",
      "minLength": 1
    },
    "environment-variables": {
      "type": "array",
      "description": "An array of key-value pairs specifying environment variable names and their values to be used in the execution environment.",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "description": "The environment variable name (identifier) containing only alphanumeric characters and underscores. Example: \"PROGRAM_PATH\".",
            "type": "string",
            "pattern": "^[a-z,A-Z][0-9,_,a-z,A-Z]*$"
          },
          "value": {
            "description": "The value of the environment variable.",
            "type": "string"
          },
          "description": {
            "description": "Description of the environment variable.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "additionalProperties": false
      }
    },
    "groups": {
      "description": "Sets of identifiers of inputs, each specifying an input group.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "minLength": 1,
            "description": "A short, unique, informative identifier containing only alphanumeric characters and underscores. Typically used to generate variable names. Example: \"outfile_group\".",
            "type": "string",
            "pattern": "^[0-9,_,a-z,A-Z]*$"
          },
          "name": {
            "minLength": 1,
            "description": "A human-readable name for the input group.",
            "type": "string"
          },
          "description": {
            "description": "Description of the input group.",
            "type": "string"
          },
          "members": {
            "description": "IDs of the inputs belonging to this group.",
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[0-9,_,a-z,A-Z]*$"
            }
          },
          "mutually-exclusive": {
            "description": "True if only one input in the group may be active at runtime.",
            "type": "boolean"
          },
          "one-is-required": {
            "description": "True if at least one of the inputs in the group must be active at runtime.",
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "id",
          "members"
        ],
        "additionalProperties": false
      }
    },
    "inputs": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "minLength": 1,
            "description": "A short, unique, informative identifier containing only alphanumeric characters and underscores. Typically used to generate variable names. Example: \"data_file\".",
            "type": "string",
            "pattern": "^[0-9,_,a-z,A-Z]*$"
          },
          "name": {
            "minLength": 1,
            "description": "A human-readable input name. Example: \u0027Data file\u0027.",
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "Input type.",
            "enum": [
              "String",
              "File",
              "Flag",
              "Number"
            ]
          },
          "description": {
            "description": "Input description.",
            "type": "string"
          },
          "value-key": {
            "description": "A string contained in command-line, substituted by the input value and/or flag at runtime.",
            "type": "string"
          },
          "list": {
            "description": "True if input is a list of value. An input of type \"Flag\" cannot be a list.",
            "type": "boolean"
          },
          "optional": {
            "description": "True if input is optional.",
            "type": "boolean"
          },
          "command-line-flag": {
            "description": "Option flag of the input, involved in the value-key substitution. Inputs of type \"Flag\" have to have a command-line flag. Examples: -v, --force.",
            "type": "string"
          },
          "requires-inputs": {
            "description": "Ids of the inputs which must be active for this input to be available.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "disables-inputs": {
            "description": "Ids of the inputs that are disabled when this input is active.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "command-line-flag-separator": {
            "description": "Separator used between flags and their arguments. Defaults to a single space.",
            "type": "string"
          },
          "default-value": {
            "description": "Default value of the input, used by the tool when no option is specified."
          },
          "value-choices": {
            "description": "Permitted choices for input value. May not be used with the Flag type.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          "integer": {
            "description": "Specify whether the input should be an integer. May only be used with Number type inputs.",
            "type": "boolean"
          },
          "minimum": {
            "description": "Specify the minimum value of the input (inclusive). May only be used with Number type inputs.",
            "type": "number"
          },
          "maximum": {
            "description": "Specify the maximum value of the input (inclusive). May only be used with Number type inputs.",
            "type": "number"
          },
          "exclusive-minimum": {
            "description": "Specify whether the minimum is exclusive or not. May only be used with Number type inputs.",
            "type": "boolean"
          },
          "exclusive-maximum": {
            "description": "Specify whether the maximum is exclusive or not. May only be used with Number type inputs.",
            "type": "boolean"
          },
          "min-list-entries": {
            "description": "Specify the minimum number of entries in the list. May only be used with List type inputs.",
            "type": "number"
          },
          "max-list-entries": {
            "description": "Specify the maximum number of entries in the list. May only be used with List type inputs.",
            "type": "number"
          },
          "uses-absolute-path": {
            "description": "Specifies that this input must be given as an absolute path. Only specifiable for File type inputs.",
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "id",
          "type"
        ],
        "anyOf": [
          {
            "properties": {
              "type": {
                "enum": [
                  "Flag"
                ]
              },
              "list": {
                "enum": [
                  false
                ]
              }
            }
          },
          {
            "properties": {
              "type": {
                "enum": [
                  "String",
                  "File",
                  "Number"
                ]
              }
            }
          }
        ],
        "dependencies": {
          "command-line-flag-separator": [
            "command-line-flag"
          ],
          "min-list-entries": [
            "list"
          ],
          "max-list-entries": [
            "list"
          ],
          "value-choices": {
            "properties": {
              "type": {
                "enum": [
                  "String",
                  "Number"
                ]
              }
            }
          },
          "integer": {
            "properties": {
              "type": {
                "enum": [
                  "Number"
                ]
              }
            }
          },
          "minimum": {
            "properties": {
              "type": {
                "enum": [
                  "Number"
                ]
              }
            }
          },
          "maximum": {
            "properties": {
              "type": {
                "enum": [
                  "Number"
                ]
              }
            }
          },
          "exclusive-minimum": [
            "minimum"
          ],
          "exclusive-maximum": [
            "maximum"
          ],
          "uses-absolute-path": {
            "properties": {
              "type": {
                "enum": [
                  "File"
                ]
              }
            }
          }
        },
        "additionalProperties": false
      }
    },
    "output-files": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "minLength": 1,
            "description": "A short, unique, informative identifier containing only alphanumeric characters and underscores. Typically used to generate variable names. Example: \"data_file\"",
            "pattern": "^[0-9,_,a-z,A-Z]*$",
            "type": "string"
          },
          "name": {
            "description": "A human-readable output name. Example: \u0027Data file\u0027",
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "description": "Output description.",
            "type": "string"
          },
          "value-key": {
            "description": "A string contained in command-line, substituted by the output value and/or flag at runtime.",
            "type": "string"
          },
          "path-template": {
            "description": "Describes the output file path relatively to the execution directory. May contain input value keys. Example: \"results/[INPUT1]_brain.mnc\".",
            "minLength": 1,
            "type": "string"
          },
          "path-template-stripped-extensions": {
            "description": "List of file extensions that will be stripped from the input values before being substituted in the path template. Example: [\".nii\",\".nii.gz\"].",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "list": {
            "description": "True if output is a list of value.",
            "type": "boolean"
          },
          "optional": {
            "description": "True if output may not be produced by the tool.",
            "type": "boolean"
          },
          "command-line-flag": {
            "description": "Option flag of the output, involved in the value-key substitution. Examples: -o, --output",
            "type": "string"
          },
          "command-line-flag-separator": {
            "description": "Separator used between flags and their arguments. Defaults to a single space.",
            "type": "string"
          },
          "uses-absolute-path": {
            "description": "Specifies that this output filepath will be given as an absolute path.",
            "type": "boolean"
          },
          "file-template": {
            "description": "An array of strings that may contain value keys. Each item will be a line in the configuration file.",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "name",
          "path-template"
        ],
        "anyOf": [
          {
            "properties": {
              "file-template": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "string"
                }
              },
              "list": {
                "enum": [
                  false
                ]
              }
            }
          },
          {
            "properties": {
              "file-template": {
                "enum": [
                  false
                ]
              }
            }
          }
        ],
        "dependencies": {
          "command-line-flag-separator": [
            "command-line-flag"
          ]
        },
        "additionalProperties": false
      }
    },
    "invocation-schema": {
      "type": "object"
    },
    "custom": {
      "type": "object"
    }
  },
  "required": [
    "name",
    "description",
    "command-line",
    "schema-version",
    "inputs",
    "output-files",
    "tool-version"
  ],
  "additionalProperties": false
}