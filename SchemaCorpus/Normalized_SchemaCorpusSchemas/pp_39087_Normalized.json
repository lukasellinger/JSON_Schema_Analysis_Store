{
  "$schema": "http://json-schema.org/schema",
  "id": "https://github.com/empirefox/node-private-tools/blob/master/src/schemas/tools-loader.json#",
  "title": "tools-loader Config",
  "type": "object",
  "properties": {
    "$schema": {
      "type": "string"
    },
    "version": {
      "type": "string"
    },
    "tasks": {
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "#/definitions/arukas.json"
          },
          {
            "$ref": "#/definitions/city-mobile-sections.json"
          },
          {
            "$ref": "#/definitions/go-const-ts.json"
          },
          {
            "$ref": "#/definitions/go-tag-apis.json"
          },
          {
            "$ref": "#/definitions/json2ts.json"
          },
          {
            "$ref": "#/definitions/kuaidi100.json"
          },
          {
            "$ref": "#/definitions/svg-patterns.json"
          },
          {
            "$ref": "#/definitions/to-mpeg4.json"
          },
          {
            "$ref": "#/definitions/ts-trans.json"
          },
          {
            "$ref": "#/definitions/generic-tool.json"
          }
        ]
      }
    },
    "ajv": {
      "type": "object"
    },
    "additionRunners": {
      "description": "Addition RunnerWithSchema[].",
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  },
  "required": [
    "version",
    "tasks"
  ],
  "additionalProperties": false,
  "definitions": {
    "arukas.json": {
      "$schema": "http://json-schema.org/schema",
      "title": "arukas Config",
      "description": "Retrive attributes of arukas.",
      "type": "object",
      "properties": {
        "$schema": {
          "type": "string"
        },
        "$tool": {
          "type": "string",
          "description": "Must be set to arukas",
          "const": "arukas"
        },
        "token": {
          "description": "Can be set through ARUKAS_JSON_API_TOKEN env.",
          "type": "string"
        },
        "secret": {
          "description": "Can be set through ARUKAS_JSON_API_SECRET env.",
          "type": "string"
        },
        "attr": {
          "description": "Attribute name to fetch, only support host now.",
          "type": "string",
          "enum": [
            "host"
          ]
        }
      },
      "required": [
        "$tool",
        "attr"
      ],
      "additionalProperties": false
    },
    "city-mobile-sections.json": {
      "$schema": "http://json-schema.org/schema",
      "title": "city-mobile-sections Config",
      "description": "Generate phone number list",
      "type": "object",
      "properties": {
        "$schema": {
          "type": "string"
        },
        "$tool": {
          "type": "string",
          "description": "Must be set to city-mobile-sections",
          "const": "city-mobile-sections"
        },
        "column": {
          "description": "Column name.",
          "enum": [
            "province",
            "city"
          ]
        },
        "value": {
          "description": "Column value.",
          "type": "string"
        },
        "dist": {
          "description": "The output path (relative to the pwd).",
          "type": "string"
        },
        "driver": {
          "description": "Typeorm driver.",
          "type": "object",
          "properties": {
            "type": {
              "description": "Database type, sync with typeorm.DriverType",
              "type": "string",
              "enum": [
                "mysql",
                "postgres",
                "mariadb",
                "sqlite",
                "oracle",
                "mssql",
                "websql"
              ],
              "default": "postgres"
            },
            "host": {
              "description": "Database host",
              "type": "string",
              "default": "localhost"
            },
            "port": {
              "description": "Database port",
              "type": "integer",
              "default": 5432
            },
            "username": {
              "description": "Database username",
              "type": "string",
              "default": "postgres"
            },
            "password": {
              "description": "Database password",
              "type": "string",
              "default": "postgres"
            },
            "database": {
              "description": "Database name to connect to",
              "type": "string",
              "default": "phone"
            }
          },
          "default": {},
          "required": [
            "type",
            "host",
            "port",
            "username",
            "password",
            "database"
          ],
          "additionalProperties": false
        }
      },
      "required": [
        "$tool",
        "dist",
        "column",
        "value",
        "driver"
      ],
      "additionalProperties": false
    },
    "go-const-ts.json": {
      "$schema": "http://json-schema.org/schema",
      "title": "go-const-ts Config",
      "type": "object",
      "properties": {
        "$schema": {
          "type": "string"
        },
        "$tool": {
          "type": "string",
          "description": "Must be set to go-const-ts.",
          "const": "go-const-ts"
        },
        "src": {
          "description": "Input go files(Glob), expand with env first.",
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string",
            "preproccess": "env"
          }
        },
        "dist": {
          "description": "The output root path (relative to the pwd).",
          "type": "string"
        },
        "langs": {
          "description": "Langs to exrtact. Field name will be used if lang not set in go const.",
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string",
            "pattern": "^[a-z]{2}(-[A-Z]{2})?$"
          }
        },
        "includeTypes": {
          "description": "Include const types only, ignore others.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "excludeTypes": {
          "description": "Exclude const types.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "prettiesRoots": {
          "description": "Dirs that contains the translated jsons which will overwrite the go const types.",
          "type": "array",
          "items": {
            "type": "string",
            "preproccess": "env"
          }
        },
        "pretties": {
          "description": "Dirs that contains the translated jsons which will overwrite the go const types.",
          "type": "object",
          "patternProperties": {
            "^[a-z]{2}(-[A-Z]{2})?$": {
              "description": "Lang from langs.",
              "type": "object",
              "patternProperties": {
                "^[A-Z].*$": {
                  "description": "Struct translates filepath that will overwrite all other translates.",
                  "type": "string",
                  "preproccess": "env"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "pipePrefix": {
          "description": "Prefix to pipe name, pipe name is used as file name.",
          "type": "string",
          "default": ""
        }
      },
      "required": [
        "$tool",
        "src",
        "dist",
        "langs",
        "pipePrefix"
      ],
      "additionalProperties": false
    },
    "go-tag-apis.json": {
      "$schema": "http://json-schema.org/schema",
      "title": "go-tag-apis Config",
      "type": "object",
      "properties": {
        "$schema": {
          "type": "string"
        },
        "$tool": {
          "type": "string",
          "description": "Must be set to go-tag-apis.",
          "const": "go-tag-apis"
        },
        "src": {
          "description": "Input go files(Glob), expand with env first.",
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string",
            "preproccess": "env"
          }
        },
        "structs": {
          "description": "Go struct names to parse.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dist": {
          "description": "The output dir path (relative to the pwd).",
          "type": "string"
        }
      },
      "required": [
        "$tool",
        "src",
        "structs",
        "dist"
      ],
      "additionalProperties": false
    },
    "json2ts.json": {
      "$schema": "http://json-schema.org/schema",
      "title": "json2ts Config",
      "type": "object",
      "properties": {
        "$schema": {
          "type": "string"
        },
        "$tool": {
          "type": "string",
          "description": "Must be set to json2ts.",
          "const": "json2ts"
        },
        "src": {
          "description": "Input json files(Glob), relative to the pwd.",
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string"
          }
        },
        "dist": {
          "description": "The output file path (relative to the pwd), support .ts file.",
          "type": "string"
        }
      },
      "required": [
        "$tool",
        "src",
        "dist"
      ],
      "additionalProperties": false
    },
    "kuaidi100.json": {
      "$schema": "http://json-schema.org/schema",
      "title": "kuaidi100 Config",
      "type": "object",
      "properties": {
        "$schema": {
          "type": "string"
        },
        "$tool": {
          "type": "string",
          "description": "Must be set to kuaidi100.",
          "const": "kuaidi100"
        },
        "dist": {
          "description": "The output file path (relative to the pwd), support .ts .js .json.",
          "type": "string"
        },
        "url": {
          "description": "Target source of raw companys info.",
          "type": "string",
          "default": "https://gitcdn.xyz/repo/simman/Kuaidi100/master/companys.json"
        }
      },
      "required": [
        "$tool",
        "dist",
        "url"
      ],
      "additionalProperties": false
    },
    "svg-patterns.json": {
      "$schema": "http://json-schema.org/schema",
      "title": "svg-patterns Config",
      "type": "object",
      "properties": {
        "$schema": {
          "type": "string"
        },
        "$tool": {
          "type": "string",
          "description": "Must be set to svg-patterns.",
          "const": "svg-patterns"
        },
        "dist": {
          "description": "The output file path (relative to the pwd), support .ts .js .json.",
          "type": "string"
        },
        "url": {
          "description": "Target of raw Patterns-Gallery html page.",
          "type": "string",
          "default": "https://gitcdn.xyz/repo/progers/Patterns-Gallery/master/index.html"
        }
      },
      "required": [
        "$tool",
        "dist",
        "url"
      ],
      "additionalProperties": false
    },
    "to-mpeg4.json": {
      "$schema": "http://json-schema.org/schema",
      "title": "to-mpeg4 Config",
      "type": "object",
      "properties": {
        "$schema": {
          "type": "string"
        },
        "$tool": {
          "type": "string",
          "description": "Must be set to to-mpeg4.",
          "const": "to-mpeg4"
        },
        "src": {
          "description": "Input go files(Glob), expand with env first. ie ~/movie/non-mp4/\u0026#42;\u0026#42;/\u0026#42;.{mp4,mkv,avi,flv}",
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string",
            "preproccess": "env"
          }
        },
        "dist": {
          "description": "The output dir (relative to the pwd).",
          "type": "string"
        },
        "history": {
          "description": "The history dir (relative to the pwd).",
          "type": "string",
          "default": ".history/"
        },
        "outputOptions": {
          "description": "Ffmpeg output options, in k-v mode ie \u0027-vf scale\u003d640:360\u0027.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "$tool",
        "src",
        "dist",
        "history"
      ],
      "additionalProperties": false
    },
    "ts-trans.json": {
      "$schema": "http://json-schema.org/schema",
      "title": "ts-trans Config",
      "description": "Generate translate from ts interface.",
      "type": "object",
      "properties": {
        "$schema": {
          "type": "string"
        },
        "$tool": {
          "type": "string",
          "description": "Must be set to ts-trans.",
          "const": "ts-trans"
        },
        "src": {
          "description": "Input go files(Glob), expand with env first.",
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string",
            "preproccess": "env"
          }
        },
        "dist": {
          "description": "The output root path (relative to the pwd).",
          "type": "string"
        },
        "tag": {
          "description": "Field with this tag content will be parsed.",
          "type": "string",
          "default": "tr"
        },
        "langs": {
          "description": "Langs to exrtact. Field name will be used if lang not set.",
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string",
            "pattern": "^[a-z]{2}(-[A-Z]{2})?$"
          }
        },
        "pipePrefix": {
          "description": "Prefix to pipe name, pipe name is used as file name.",
          "type": "string",
          "default": ""
        }
      },
      "required": [
        "$tool",
        "src",
        "dist",
        "tag",
        "langs",
        "pipePrefix"
      ],
      "additionalProperties": false
    },
    "generic-tool.json": {
      "$schema": "http://json-schema.org/schema",
      "title": "generic-tool Config",
      "properties": {
        "$schema": {
          "type": "string"
        },
        "$tool": {
          "type": "string",
          "description": "Tool name to find the tool."
        }
      },
      "required": [
        "$tool"
      ]
    }
  }
}