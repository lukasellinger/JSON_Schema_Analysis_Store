{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Husky configuration.",
  "description": "Husky can prevent bad `git commit`, `git push` and more üê∂ woof!",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "$schema": {
      "type": "string"
    },
    "skipCI": {
      "title": "Skipping Git hooks installation.",
      "type": "boolean",
      "default": false
    },
    "hooks": {
      "title": "Git hooks.",
      "type": "object",
      "properties": {
        "applypatch-msg": {
          "$ref": "#/definitions/hook",
          "$comment": "https://git-scm.com/docs/githooks#_applypatch_msg",
          "description": "This hook is invoked by git-am. It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes git am to abort before applying the patch.\n\nThe hook is allowed to edit the message file in place, and can be used to normalize the message into some project standard format. It can also be used to refuse the commit after inspecting the message file.\n\nThe default applypatch-msg hook, when enabled, runs the commit-msg hook, if the latter is enabled.",
          "x-intellij-html-description": "\u003cp\u003eThis hook is invoked by \u003ca href\u003d\"https://git-scm.com/docs/git-am\"\u003egit-am\u003c/a\u003e. It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes \u003ccode\u003egit am\u003c/code\u003e to abort before applying the patch.\u003c/p\u003e\n\u003cp\u003eThe hook is allowed to edit the message file in place, and can be used to normalize the message into some project standard format. It can also be used to refuse the commit after inspecting the message file.\u003c/p\u003e\n\u003cp\u003eThe default \u003cem\u003eapplypatch-msg\u003c/em\u003e hook, when enabled, runs the \u003cem\u003ecommit-msg\u003c/em\u003e hook, if the latter is enabled.\u003c/p\u003e",
          "markdownDescription": "This hook is invoked by [git-am](https://git-scm.com/docs/git-am). It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes `git am` to abort before applying the patch.\n\nThe hook is allowed to edit the message file in place, and can be used to normalize the message into some project standard format. It can also be used to refuse the commit after inspecting the message file.\n\nThe default **applypatch-msg** hook, when enabled, runs the **commit-msg** hook, if the latter is enabled."
        },
        "pre-applypatch": {
          "$ref": "#/definitions/hook",
          "$comment": "https://git-scm.com/docs/githooks#_pre_applypatch",
          "description": "This hook is invoked by git-am. It takes no parameter, and is invoked after the patch is applied, but before a commit is made.\n\nIf it exits with non-zero status, then the working tree will not be committed after applying the patch.\n\nIt can be used to inspect the current working tree and refuse to make a commit if it does not pass certain test.\n\nThe default pre-applypatch hook, when enabled, runs the pre-commit hook, if the latter is enabled.",
          "x-intellij-html-description": "\u003cp\u003eThis hook is invoked by \u003ca href\u003d\"https://git-scm.com/docs/git-am\"\u003egit-am\u003c/a\u003e. It takes no parameter, and is invoked after the patch is applied, but before a commit is made.\u003c/p\u003e\n\u003cp\u003eIf it exits with non-zero status, then the working tree will not be committed after applying the patch.\u003c/p\u003e\n\u003cp\u003eIt can be used to inspect the current working tree and refuse to make a commit if it does not pass certain test.\u003c/p\u003e\n\u003cp\u003eThe default \u003cem\u003epre-applypatch\u003c/em\u003e hook, when enabled, runs the \u003cem\u003epre-commit\u003c/em\u003e hook, if the latter is enabled.\u003c/p\u003e",
          "markdownDescription": "This hook is invoked by [git-am](https://git-scm.com/docs/git-am). It takes no parameter, and is invoked after the patch is applied, but before a commit is made.\n\nIf it exits with non-zero status, then the working tree will not be committed after applying the patch.\n\nIt can be used to inspect the current working tree and refuse to make a commit if it does not pass certain test.\n\nThe default **pre-applypatch** hook, when enabled, runs the **pre-commit** hook, if the latter is enabled."
        },
        "post-applypatch": {
          "$ref": "#/definitions/hook",
          "$comment": "https://git-scm.com/docs/githooks#_post_applypatch",
          "description": "This hook is invoked by git-am. It takes no parameter, and is invoked after the patch is applied and a commit is made.\n\nThis hook is meant primarily for notification, and cannot affect the outcome of git am.",
          "x-intellij-html-description": "\u003cp\u003eThis hook is invoked by \u003ca href\u003d\"https://git-scm.com/docs/git-am\"\u003egit-am\u003c/a\u003e. It takes no parameter, and is invoked after the patch is applied and a commit is made.\u003c/p\u003e\n\u003cp\u003eThis hook is meant primarily for notification, and cannot affect the outcome of \u003ccode\u003egit am\u003c/code\u003e.\u003c/p\u003e",
          "markdownDescription": "This hook is invoked by [git-am](https://git-scm.com/docs/git-am). It takes no parameter, and is invoked after the patch is applied and a commit is made.\n\nThis hook is meant primarily for notification, and cannot affect the outcome of `git am`."
        },
        "pre-commit": {
          "$ref": "#/definitions/hook",
          "$comment": "https://git-scm.com/docs/githooks#_pre_commit",
          "description": "This hook is invoked by git-commit, and can be bypassed with the --no-verify option. It takes no parameters, and is invoked before obtaining the proposed commit log message and making a commit. Exiting with a non-zero status from this script causes the git commit command to abort before creating a commit.\n\nThe default pre-commit hook, when enabled, catches introduction of lines with trailing whitespaces and aborts the commit when such a line is found.\n\nAll the git commit hooks are invoked with the environment variable GIT_EDITOR\u003d: if the command will not bring up an editor to modify the commit message.\n\nThe default pre-commit hook, when enabled‚Äî‚Äãand with the hooks.allownonascii config option unset or set to false‚Äî‚Äãprevents the use of non-ASCII filenames.",
          "x-intellij-html-description": "\u003cp\u003eThis hook is invoked by \u003ca href\u003d\"https://git-scm.com/docs/git-commit\"\u003egit-commit\u003c/a\u003e, and can be bypassed with the \u003ccode\u003e--no-verify\u003c/code\u003e option. It takes no parameters, and is invoked before obtaining the proposed commit log message and making a commit. Exiting with a non-zero status from this script causes the \u003ccode\u003egit commit\u003c/code\u003e command to abort before creating a commit.\u003c/p\u003e\n\u003cp\u003eThe default \u003cem\u003epre-commit\u003c/em\u003e hook, when enabled, catches introduction of lines with trailing whitespaces and aborts the commit when such a line is found.\u003c/p\u003e\n\u003cp\u003eAll the \u003ccode\u003egit commit\u003c/code\u003e hooks are invoked with the environment variable \u003ccode\u003eGIT_EDITOR\u003d:\u003c/code\u003e if the command will not bring up an editor to modify the commit message.\u003c/p\u003e\n\u003cp\u003eThe default \u003cem\u003epre-commit\u003c/em\u003e hook, when enabled‚Äî‚Äãand with the \u003ccode\u003ehooks.allownonascii\u003c/code\u003e config option unset or set to false‚Äî‚Äãprevents the use of non-ASCII filenames.\u003c/p\u003e",
          "markdownDescription": "This hook is invoked by [git-commit](https://git-scm.com/docs/git-commit), and can be bypassed with the `--no-verify` option. It takes no parameters, and is invoked before obtaining the proposed commit log message and making a commit. Exiting with a non-zero status from this script causes the `git commit` command to abort before creating a commit.\n\nThe default **pre-commit** hook, when enabled, catches introduction of lines with trailing whitespaces and aborts the commit when such a line is found.\n\nAll the `git commit` hooks are invoked with the environment variable `GIT_EDITOR\u003d:` if the command will not bring up an editor to modify the commit message.\n\nThe default **pre-commit** hook, when enabled‚Äî‚Äãand with the `hooks.allownonascii` config option unset or set to false‚Äî‚Äãprevents the use of non-ASCII filenames."
        },
        "prepare-commit-msg": {
          "$ref": "#/definitions/hook",
          "$comment": "https://git-scm.com/docs/githooks#_prepare_commit_msg",
          "description": "This hook is invoked by git-commit right after preparing the default log message, and before the editor is started.\n\nIt takes one to three parameters. The first is the name of the file that contains the commit log message. The second is the source of the commit message, and can be: message (if a -m or -F option was given); template (if a -t option was given or the configuration option commit.template is set); merge (if the commit is a merge or a .git/MERGE_MSG file exists); squash (if a .git/SQUASH_MSG file exists); or commit, followed by a commit SHA-1 (if a -c, -C or --amend option was given).\n\nIf the exit status is non-zero, git commit will abort.\n\nThe purpose of the hook is to edit the message file in place, and it is not suppressed by the --no-verify option. A non-zero exit means a failure of the hook and aborts the commit. It should not be used as replacement for pre-commit hook.\n\nThe sample prepare-commit-msg hook that comes with Git removes the help message found in the commented portion of the commit template.",
          "x-intellij-html-description": "\u003cp\u003eThis hook is invoked by \u003ca href\u003d\"https://git-scm.com/docs/git-commit\"\u003egit-commit\u003c/a\u003e right after preparing the default log message, and before the editor is started.\u003c/p\u003e\n\u003cp\u003eIt takes one to three parameters. The first is the name of the file that contains the commit log message. The second is the source of the commit message, and can be: \u003ccode\u003emessage\u003c/code\u003e (if a \u003ccode\u003e-m\u003c/code\u003e or \u003ccode\u003e-F\u003c/code\u003e option was given); \u003ccode\u003etemplate\u003c/code\u003e (if a \u003ccode\u003e-t\u003c/code\u003e option was given or the configuration option \u003ccode\u003ecommit.template\u003c/code\u003e is set); \u003ccode\u003emerge\u003c/code\u003e (if the commit is a merge or a \u003ccode\u003e.git/MERGE_MSG\u003c/code\u003e file exists); \u003ccode\u003esquash\u003c/code\u003e (if a \u003ccode\u003e.git/SQUASH_MSG\u003c/code\u003e file exists); or \u003ccode\u003ecommit\u003c/code\u003e, followed by a commit SHA-1 (if a \u003ccode\u003e-c\u003c/code\u003e, \u003ccode\u003e-C\u003c/code\u003e or \u003ccode\u003e--amend\u003c/code\u003e option was given).\u003c/p\u003e\n\u003cp\u003eIf the exit status is non-zero, \u003ccode\u003egit commit\u003c/code\u003e will abort.\u003c/p\u003e\n\u003cp\u003eThe purpose of the hook is to edit the message file in place, and it is not suppressed by the \u003ccode\u003e--no-verify\u003c/code\u003e option. A non-zero exit means a failure of the hook and aborts the commit. It should not be used as replacement for pre-commit hook.\u003c/p\u003e\n\u003cp\u003eThe sample \u003ccode\u003eprepare-commit-msg\u003c/code\u003e hook that comes with Git removes the help message found in the commented portion of the commit template.\u003c/p\u003e",
          "markdownDescription": "This hook is invoked by [git-commit](https://git-scm.com/docs/git-commit) right after preparing the default log message, and before the editor is started.\n\nIt takes one to three parameters. The first is the name of the file that contains the commit log message. The second is the source of the commit message, and can be: `message` (if a `-m` or `-F` option was given); `template` (if a `-t` option was given or the configuration option `commit.template` is set); `merge` (if the commit is a merge or a `.git/MERGE_MSG` file exists); `squash` (if a `.git/SQUASH_MSG` file exists); or `commit`, followed by a commit SHA-1 (if a `-c`, `-C` or `--amend` option was given).\n\nIf the exit status is non-zero, `git commit` will abort.\n\nThe purpose of the hook is to edit the message file in place, and it is not suppressed by the `--no-verify` option. A non-zero exit means a failure of the hook and aborts the commit. It should not be used as replacement for pre-commit hook.\n\nThe sample `prepare-commit-msg` hook that comes with Git removes the help message found in the commented portion of the commit template."
        },
        "commit-msg": {
          "$ref": "#/definitions/hook",
          "$comment": "https://git-scm.com/docs/githooks#_commit_msg",
          "description": "This hook is invoked by git-commit and git-merge, and can be bypassed with the --no-verify option. It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes the command to abort.\n\nThe hook is allowed to edit the message file in place, and can be used to normalize the message into some project standard format. It can also be used to refuse the commit after inspecting the message file.\n\nThe default commit-msg hook, when enabled, detects duplicate \"Signed-off-by\" lines, and aborts the commit if one is found.",
          "x-intellij-html-description": "\u003cp\u003eThis hook is invoked by \u003ca href\u003d\"https://git-scm.com/docs/git-commit\"\u003egit-commit\u003c/a\u003e and \u003ca href\u003d\"https://git-scm.com/docs/git-merge\"\u003egit-merge\u003c/a\u003e, and can be bypassed with the \u003ccode\u003e--no-verify\u003c/code\u003e option. It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes the command to abort.\u003c/p\u003e\n\u003cp\u003eThe hook is allowed to edit the message file in place, and can be used to normalize the message into some project standard format. It can also be used to refuse the commit after inspecting the message file.\u003c/p\u003e\n\u003cp\u003eThe default \u003cem\u003ecommit-msg\u003c/em\u003e hook, when enabled, detects duplicate \"Signed-off-by\" lines, and aborts the commit if one is found.\u003c/p\u003e",
          "markdownDescription": "This hook is invoked by [git-commit](https://git-scm.com/docs/git-commit) and [git-merge](https://git-scm.com/docs/git-merge), and can be bypassed with the `--no-verify` option. It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes the command to abort.\n\nThe hook is allowed to edit the message file in place, and can be used to normalize the message into some project standard format. It can also be used to refuse the commit after inspecting the message file.\n\nThe default **commit-msg** hook, when enabled, detects duplicate \"Signed-off-by\" lines, and aborts the commit if one is found."
        },
        "post-commit": {
          "$ref": "#/definitions/hook",
          "$comment": "https://git-scm.com/docs/githooks#_post_commit",
          "description": "This hook is invoked by git-commit. It takes no parameters, and is invoked after a commit is made.\n\nThis hook is meant primarily for notification, and cannot affect the outcome of git commit.",
          "x-intellij-html-description": "\u003cp\u003eThis hook is invoked by \u003ca href\u003d\"https://git-scm.com/docs/git-commit\"\u003egit-commit\u003c/a\u003e. It takes no parameters, and is invoked after a commit is made.\u003c/p\u003e\n\u003cp\u003eThis hook is meant primarily for notification, and cannot affect the outcome of \u003ccode\u003egit commit\u003c/code\u003e.\u003c/p\u003e",
          "markdownDescription": "This hook is invoked by [git-commit](https://git-scm.com/docs/git-commit). It takes no parameters, and is invoked after a commit is made.\n\nThis hook is meant primarily for notification, and cannot affect the outcome of `git commit`."
        },
        "pre-rebase": {
          "$ref": "#/definitions/hook",
          "$comment": "https://git-scm.com/docs/githooks#_pre_rebase",
          "description": "This hook is called by git-rebase and can be used to prevent a branch from getting rebased. The hook may be called with one or two parameters. The first parameter is the upstream from which the series was forked. The second parameter is the branch being rebased, and is not set when rebasing the current branch.",
          "x-intellij-html-description": "\u003cp\u003eThis hook is called by \u003ca href\u003d\"https://git-scm.com/docs/git-rebase\"\u003egit-rebase\u003c/a\u003e and can be used to prevent a branch from getting rebased. The hook may be called with one or two parameters. The first parameter is the upstream from which the series was forked. The second parameter is the branch being rebased, and is not set when rebasing the current branch.\u003c/p\u003e",
          "markdownDescription": "This hook is called by [git-rebase](https://git-scm.com/docs/git-rebase) and can be used to prevent a branch from getting rebased. The hook may be called with one or two parameters. The first parameter is the upstream from which the series was forked. The second parameter is the branch being rebased, and is not set when rebasing the current branch."
        },
        "post-checkout": {
          "$ref": "#/definitions/hook",
          "$comment": "https://git-scm.com/docs/githooks#_post_checkout",
          "description": "This hook is invoked when a git-checkout or git-switch is run after having updated the worktree. The hook is given three parameters: the ref of the previous HEAD, the ref of the new HEAD (which may or may not have changed), and a flag indicating whether the checkout was a branch checkout (changing branches, flag\u003d1) or a file checkout (retrieving a file from the index, flag\u003d0). This hook cannot affect the outcome of git switch or git checkout.\n\nIt is also run after git-clone, unless the --no-checkout (-n) option is used. The first parameter given to the hook is the null-ref, the second the ref of the new HEAD and the flag is always 1. Likewise for git worktree add unless --no-checkout is used.\n\nThis hook can be used to perform repository validity checks, auto-display differences from the previous HEAD if different, or set working dir metadata properties.",
          "x-intellij-html-description": "\u003cp\u003eThis hook is invoked when a \u003ca href\u003d\"https://git-scm.com/docs/git-checkout\"\u003egit-checkout\u003c/a\u003e or \u003ca href\u003d\"https://git-scm.com/docs/git-switch\"\u003egit-switch\u003c/a\u003e is run after having updated the worktree. The hook is given three parameters: the ref of the previous HEAD, the ref of the new HEAD (which may or may not have changed), and a flag indicating whether the checkout was a branch checkout (changing branches, flag\u003d1) or a file checkout (retrieving a file from the index, flag\u003d0). This hook cannot affect the outcome of \u003ccode\u003egit switch\u003c/code\u003e or \u003ccode\u003egit checkout\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIt is also run after \u003ca href\u003d\"https://git-scm.com/docs/git-clone\"\u003egit-clone\u003c/a\u003e, unless the \u003ccode\u003e--no-checkout\u003c/code\u003e (\u003ccode\u003e-n\u003c/code\u003e) option is used. The first parameter given to the hook is the null-ref, the second the ref of the new HEAD and the flag is always 1. Likewise for \u003ccode\u003egit worktree add\u003c/code\u003e unless \u003ccode\u003e--no-checkout\u003c/code\u003e is used.\u003c/p\u003e\n\u003cp\u003eThis hook can be used to perform repository validity checks, auto-display differences from the previous HEAD if different, or set working dir metadata properties.\u003c/p\u003e",
          "markdownDescription": "This hook is invoked when a [git-checkout](https://git-scm.com/docs/git-checkout) or [git-switch](https://git-scm.com/docs/git-switch) is run after having updated the worktree. The hook is given three parameters: the ref of the previous HEAD, the ref of the new HEAD (which may or may not have changed), and a flag indicating whether the checkout was a branch checkout (changing branches, flag\u003d1) or a file checkout (retrieving a file from the index, flag\u003d0). This hook cannot affect the outcome of `git switch` or `git checkout`.\n\nIt is also run after [git-clone](https://git-scm.com/docs/git-clone), unless the `--no-checkout` (`-n`) option is used. The first parameter given to the hook is the null-ref, the second the ref of the new HEAD and the flag is always 1. Likewise for `git worktree add` unless `--no-checkout` is used.\n\nThis hook can be used to perform repository validity checks, auto-display differences from the previous HEAD if different, or set working dir metadata properties."
        },
        "post-merge": {
          "$ref": "#/definitions/hook",
          "$comment": "https://git-scm.com/docs/githooks#_post_merge",
          "description": "This hook is invoked by git-merge, which happens when a git pull is done on a local repository. The hook takes a single parameter, a status flag specifying whether or not the merge being done was a squash merge. This hook cannot affect the outcome of git merge and is not executed, if the merge failed due to conflicts.\n\nThis hook can be used in conjunction with a corresponding pre-commit hook to save and restore any form of metadata associated with the working tree (e.g.: permissions/ownership, ACLS, etc). See contrib/hooks/setgitperms.perl for an example of how to do this.",
          "x-intellij-html-description": "\u003cp\u003eThis hook is invoked by \u003ca href\u003d\"https://git-scm.com/docs/git-merge\"\u003egit-merge\u003c/a\u003e, which happens when a \u003ccode\u003egit pull\u003c/code\u003e is done on a local repository. The hook takes a single parameter, a status flag specifying whether or not the merge being done was a squash merge. This hook cannot affect the outcome of \u003ccode\u003egit merge\u003c/code\u003e and is not executed, if the merge failed due to conflicts.\u003c/p\u003e\n\u003cp\u003eThis hook can be used in conjunction with a corresponding pre-commit hook to save and restore any form of metadata associated with the working tree (e.g.: permissions/ownership, ACLS, etc). See contrib/hooks/setgitperms.perl for an example of how to do this.\u003c/p\u003e",
          "markdownDescription": "This hook is invoked by [git-merge](https://git-scm.com/docs/git-merge), which happens when a `git pull` is done on a local repository. The hook takes a single parameter, a status flag specifying whether or not the merge being done was a squash merge. This hook cannot affect the outcome of `git merge` and is not executed, if the merge failed due to conflicts.\n\nThis hook can be used in conjunction with a corresponding pre-commit hook to save and restore any form of metadata associated with the working tree (e.g.: permissions/ownership, ACLS, etc). See contrib/hooks/setgitperms.perl for an example of how to do this."
        },
        "pre-push": {
          "$ref": "#/definitions/hook",
          "$comment": "https://git-scm.com/docs/githooks#_pre_push",
          "description": "This hook is called by git-push and can be used to prevent a push from taking place. The hook is called with two parameters which provide the name and location of the destination remote, if a named remote is not being used both values will be the same.\n\nInformation about what is to be pushed is provided on the hook‚Äôs standard input with lines of the form:\n\n\u003clocal ref\u003e SP \u003clocal sha1\u003e SP \u003cremote ref\u003e SP \u003cremote sha1\u003e LF\nFor instance, if the command git push origin master:foreign were run the hook would receive a line like the following:\n\nrefs/heads/master 67890 refs/heads/foreign 12345\nalthough the full, 40-character SHA-1s would be supplied. If the foreign ref does not yet exist the \u003cremote SHA-1\u003e will be 40 0. If a ref is to be deleted, the \u003clocal ref\u003e will be supplied as (delete) and the \u003clocal SHA-1\u003e will be 40 0. If the local commit was specified by something other than a name which could be expanded (such as HEAD~, or a SHA-1) it will be supplied as it was originally given.\n\nIf this hook exits with a non-zero status, git push will abort without pushing anything. Information about why the push is rejected may be sent to the user by writing to standard error.",
          "x-intellij-html-description": "\u003cp\u003eThis hook is called by \u003ca href\u003d\"https://git-scm.com/docs/git-push\"\u003egit-push\u003c/a\u003e and can be used to prevent a push from taking place. The hook is called with two parameters which provide the name and location of the destination remote, if a named remote is not being used both values will be the same.\u003c/p\u003e\n\u003cp\u003eInformation about what is to be pushed is provided on the hook‚Äôs standard input with lines of the form:\u003c/p\u003e\n\u003cpre\u003e\u0026lt;local ref\u0026gt; SP \u0026lt;local sha1\u0026gt; SP \u0026lt;remote ref\u0026gt; SP \u0026lt;remote sha1\u0026gt; LF\u003c/pre\u003e\n\u003cp\u003eFor instance, if the command \u003ccode\u003egit push origin master:foreign\u003c/code\u003e were run the hook would receive a line like the following:\u003c/p\u003e\n\u003cpre\u003erefs/heads/master 67890 refs/heads/foreign 12345\u003c/pre\u003e\n\u003cp\u003ealthough the full, 40-character SHA-1s would be supplied. If the foreign ref does not yet exist the \u003ccode\u003e\u0026lt;remote SHA-1\u0026gt;\u003c/code\u003e will be 40 \u003ccode\u003e0\u003c/code\u003e. If a ref is to be deleted, the \u003ccode\u003e\u0026lt;local ref\u0026gt;\u003c/code\u003e will be supplied as \u003ccode\u003e(delete)\u003c/code\u003e and the \u003ccode\u003e\u0026lt;local SHA-1\u0026gt;\u003c/code\u003e will be 40 \u003ccode\u003e0\u003c/code\u003e. If the local commit was specified by something other than a name which could be expanded (such as \u003ccode\u003eHEAD~\u003c/code\u003e, or a SHA-1) it will be supplied as it was originally given.\u003c/p\u003e\n\u003cp\u003eIf this hook exits with a non-zero status, \u003ccode\u003egit push\u003c/code\u003e will abort without pushing anything. Information about why the push is rejected may be sent to the user by writing to standard error.\u003c/p\u003e",
          "markdownDescription": "This hook is called by [git-push](https://git-scm.com/docs/git-push) and can be used to prevent a push from taking place. The hook is called with two parameters which provide the name and location of the destination remote, if a named remote is not being used both values will be the same.\n\nInformation about what is to be pushed is provided on the hook‚Äôs standard input with lines of the form:\n```\n\u003clocal ref\u003e SP \u003clocal sha1\u003e SP \u003cremote ref\u003e SP \u003cremote sha1\u003e LF\n```\nFor instance, if the command `git push origin master:foreign` were run the hook would receive a line like the following:\n```\nrefs/heads/master 67890 refs/heads/foreign 12345\n```\nalthough the full, 40-character SHA-1s would be supplied. If the foreign ref does not yet exist the `\u003cremote SHA-1\u003e` will be 40 `0`. If a ref is to be deleted, the `\u003clocal ref\u003e` will be supplied as `(delete)` and the `\u003clocal SHA-1\u003e` will be 40 `0`. If the local commit was specified by something other than a name which could be expanded (such as `HEAD~`, or a SHA-1) it will be supplied as it was originally given.\n\nIf this hook exits with a non-zero status, `git push` will abort without pushing anything. Information about why the push is rejected may be sent to the user by writing to standard error."
        },
        "post-update": {
          "$ref": "#/definitions/hook",
          "$comment": "https://git-scm.com/docs/githooks#_post_update",
          "description": "This hook is invoked by git-receive-pack when it reacts to git push and updates reference(s) in its repository. It executes on the remote repository once after all the refs have been updated.\n\nIt takes a variable number of parameters, each of which is the name of ref that was actually updated.\n\nThis hook is meant primarily for notification, and cannot affect the outcome of git receive-pack.\n\nThe post-update hook can tell what are the heads that were pushed, but it does not know what their original and updated values are, so it is a poor place to do log old..new. The post-receive hook does get both original and updated values of the refs. You might consider it instead if you need them.\n\nWhen enabled, the default post-update hook runs git update-server-info to keep the information used by dumb transports (e.g., HTTP) up to date. If you are publishing a Git repository that is accessible via HTTP, you should probably enable this hook.\n\nBoth standard output and standard error output are forwarded to git send-pack on the other end, so you can simply echo messages for the user.",
          "x-intellij-html-description": "\u003cp\u003eThis hook is invoked by \u003ca href\u003d\"https://git-scm.com/docs/git-receive-pack\"\u003egit-receive-pack\u003c/a\u003e when it reacts to \u003ccode\u003egit push\u003c/code\u003e and updates reference(s) in its repository. It executes on the remote repository once after all the refs have been updated.\u003c/p\u003e\n\u003cp\u003eIt takes a variable number of parameters, each of which is the name of ref that was actually updated.\u003c/p\u003e\n\u003cp\u003eThis hook is meant primarily for notification, and cannot affect the outcome of \u003ccode\u003egit receive-pack\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003epost-update\u003c/em\u003e hook can tell what are the heads that were pushed, but it does not know what their original and updated values are, so it is a poor place to do log old..new. The \u003ca href\u003d\"https://git-scm.com/docs/githooks#post-receive\"\u003e\u003cem\u003epost-receive\u003c/em\u003e\u003c/a\u003e hook does get both original and updated values of the refs. You might consider it instead if you need them.\u003c/p\u003e\n\u003cp\u003eWhen enabled, the default \u003cem\u003epost-update\u003c/em\u003e hook runs \u003ccode\u003egit update-server-info\u003c/code\u003e to keep the information used by dumb transports (e.g., HTTP) up to date. If you are publishing a Git repository that is accessible via HTTP, you should probably enable this hook.\u003c/p\u003e\n\u003cp\u003eBoth standard output and standard error output are forwarded to \u003ccode\u003egit send-pack\u003c/code\u003e on the other end, so you can simply \u003ccode\u003eecho\u003c/code\u003e messages for the user.\u003c/p\u003e",
          "markdownDescription": "This hook is invoked by [git-receive-pack](https://git-scm.com/docs/git-receive-pack) when it reacts to `git push` and updates reference(s) in its repository. It executes on the remote repository once after all the refs have been updated.\n\nIt takes a variable number of parameters, each of which is the name of ref that was actually updated.\n\nThis hook is meant primarily for notification, and cannot affect the outcome of `git receive-pack`.\n\nThe **post-update** hook can tell what are the heads that were pushed, but it does not know what their original and updated values are, so it is a poor place to do log old..new. The **post-receive** hook does get both original and updated values of the refs. You might consider it instead if you need them.\n\nWhen enabled, the default **post-update** hook runs `git update-server-info` to keep the information used by dumb transports (e.g., HTTP) up to date. If you are publishing a Git repository that is accessible via HTTP, you should probably enable this hook.\n\nBoth standard output and standard error output are forwarded to `git send-pack` on the other end, so you can simply `echo` messages for the user."
        },
        "push-to-checkout": {
          "$ref": "#/definitions/hook",
          "$comment": "https://git-scm.com/docs/githooks#_push_to_checkout",
          "description": "This hook is invoked by git-receive-pack when it reacts to git push and updates reference(s) in its repository, and when the push tries to update the branch that is currently checked out and the receive.denyCurrentBranch configuration variable is set to updateInstead. Such a push by default is refused if the working tree and the index of the remote repository has any difference from the currently checked out commit; when both the working tree and the index match the current commit, they are updated to match the newly pushed tip of the branch. This hook is to be used to override the default behaviour.\n\nThe hook receives the commit with which the tip of the current branch is going to be updated. It can exit with a non-zero status to refuse the push (when it does so, it must not modify the index or the working tree). Or it can make any necessary changes to the working tree and to the index to bring them to the desired state when the tip of the current branch is updated to the new commit, and exit with a zero status.\n\nFor example, the hook can simply run git read-tree -u -m HEAD \"$1\" in order to emulate git fetch that is run in the reverse direction with git push, as the two-tree form of git read-tree -u -m is essentially the same as git switch or git checkout that switches branches while keeping the local changes in the working tree that do not interfere with the difference between the branches.",
          "x-intellij-html-description": "\u003cp\u003eThis hook is invoked by \u003ca href\u003d\"https://git-scm.com/docs/git-receive-pack\"\u003egit-receive-pack\u003c/a\u003e when it reacts to \u003ccode\u003egit push\u003c/code\u003e and updates reference(s) in its repository, and when the push tries to update the branch that is currently checked out and the \u003ccode\u003ereceive.denyCurrentBranch\u003c/code\u003e configuration variable is set to \u003ccode\u003eupdateInstead\u003c/code\u003e. Such a push by default is refused if the working tree and the index of the remote repository has any difference from the currently checked out commit; when both the working tree and the index match the current commit, they are updated to match the newly pushed tip of the branch. This hook is to be used to override the default behaviour.\u003c/p\u003e\n\u003cp\u003eThe hook receives the commit with which the tip of the current branch is going to be updated. It can exit with a non-zero status to refuse the push (when it does so, it must not modify the index or the working tree). Or it can make any necessary changes to the working tree and to the index to bring them to the desired state when the tip of the current branch is updated to the new commit, and exit with a zero status.\u003c/p\u003e\n\u003cp\u003eFor example, the hook can simply run \u003ccode\u003egit read-tree -u -m HEAD \"$1\"\u003c/code\u003e in order to emulate \u003ccode\u003egit fetch\u003c/code\u003e that is run in the reverse direction with \u003ccode\u003egit push\u003c/code\u003e, as the two-tree form of \u003ccode\u003egit read-tree -u -m\u003c/code\u003e is essentially the same as \u003ccode\u003egit switch\u003c/code\u003e or \u003ccode\u003egit checkout\u003c/code\u003e that switches branches while keeping the local changes in the working tree that do not interfere with the difference between the branches.\u003c/p\u003e",
          "markdownDescription": "This hook is invoked by [git-receive-pack](https://git-scm.com/docs/git-receive-pack) when it reacts to `git push` and updates reference(s) in its repository, and when the push tries to update the branch that is currently checked out and the `receive.denyCurrentBranch` configuration variable is set to `updateInstead`. Such a push by default is refused if the working tree and the index of the remote repository has any difference from the currently checked out commit; when both the working tree and the index match the current commit, they are updated to match the newly pushed tip of the branch. This hook is to be used to override the default behaviour.\n\nThe hook receives the commit with which the tip of the current branch is going to be updated. It can exit with a non-zero status to refuse the push (when it does so, it must not modify the index or the working tree). Or it can make any necessary changes to the working tree and to the index to bring them to the desired state when the tip of the current branch is updated to the new commit, and exit with a zero status.\n\nFor example, the hook can simply run `git read-tree -u -m HEAD \"$1\"` in order to emulate `git fetch` that is run in the reverse direction with `git push`, as the two-tree form of `git read-tree -u -m` is essentially the same as `git switch` or `git checkout` that switches branches while keeping the local changes in the working tree that do not interfere with the difference between the branches."
        },
        "pre-auto-gc": {
          "$ref": "#/definitions/hook",
          "$comment": "https://git-scm.com/docs/githooks#_pre_auto_gc",
          "description": "This hook is invoked by git gc --auto (see git-gc). It takes no parameter, and exiting with non-zero status from this script causes the git gc --auto to abort.",
          "x-intellij-html-description": "\u003cp\u003eThis hook is invoked by \u003ccode\u003egit gc --auto\u003c/code\u003e (see \u003ca href\u003d\"https://git-scm.com/docs/git-gc\"\u003egit-gc\u003c/a\u003e). It takes no parameter, and exiting with non-zero status from this script causes the \u003ccode\u003egit gc --auto\u003c/code\u003e to abort.\u003c/p\u003e",
          "markdownDescription": "This hook is invoked by `git gc --auto` (see [git-gc](https://git-scm.com/docs/git-gc)). It takes no parameter, and exiting with non-zero status from this script causes the `git gc --auto` to abort."
        },
        "post-rewrite": {
          "$ref": "#/definitions/hook",
          "$comment": "https://git-scm.com/docs/githooks#_post_rewrite",
          "description": "This hook is invoked by commands that rewrite commits (git-commit when called with --amend and git-rebase; however, full-history (re)writing tools like git-fast-import or git-filter-repo typically do not call it!). Its first argument denotes the command it was invoked by: currently one of amend or rebase. Further command-dependent arguments may be passed in the future.\n\nThe hook receives a list of the rewritten commits on stdin, in the format\n\n\u003cold-sha1\u003e SP \u003cnew-sha1\u003e [ SP \u003cextra-info\u003e ] LF\nThe extra-info is again command-dependent. If it is empty, the preceding SP is also omitted. Currently, no commands pass any extra-info.\n\nThe hook always runs after the automatic note copying (see \"notes.rewrite.\u003ccommand\u003e\" in git-config) has happened, and thus has access to these notes.\n\nThe following command-specific comments apply:\n\nrebase\nFor the squash and fixup operation, all commits that were squashed are listed as being rewritten to the squashed commit. This means that there will be several lines sharing the same new-sha1.\n\nThe commits are guaranteed to be listed in the order that they were processed by rebase.",
          "x-intellij-html-description": "\u003cp\u003eThis hook is invoked by commands that rewrite commits (\u003ca href\u003d\"https://git-scm.com/docs/git-commit\"\u003egit-commit\u003c/a\u003e when called with \u003ccode\u003e--amend\u003c/code\u003e and \u003ca href\u003d\"https://git-scm.com/docs/git-rebase\"\u003egit-rebase\u003c/a\u003e; however, full-history (re)writing tools like \u003ca href\u003d\"https://git-scm.com/docs/git-fast-import\"\u003egit-fast-import\u003c/a\u003e or \u003ca href\u003d\"https://github.com/newren/git-filter-repo\"\u003egit-filter-repo\u003c/a\u003e typically do not call it!). Its first argument denotes the command it was invoked by: currently one of \u003ccode\u003eamend\u003c/code\u003e or \u003ccode\u003erebase\u003c/code\u003e. Further command-dependent arguments may be passed in the future.\u003c/p\u003e\n\u003cp\u003eThe hook receives a list of the rewritten commits on stdin, in the format\u003c/p\u003e\n\u003cpre\u003e\u0026lt;old-sha1\u0026gt; SP \u0026lt;new-sha1\u0026gt; [ SP \u0026lt;extra-info\u0026gt; ] LF\u003c/pre\u003e\n\u003cp\u003eThe \u003cem\u003eextra-info\u003c/em\u003e is again command-dependent. If it is empty, the preceding SP is also omitted. Currently, no commands pass any \u003cem\u003eextra-info\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eThe hook always runs after the automatic note copying (see \"notes.rewrite.\u0026lt;command\u0026gt;\" in \u003ca href\u003d\"https://git-scm.com/docs/git-config\"\u003egit-config\u003c/a\u003e) has happened, and thus has access to these notes.\u003c/p\u003e\n\u003cp\u003eThe following command-specific comments apply:\u003c/p\u003e\n\u003cdl\u003e\n    \u003cdt\u003erebase\u003c/dt\u003e\n    \u003cdd\u003e\n        \u003cp\u003eFor the \u003cem\u003esquash\u003c/em\u003e and \u003cem\u003efixup\u003c/em\u003e operation, all commits that were squashed are listed as being rewritten to the squashed commit. This means that there will be several lines sharing the same \u003cem\u003enew-sha1\u003c/em\u003e.\u003c/p\u003e\n        \u003cp\u003eThe commits are guaranteed to be listed in the order that they were processed by rebase.\u003c/p\u003e\n    \u003c/dd\u003e\n\u003c/dl\u003e",
          "markdownDescription": "This hook is invoked by commands that rewrite commits ([git-commit](https://git-scm.com/docs/git-commit) when called with `--amend` and [git-rebase](https://git-scm.com/docs/git-rebase); however, full-history (re)writing tools like [git-fast-import](https://git-scm.com/docs/git-fast-import) or [git-filter-repo](https://github.com/newren/git-filter-repo) typically do not call it!). Its first argument denotes the command it was invoked by: currently one of `amend` or `rebase`. Further command-dependent arguments may be passed in the future.\n\nThe hook receives a list of the rewritten commits on stdin, in the format\n```\n\u003cold-sha1\u003e SP \u003cnew-sha1\u003e [ SP \u003cextra-info\u003e ] LF\n```\nThe **extra-info** is again command-dependent. If it is empty, the preceding SP is also omitted. Currently, no commands pass any **extra-info**.\n\nThe hook always runs after the automatic note copying (see \"notes.rewrite.\\\u003ccommand\\\u003e\" in [git-config](https://git-scm.com/docs/git-config)) has happened, and thus has access to these notes.\n\nThe following command-specific comments apply:\n\n**rebase**  \nFor the **squash** and **fixup** operation, all commits that were squashed are listed as being rewritten to the squashed commit. This means that there will be several lines sharing the same **new-sha1**.  \nThe commits are guaranteed to be listed in the order that they were processed by rebase."
        },
        "sendemail-validate": {
          "$ref": "#/definitions/hook",
          "$comment": "https://git-scm.com/docs/githooks#_sendemail_validate",
          "description": "This hook is invoked by git-send-email. It takes a single parameter, the name of the file that holds the e-mail to be sent. Exiting with a non-zero status causes git send-email to abort before sending any e-mails.",
          "x-intellij-html-description": "\u003cp\u003eThis hook is invoked by \u003ca href\u003d\"https://git-scm.com/docs/git-send-email\"\u003egit-send-email\u003c/a\u003e. It takes a single parameter, the name of the file that holds the e-mail to be sent. Exiting with a non-zero status causes \u003ccode\u003egit send-email\u003c/code\u003e to abort before sending any e-mails.\u003c/p\u003e",
          "markdownDescription": "This hook is invoked by [git-send-email](https://git-scm.com/docs/git-send-email). It takes a single parameter, the name of the file that holds the e-mail to be sent. Exiting with a non-zero status causes `git send-email` to abort before sending any e-mails."
        },
        "fsmonitor-watchman": {
          "$ref": "#/definitions/hook",
          "$comment": "https://git-scm.com/docs/githooks#_fsmonitor_watchman",
          "description": "This hook is invoked when the configuration option core.fsmonitor is set to .git/hooks/fsmonitor-watchman. It takes two arguments, a version (currently 1) and the time in elapsed nanoseconds since midnight, January 1, 1970.\n\nThe hook should output to stdout the list of all files in the working directory that may have changed since the requested time. The logic should be inclusive so that it does not miss any potential changes. The paths should be relative to the root of the working directory and be separated by a single NUL.\n\nIt is OK to include files which have not actually changed. All changes including newly-created and deleted files should be included. When files are renamed, both the old and the new name should be included.\n\nGit will limit what files it checks for changes as well as which directories are checked for untracked files based on the path names given.\n\nAn optimized way to tell git \"all files have changed\" is to return the filename /.\n\nThe exit status determines whether git will use the data from the hook to limit its search. On error, it will fall back to verifying all files and folders.",
          "x-intellij-html-description": "\u003cp\u003eThis hook is invoked when the configuration option \u003ccode\u003ecore.fsmonitor\u003c/code\u003e is set to \u003ccode\u003e.git/hooks/fsmonitor-watchman\u003c/code\u003e or \u003ccode\u003e.git/hooks/fsmonitor-watchmanv2\u003c/code\u003e depending on the version of the hook to use.\u003c/p\u003e\n\u003cp\u003eVersion 1 takes two arguments, a version (1) and the time in elapsed nanoseconds since midnight, January 1, 1970.\u003c/p\u003e\n\u003cp\u003eVersion 2 takes two arguments, a version (2) and a token that is used for identifying changes since the token. For watchman this would be a clock id. This version must output to stdout the new token followed by a NUL before the list of files.\u003c/p\u003e\n\u003cp\u003eThe hook should output to stdout the list of all files in the working directory that may have changed since the requested time. The logic should be inclusive so that it does not miss any potential changes. The paths should be relative to the root of the working directory and be separated by a single NUL.\u003c/p\u003e\n\u003cp\u003eIt is OK to include files which have not actually changed. All changes including newly-created and deleted files should be included. When files are renamed, both the old and the new name should be included.\u003c/p\u003e\n\u003cp\u003eGit will limit what files it checks for changes as well as which directories are checked for untracked files based on the path names given.\u003c/p\u003e\n\u003cp\u003eAn optimized way to tell git \"all files have changed\" is to return the filename \u003ccode\u003e/\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe exit status determines whether git will use the data from the hook to limit its search. On error, it will fall back to verifying all files and folders.\u003c/p\u003e",
          "markdownDescription": "This hook is invoked when the configuration option `core.fsmonitor` is set to `.git/hooks/fsmonitor-watchman`. It takes two arguments, a version (currently 1) and the time in elapsed nanoseconds since midnight, January 1, 1970.\n\nThe hook should output to stdout the list of all files in the working directory that may have changed since the requested time. The logic should be inclusive so that it does not miss any potential changes. The paths should be relative to the root of the working directory and be separated by a single NUL.\n\nIt is OK to include files which have not actually changed. All changes including newly-created and deleted files should be included. When files are renamed, both the old and the new name should be included.\n\nGit will limit what files it checks for changes as well as which directories are checked for untracked files based on the path names given.\n\nAn optimized way to tell git \"all files have changed\" is to return the filename `/`.\n\nThe exit status determines whether git will use the data from the hook to limit its search. On error, it will fall back to verifying all files and folders."
        },
        "p4-pre-submit": {
          "$ref": "#/definitions/hook",
          "$comment": "https://git-scm.com/docs/githooks#_p4_pre_submit",
          "description": "This hook is invoked by git-p4 submit. It takes no parameters and nothing from standard input. Exiting with non-zero status from this script prevent git-p4 submit from launching. Run git-p4 submit --help for details.",
          "x-intellij-html-description": "\u003cp\u003eThis hook is invoked by \u003ccode\u003egit-p4 submit\u003c/code\u003e. It takes no parameters and nothing from standard input. Exiting with non-zero status from this script prevent \u003ccode\u003egit-p4 submit\u003c/code\u003e from launching. Run \u003ccode\u003egit-p4 submit --help\u003c/code\u003e for details.\u003c/p\u003e",
          "markdownDescription": "This hook is invoked by `git-p4 submit`. It takes no parameters and nothing from standard input. Exiting with non-zero status from this script prevent `git-p4 submit` from launching. Run `git-p4 submit --help` for details."
        }
      },
      "additionalProperties": false
    }
  },
  "required": [
    "hooks"
  ],
  "definitions": {
    "hook": {
      "type": "string",
      "x-intellij-language-injection": "Shell Script"
    }
  }
}